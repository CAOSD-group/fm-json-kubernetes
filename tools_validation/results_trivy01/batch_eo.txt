
Report Summary

┌─────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                       Target                        │    Type    │ Misconfigurations │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Kubernetes-From-Scratch-Wrap-Up-Test.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Kubernetes-From-Scratch-Wrap-Up-Test_1.yaml         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml         │ kubernetes │        17         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Kubernetes-From-Scratch-Wrap-Up-Test_3.yaml         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Kubernetes-From-Scratch-Wrap-Up-Test_4.yaml         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kube9_5.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeadm-config11.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeadm-config12.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeadm-config13.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeadm-config14.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeadm-config15.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeapps-ingress.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeapps-service.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubearmor-controller-mutating-webhook-config_2.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubearmor-scc.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubearmorhostpolicy_editor_role.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubearmorhostpolicy_viewer_role.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubearmorpolicy_editor_role.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubearmorpolicy_viewer_role.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench1_1.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench1_2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench1_3.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench1_4.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench1_5.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench1_6.yaml                                   │ kubernetes │        10         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench_1.yaml                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench_2.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench_3.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench_4.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench_5.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubebench_6.yaml                                    │ kubernetes │        10         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeblog-deployment1.yaml                           │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeblog.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeblog_1.yaml                                     │ kubernetes │        16         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding1.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding10.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding11.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding13.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding14.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding15.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding16.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding17.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding18.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding2.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding3.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding4.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding5.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding6.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding7.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding8.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubecfg-binding9.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-admin-access.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-admin-access_1.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-admin-access_2.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-client.yaml                                 │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-deployment.yaml                             │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-patch.yaml                                  │ kubernetes │        30         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-patch2.yaml                                 │ kubernetes │        33         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-pod.yaml                                    │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-pod1.yaml                                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-pod2.yaml                                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-pod3.yaml                                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl-pod4.yaml                                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl1.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl1_1.yaml                                     │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl3.yaml                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubectl3_1.yaml                                     │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedeploy.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedeploy_1.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedeploy_2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedeploy_3.yaml                                   │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedeploy_4.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns-cm.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns-sa.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns-svc.yaml                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns1.yaml                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns1_1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns1_2.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns2.yaml                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns2_1.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns2_2.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns_deployment.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns_deployment_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns_deployment_2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubedns_deployment_3.yaml                           │ kubernetes │        48         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeeye-config.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeflow-config.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeflow-config_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeflow-config_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeflow-config_3.yaml                              │ kubernetes │        12         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeflow-config_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubegress.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubegress_1.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubegress_2.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubegress_3.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubegress_4.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubegress_6.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter.yaml                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter1.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter1_1.yaml                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter1_2.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter1_3.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter1_4.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter1_5.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter1_6.yaml                                  │ kubernetes │        10         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter_1.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter_2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter_3.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter_4.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter_5.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubehunter_6.yaml                                   │ kubernetes │        10         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli1.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli1_1.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli1_2.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli2.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli2_1.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli2_2.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli3.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli3_1.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli3_2.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli_1.yaml                                 │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-cli_2.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.7.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.71.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.71_7.yaml                             │ kubernetes │        49         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.71_8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.72.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.72_7.yaml                             │ kubernetes │        49         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.72_8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.73.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.73_7.yaml                             │ kubernetes │        49         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.73_8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.7_7.yaml                              │ kubernetes │        49         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.7_8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.8_1.yaml                              │ kubernetes │        33         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeless-v1.0.8_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role10.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role11.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role13.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role14.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role15.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role16.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role17.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role18.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role5.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role6.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role7.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role8.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-api-admin-role9.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding10.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding10_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding11.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding12.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding13.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding13_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding14.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding15.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding16.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding16_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding17.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding18.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding19.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding19_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding1_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding20.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding21.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding22.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding22_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding23.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding24.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding25.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding25_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding26.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding27.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding28.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding28_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding29.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding30.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding31.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding31_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding32.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding33.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding34.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding34_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding35.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding39.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding40.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding40_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding41.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding42.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding43.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding43_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding44.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding45.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding46.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding46_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding47.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding48.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding49.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding49_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding4_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding5.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding50.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding51.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding52.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding52_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding53.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding54.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding55.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding55_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding56.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding6.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding7.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding7_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding8.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-binding9.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-bootstrap-csr.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-bootstrap-csr_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-bootstrap-rbac.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-bootstrap-rbac1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management10.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management10_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management10_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management10_3.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management11.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management11_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management11_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management11_3.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management13.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management13_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management13_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management13_3.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management14.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management14_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management14_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management14_3.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management15.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management15_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management15_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management15_3.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management16.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management16_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management16_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management16_3.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management17.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management17_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management17_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management17_3.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management18.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management18_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management18_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management18_3.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management1_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management1_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management1_3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management2.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management2_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management2_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management2_3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management3.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management3_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management3_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management3_3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management4.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management4_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management4_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management4_3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management5.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management5_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management5_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management5_3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management6.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management6_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management6_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management6_3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management7.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management7_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management7_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management7_3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management8.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management8_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management8_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management8_3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management9.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management9_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management9_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management9_3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management_2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-certificate-management_3.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-flag-editor-configmap.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-flag-editor-ds.yaml                         │ kubernetes │        17         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubelet-flag-editor-ns.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeletplugin.yaml                                  │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemon-ingress.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemon-ingress1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemon-ingress1_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemon-ingress1_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemon-ingress_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemon-ingress_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemon_editor_role.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemon_viewer_role.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemonitor-depl.yaml                               │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemonitor-depl_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubemonitor-depl_2.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuber-deployment.yaml                               │ kubernetes │        20         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuber-deployment1.yaml                              │ kubernetes │        20         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuber-service.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuber-service1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuberesolver_role.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuberesolver_role1.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuberesolver_role1_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuberesolver_role_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-bootcamp.yaml                            │ kubernetes │        17         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-bootcamp_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-cluster-role-binding.yaml                │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-configmap.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-container.yaml                           │ kubernetes │        17         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-container1.yaml                          │ kubernetes │        17         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-container1_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-container_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-cronjob.yaml                             │ kubernetes │         8         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-daemonset-v1.yaml                        │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-daemonset-v2.yaml                        │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac1_1.yaml             │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac2_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac2_2.yaml             │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac3.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac3_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac3_2.yaml             │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac4.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac4_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac4_2.yaml             │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-admin.rbac_2.yaml              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-adminuser.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-adminuser_1.yaml               │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-adminuser_2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-cluster-role-binding.yaml      │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-ingress.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-ingress1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-kong-proxy.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-loadbalancer.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1_10.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1_2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1_3.yaml                  │ kubernetes │         4         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1_4.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1_5.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1_6.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1_7.yaml                  │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1_8.yaml                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local1_9.yaml                  │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local_10.yaml                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local_2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local_3.yaml                   │ kubernetes │         4         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local_4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local_5.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local_6.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local_7.yaml                   │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local_8.yaml                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-local_9.yaml                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-nodeport.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-sa.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-secret.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np1_1.yaml             │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np1_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np2_1.yaml             │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np2_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np3.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np3_1.yaml             │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np3_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np_1.yaml              │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-service-np_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-user.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-user_1.yaml                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard-user_2.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_11.yaml                      │ kubernetes │        14         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_13.yaml                      │ kubernetes │        13         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_7.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard10_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_11.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_13.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_7.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard12_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_11.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_13.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_14.yaml                      │ kubernetes │         7         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_15.yaml                      │ kubernetes │         7         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_16.yaml                      │ kubernetes │         7         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_6.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard15_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard16.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard16_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard16_5.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard17.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard17_1.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard17_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_11.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_13.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_7.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard18_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_11.yaml                      │ kubernetes │        14         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_13.yaml                      │ kubernetes │        13         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_7.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard19_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_11.yaml                      │ kubernetes │        14         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_13.yaml                      │ kubernetes │        13         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_7.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard20_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_11.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_13.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_7.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard22_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_11.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_13.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_14.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_15.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_16.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_6.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard25_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard26.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard27.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard28.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_11.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_13.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_7.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard30_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_11.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_13.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_7.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard33_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard34.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard34_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard34_2.yaml                       │ kubernetes │         4         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard34_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard34_5.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard35.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard35_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard35_2.yaml                       │ kubernetes │         4         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard35_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard35_5.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_11.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_13.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_7.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard36_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard37.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard37_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard37_2.yaml                       │ kubernetes │         4         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard37_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard37_4.yaml                       │ kubernetes │        20         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard37_5.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_11.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_13.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_7.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard39_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_10.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_11.yaml                       │ kubernetes │        14         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_12.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_13.yaml                       │ kubernetes │        13         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_5.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_6.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_7.yaml                        │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_8.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard3_9.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_11.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_12.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_13.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_14.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_15.yaml                      │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_8.yaml                       │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard40_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_10.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_11.yaml                       │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_12.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_13.yaml                       │ kubernetes │        11         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_5.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_6.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_7.yaml                        │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_8.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-dashboard5_9.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment-manifest.yaml                 │ kubernetes │        29         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_1.yaml                       │ kubernetes │        17         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_11.yaml                      │ kubernetes │        17         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_4.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_6.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_8.yaml                       │ kubernetes │        17         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment1_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_10.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_11.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_12.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_13.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_2.yaml                       │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_4.yaml                       │ kubernetes │        18         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_6.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_8.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment2_9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment3.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment3_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-deployment_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod1.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod10.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod11.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod13.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod14.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod15.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod16.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod17.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod18.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod2.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod3.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod4.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod5.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod6.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod7.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod8.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discover-pod9.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa11.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa13.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa14.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa15.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa16.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa17.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa18.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-sa9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc10.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc11.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc13.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc14.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc15.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc16.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc17.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc18.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc2.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc3.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc4.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc5.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc6.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc7.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc8.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-discovery-svc9.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-experiments-01-namespace.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-experiments-02-namespace.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-external-secrets-auth-crb.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-external-secrets-clusterrole.yaml        │ kubernetes │         2         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-external-secrets-crb.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-external-secrets-deploy.yaml             │ kubernetes │        28         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-external-secrets-sa.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-external-secrets-svc.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-headlamp-ci.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-headlamp-ci_1.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-headlamp-ci_2.yaml                       │ kubernetes │        34         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-headlamp-ci_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-headlamp-ingress-sample.yaml             │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-headlamp.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-headlamp_1.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-headlamp_2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-incluster.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-incluster1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-incluster1_1.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-incluster2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-incluster2_1.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-incluster_1.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-loadbalancer.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-long-lived-bearer-token.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests.yaml                           │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests1.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10.yaml                         │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_11.yaml                      │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_13.yaml                      │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_14.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_15.yaml                      │ kubernetes │        14         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_16.yaml                      │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_17.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_18.yaml                      │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_19.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_2.yaml                       │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_20.yaml                      │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_21.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_22.yaml                      │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_23.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_4.yaml                       │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_6.yaml                       │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests10_9.yaml                       │ kubernetes │         5         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11.yaml                         │ kubernetes │        13         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_11.yaml                      │ kubernetes │        13         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_13.yaml                      │ kubernetes │        13         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_14.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_15.yaml                      │ kubernetes │        13         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_16.yaml                      │ kubernetes │        13         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_17.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_18.yaml                      │ kubernetes │        13         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_19.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_2.yaml                       │ kubernetes │        13         │
└─────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml (kubernetes)
========================================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'mywebserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'mywebserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'mywebserver' in 'myingress-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'mywebserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'mywebserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'mywebserver' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'mywebserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'mywebserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'mywebserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'mywebserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'mywebserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'mywebserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "mywebserver" in "myingress-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mywebserver in myingress-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mywebserver in myingress-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Kubernetes-From-Scratch-Wrap-Up-Test_2.yaml:9-21
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: nginx
  11 │     image: nginx:latest
  12 │     volumeMounts:
  13 │     - name: docroot
  14 │       mountPath: /usr/share/nginx/html
  15 │   volumes:
  16 │   - name: docroot
  17 └     configMap:
  ..   
────────────────────────────────────────



kubeapps-service.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'kubeapps' in 'kubernetes-dashboard' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



kubebench1_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubebench-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubebench1_1.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 │   - watch
  15 └   - create
  ..   
────────────────────────────────────────



kubebench1_6.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubebench' of Deployment 'kubebench' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubebench1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubebench' of 'deployment' 'kubebench' in 'kubeeye-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubebench1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubebench' of Deployment 'kubebench' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubebench1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubebench' of Deployment 'kubebench' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubebench1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubebench' of Deployment 'kubebench' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubebench1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubebench' of Deployment 'kubebench' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubebench1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubebench1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubebench" of deployment "kubebench" in "kubeeye-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubebench1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubebench1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubebench in deployment kubebench (namespace: kubeeye-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubebench1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────



kubebench_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubebench-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubebench_1.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 │   - watch
  15 └   - create
  ..   
────────────────────────────────────────



kubebench_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubebench' of Deployment 'kubebench' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubebench_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubebench' of 'deployment' 'kubebench' in 'kubeeye-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubebench_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubebench' of Deployment 'kubebench' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubebench_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubebench' of Deployment 'kubebench' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubebench_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubebench' of Deployment 'kubebench' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubebench_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubebench' of Deployment 'kubebench' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubebench_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubebench_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubebench" of deployment "kubebench" in "kubeeye-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubebench_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubebench_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubebench in deployment kubebench (namespace: kubeeye-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubebench_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubebench:latest
  20 │         name: kubebench
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────



kubeblog-deployment1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubeblog' of Deployment 'kubeblog-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeblog' of Deployment 'kubeblog-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeblog' of 'deployment' 'kubeblog-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeblog' of Deployment 'kubeblog-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeblog' of Deployment 'kubeblog-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubeblog' of Deployment 'kubeblog-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeblog' of Deployment 'kubeblog-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeblog' of Deployment 'kubeblog-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeblog' of Deployment 'kubeblog-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeblog' of Deployment 'kubeblog-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeblog' of Deployment 'kubeblog-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeblog' of Deployment 'kubeblog-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeblog" of deployment "kubeblog-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment kubeblog-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubeblog-deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kubeblog-deployment
   5 │   labels:
   6 └     app: kubeblog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeblog-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeblog-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubeblog-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeblog-deployment1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: kubeblog
  19 │         image: kubeblog
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────



kubeblog_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubeblog' of Deployment 'kubeblog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeblog' of Deployment 'kubeblog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeblog' of 'deployment' 'kubeblog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeblog' of Deployment 'kubeblog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeblog' of Deployment 'kubeblog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeblog' of Deployment 'kubeblog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeblog' of Deployment 'kubeblog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeblog' of Deployment 'kubeblog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeblog' of Deployment 'kubeblog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeblog" of deployment "kubeblog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment kubeblog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubeblog_1.yaml:4
────────────────────────────────────────
   4 [   name: kubeblog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeblog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubeblog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeblog_1.yaml:15-39
────────────────────────────────────────
  15 ┌       imagePullSecrets:
  16 │       - name: regcred-local
  17 │       containers:
  18 │       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubeblog in deployment kubeblog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeblog_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: kubeblog
  19 │         image: 192.168.10.101:8081/docker/kubeblog
  20 │         resources:
  21 │           limits:
  22 │             memory: 1Gi
  23 │             cpu: 500m
  24 │         ports:
  25 │         - containerPort: 5000
  26 └         env:
  ..   
────────────────────────────────────────



kubecfg-binding.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding1.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding10.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding10.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding11.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding13.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding14.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding15.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding16.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding16.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding17.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding17.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding18.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding18.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding2.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding3.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding4.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding4.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding5.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding5.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding6.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding6.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding7.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding7.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding8.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding8.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubecfg-binding9.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubecfg-cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubecfg-binding9.yaml:8-10
────────────────────────────────────────
   8 ┌   name: kubecfg-cluster-admin
   9 │   labels:
  10 └     kubernetes.io/cluster-service: "true"
────────────────────────────────────────



kubectl-admin-access.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'eskimo' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubectl-admin-access.yaml:4
────────────────────────────────────────
   4 [   name: eskimo
────────────────────────────────────────



kubectl-admin-access_1.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'eskimo' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubectl-admin-access_1.yaml:4
────────────────────────────────────────
   4 [   name: eskimo
────────────────────────────────────────



kubectl-admin-access_2.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'eskimo' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubectl-admin-access_2.yaml:4
────────────────────────────────────────
   4 [   name: eskimo
────────────────────────────────────────



kubectl-client.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubectl-container' of Pod 'kubectl-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubectl-container' of Pod 'kubectl-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubectl-container' of 'pod' 'kubectl-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubectl-container' of Pod 'kubectl-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubectl-container' of Pod 'kubectl-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubectl-container' of Pod 'kubectl-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubectl-container' of Pod 'kubectl-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubectl-container' of Pod 'kubectl-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubectl-container' of Pod 'kubectl-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubectl-container' of Pod 'kubectl-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubectl-container' of Pod 'kubectl-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubectl-container" of pod "kubectl-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kubectl-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubectl-client.yaml:5
────────────────────────────────────────
   5 [   name: kubectl-client
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubectl-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kubectl-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-client.yaml:7-11
────────────────────────────────────────
   7 ┌   serviceAccountName: operator
   8 │   containers:
   9 │     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubectl-container in pod kubectl-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl-client.yaml:9-11
────────────────────────────────────────
   9 ┌     - name: kubectl-container
  10 │       image: lachlanevenson/k8s-kubectl:v1.25.1
  11 └       command: ["sleep", "86400"]
────────────────────────────────────────



kubectl-deployment.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test' of Deployment 'test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test' of Deployment 'test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test' of 'deployment' 'test' in 'cronus' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test' of Deployment 'test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test' of Deployment 'test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test' of Deployment 'test' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test' of Deployment 'test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test' of Deployment 'test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test' of Deployment 'test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test' of Deployment 'test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test' of Deployment 'test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test' of Deployment 'test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test" of deployment "test" in "cronus" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test in cronus namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment test in cronus namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-deployment.yaml:17-23
────────────────────────────────────────
  17 ┌       serviceAccountName: cronus
  18 │       containers:
  19 │       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container test in deployment test (namespace: cronus) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: test
  20 │         image: bitnami/kubectl:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         command: [ "/bin/sh", "-c", "--" ]
  23 └         args: [ "while true; do sleep 300; done;" ]
────────────────────────────────────────



kubectl-patch.yaml (kubernetes)
===============================
Tests: 127 (SUCCESSES: 97, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 20, MEDIUM: 7, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sync' of Deployment 'credentials-sync-eventhub' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync-eventhub' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sync' of Deployment 'credentials-sync-eventhub' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'copy-kubectl' of 'deployment' 'credentials-sync-eventhub' in 'flux-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sync' of 'deployment' 'credentials-sync-eventhub' in 'flux-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync-eventhub' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sync' of Deployment 'credentials-sync-eventhub' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'copy-kubectl' of Deployment 'credentials-sync-eventhub' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sync' of Deployment 'credentials-sync-eventhub' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sync' of Deployment 'credentials-sync-eventhub' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sync' of Deployment 'credentials-sync-eventhub' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync-eventhub' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sync' of Deployment 'credentials-sync-eventhub' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync-eventhub' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sync' of Deployment 'credentials-sync-eventhub' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync-eventhub' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sync' of Deployment 'credentials-sync-eventhub' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync-eventhub' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sync' of Deployment 'credentials-sync-eventhub' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync-eventhub' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sync' of Deployment 'credentials-sync-eventhub' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "copy-kubectl" of deployment "credentials-sync-eventhub" in "flux-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sync" of deployment "credentials-sync-eventhub" in "flux-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container credentials-sync-eventhub in flux-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-patch.yaml:26-29
────────────────────────────────────────
  26 ┌         - name: sync
  27 │           volumeMounts:
  28 │             - name: kbin
  29 └               mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment credentials-sync-eventhub in flux-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-patch.yaml:9-32
────────────────────────────────────────
   9 ┌       initContainers:
  10 │         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 └           command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copy-kubectl in deployment credentials-sync-eventhub (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl-patch.yaml:10-24
────────────────────────────────────────
  10 ┌         - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │           securityContext:
  12 │             privileged: false
  13 │             readOnlyRootFilesystem: true
  14 │             allowPrivilegeEscalation: false
  15 │           name: copy-kubectl
  16 │           # it's okay to do this because kubectl is a statically linked binary
  17 │           command:
  18 └             - sh
  ..   
────────────────────────────────────────



kubectl-patch2.yaml (kubernetes)
================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'copy-kubectl' of Deployment 'credentials-sync' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sync' of Deployment 'credentials-sync' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sync' of Deployment 'credentials-sync' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'copy-kubectl' of 'deployment' 'credentials-sync' in 'flux-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sync' of 'deployment' 'credentials-sync' in 'flux-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sync' of Deployment 'credentials-sync' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'copy-kubectl' of Deployment 'credentials-sync' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sync' of Deployment 'credentials-sync' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sync' of Deployment 'credentials-sync' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'copy-kubectl' of Deployment 'credentials-sync' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sync' of Deployment 'credentials-sync' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sync' of Deployment 'credentials-sync' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sync' of Deployment 'credentials-sync' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sync' of Deployment 'credentials-sync' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sync' of Deployment 'credentials-sync' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copy-kubectl' of Deployment 'credentials-sync' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sync' of Deployment 'credentials-sync' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "copy-kubectl" of deployment "credentials-sync" in "flux-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sync" of deployment "credentials-sync" in "flux-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container credentials-sync in flux-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-patch2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: sync
  23 │         volumeMounts:
  24 │         - name: kbin
  25 └           mountPath: /kbin
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container credentials-sync in flux-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment credentials-sync in flux-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-patch2.yaml:9-28
────────────────────────────────────────
   9 ┌       initContainers:
  10 │       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copy-kubectl in deployment credentials-sync (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl-patch2.yaml:10-20
────────────────────────────────────────
  10 ┌       - image: ghcr.io/fluxcd/flux-cli:v0.17.2
  11 │         name: copy-kubectl
  12 │         # it's okay to do this because kubectl is a statically linked binary
  13 │         command:
  14 │         - sh
  15 │         - -ceu
  16 │         - cp $(which kubectl) /kbin/
  17 │         resources: {}
  18 └         volumeMounts:
  ..   
────────────────────────────────────────



kubectl-pod.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubectl' of 'pod' 'kubectl-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubectl" of pod "kubectl-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kubectl-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubectl-pod.yaml:4
────────────────────────────────────────
   4 [   name: kubectl-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubectl-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kubectl-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubectl in pod kubectl-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────



kubectl-pod1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubectl' of 'pod' 'kubectl-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubectl" of pod "kubectl-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kubectl-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubectl-pod1.yaml:4
────────────────────────────────────────
   4 [   name: kubectl-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubectl-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kubectl-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubectl in pod kubectl-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl-pod1.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: kubectl
   9 │       image: bitnami/kubectl
  10 └       command: ["sleep", "2000"]
────────────────────────────────────────



kubectl-pod2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubectl' of 'pod' 'kubectl-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubectl" of pod "kubectl-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kubectl-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubectl-pod2.yaml:4
────────────────────────────────────────
   4 [   name: kubectl-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubectl-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kubectl-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-pod2.yaml:6-10
────────────────────────────────────────
   6 ┌   serviceAccount: test-sa
   7 │   containers:
   8 │   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubectl in pod kubectl-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl-pod2.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────



kubectl-pod3.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubectl' of 'pod' 'kubectl-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubectl" of pod "kubectl-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kubectl-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubectl-pod3.yaml:4
────────────────────────────────────────
   4 [   name: kubectl-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubectl-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kubectl-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-pod3.yaml:6-10
────────────────────────────────────────
   6 ┌   serviceAccount: test-sa
   7 │   containers:
   8 │   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubectl in pod kubectl-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl-pod3.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────



kubectl-pod4.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubectl' of 'pod' 'kubectl-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubectl' of Pod 'kubectl-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubectl' of Pod 'kubectl-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubectl" of pod "kubectl-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kubectl-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubectl-pod4.yaml:4
────────────────────────────────────────
   4 [   name: kubectl-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubectl-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kubectl-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl-pod4.yaml:6-10
────────────────────────────────────────
   6 ┌   ServiceAccount: test-sa
   7 │   containers:
   8 │   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubectl in pod kubectl-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌   - name: kubectl 
   9 │     image: bitnami/kubectl
  10 └     command: ["sleep", "20000"]
────────────────────────────────────────



kubectl1_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test1' of Deployment 'flask' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test1' of Deployment 'flask' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test1' of 'deployment' 'flask' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test1' of Deployment 'flask' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test1' of Deployment 'flask' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test1' of Deployment 'flask' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test1' of Deployment 'flask' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test1' of Deployment 'flask' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test1' of Deployment 'flask' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test1' of Deployment 'flask' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test1' of Deployment 'flask' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test1" of deployment "flask" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment flask in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubectl1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: flask
   5 │   labels:
   6 └     app: flask
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container flask in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment flask in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl1_1.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container test1 in deployment flask (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl1_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────



kubectl3_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test1' of Deployment 'flask' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test1' of Deployment 'flask' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test1' of 'deployment' 'flask' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test1' of Deployment 'flask' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test1' of Deployment 'flask' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test1' of Deployment 'flask' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test1' of Deployment 'flask' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test1' of Deployment 'flask' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test1' of Deployment 'flask' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test1' of Deployment 'flask' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test1' of Deployment 'flask' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test1" of deployment "flask" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment flask in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubectl3_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: flask
   5 │   labels:
   6 └     app: flask
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container flask in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment flask in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubectl3_1.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container test1 in deployment flask (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubectl3_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: test1
  19 └         image: europe-west9-docker.pkg.dev/deploymlappgcl/test1/test1:test_ml_image
────────────────────────────────────────



kubedeploy_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'global-deployment-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 kubedeploy_1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - apps
   8 │   resources:
   9 │   - deployments
  10 │   verbs:
  11 │   - get
  12 │   - list
  13 └   - update
────────────────────────────────────────



kubedeploy_3.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubedeploy-container' of Deployment 'kubedeploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubedeploy-container' of Deployment 'kubedeploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubedeploy-container' of 'deployment' 'kubedeploy' in 'kubedeploy' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubedeploy-container' of Deployment 'kubedeploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubedeploy-container' of Deployment 'kubedeploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubedeploy-container' of Deployment 'kubedeploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubedeploy-container' of Deployment 'kubedeploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubedeploy-container' of Deployment 'kubedeploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubedeploy-container' of Deployment 'kubedeploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubedeploy-container' of Deployment 'kubedeploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubedeploy-container' of Deployment 'kubedeploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubedeploy-container' of Deployment 'kubedeploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubedeploy-container" of deployment "kubedeploy" in "kubedeploy" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubedeploy in kubedeploy namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubedeploy in kubedeploy namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubedeploy_3.yaml:16-27
────────────────────────────────────────
  16 ┌       serviceAccountName: kubedeploy-sa
  17 │       containers:
  18 │       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubedeploy-container in deployment kubedeploy (namespace: kubedeploy) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubedeploy_3.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: kubedeploy-container
  19 │         image: docker.prayujt.com/kubedeploy
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: DEPLOY_TOKEN
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: kubedeploy-secret
  27 └               key: DEPLOY_TOKEN
────────────────────────────────────────



kubedns-svc.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubedns-svc.yaml:28-37
────────────────────────────────────────
  28 ┌   selector:
  29 │     k8s-app: kube-dns
  30 │   clusterIP: 10.254.0.2
  31 │   ports:
  32 │   - name: dns
  33 │     port: 53
  34 │     protocol: UDP
  35 │   - name: dns-tcp
  36 │     port: 53
  37 └     protocol: TCP
────────────────────────────────────────



kubedns1.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubedns1.yaml:12-21
────────────────────────────────────────
  12 ┌   selector:
  13 │     k8s-app: kube-dns
  14 │   clusterIP: 10.96.0.10
  15 │   ports:
  16 │   - name: dns
  17 │     port: 53
  18 │     protocol: UDP
  19 │   - name: dns-tcp
  20 │     port: 53
  21 └     protocol: TCP
────────────────────────────────────────



kubedns2.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubedns2.yaml:12-21
────────────────────────────────────────
  12 ┌   selector:
  13 │     k8s-app: kube-dns
  14 │   clusterIP: 10.96.0.10
  15 │   ports:
  16 │   - name: dns
  17 │     port: 53
  18 │     protocol: UDP
  19 │   - name: dns-tcp
  20 │     port: 53
  21 └     protocol: TCP
────────────────────────────────────────



kubedns_deployment.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubedns_deployment.yaml:12-21
────────────────────────────────────────
  12 ┌   selector:
  13 │     k8s-app: kube-dns
  14 │   clusterIP: 10.96.0.10
  15 │   ports:
  16 │   - name: dns
  17 │     port: 53
  18 │     protocol: UDP
  19 │   - name: dns-tcp
  20 │     port: 53
  21 └     protocol: TCP
────────────────────────────────────────



kubedns_deployment_3.yaml (kubernetes)
======================================
Tests: 145 (SUCCESSES: 97, FAILURES: 48)
Failures: 48 (UNKNOWN: 0, LOW: 30, MEDIUM: 11, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dnsmasq' of Deployment 'kube-dns' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubedns' of Deployment 'kube-dns' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar' of Deployment 'kube-dns' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dnsmasq' of Deployment 'kube-dns' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubedns' of Deployment 'kube-dns' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar' of Deployment 'kube-dns' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dnsmasq' of 'deployment' 'kube-dns' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubedns' of 'deployment' 'kube-dns' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar' of 'deployment' 'kube-dns' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dnsmasq' of Deployment 'kube-dns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubedns' of Deployment 'kube-dns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sidecar' of Deployment 'kube-dns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dnsmasq' of Deployment 'kube-dns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubedns' of Deployment 'kube-dns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar' of Deployment 'kube-dns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dnsmasq' of Deployment 'kube-dns' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubedns' of Deployment 'kube-dns' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar' of Deployment 'kube-dns' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dnsmasq' of Deployment 'kube-dns' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubedns' of Deployment 'kube-dns' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sidecar' of Deployment 'kube-dns' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dnsmasq' of Deployment 'kube-dns' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubedns' of Deployment 'kube-dns' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sidecar' of Deployment 'kube-dns' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dnsmasq' of Deployment 'kube-dns' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubedns' of Deployment 'kube-dns' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sidecar' of Deployment 'kube-dns' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dnsmasq' of Deployment 'kube-dns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubedns' of Deployment 'kube-dns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar' of Deployment 'kube-dns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dnsmasq' of Deployment 'kube-dns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubedns' of Deployment 'kube-dns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar' of Deployment 'kube-dns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubedns_deployment_3.yaml:10-159
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: kube-dns
  14 │   strategy:
  15 │     rollingUpdate:
  16 │       maxSurge: 10%
  17 │       maxUnavailable: 0
  18 └     type: RollingUpdate
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dnsmasq" of deployment "kube-dns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubedns" of deployment "kube-dns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar" of deployment "kube-dns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment kube-dns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-dns in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubedns_deployment_3.yaml:81-117
────────────────────────────────────────
  81 ┌       - args:
  82 │         - -v=2
  83 │         - -logtostderr
  84 │         - -configDir=/etc/k8s/dns/dnsmasq-nanny
  85 │         - -restartDnsmasq=true
  86 │         - --
  87 │         - -k
  88 │         - --cache-size=1000
  89 └         - --log-facility=-
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-dns in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubedns_deployment_3.yaml:35-80
────────────────────────────────────────
  35 ┌       - args:
  36 │         - --domain=cluster.local.
  37 │         - --dns-port=10053
  38 │         - --config-dir=/kube-dns-config
  39 │         - --v=5
  40 │         env:
  41 │         - name: PROMETHEUS_PORT
  42 │           value: '10055'
  43 └         image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.10
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-dns in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubedns_deployment_3.yaml:118-141
────────────────────────────────────────
 118 ┌       - args:
 119 │         - --v=2
 120 │         - --logtostderr
 121 │         - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
 122 │         - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
 123 │         image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.10
 124 │         imagePullPolicy: IfNotPresent
 125 │         livenessProbe:
 126 └           failureThreshold: 5
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-dns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubedns_deployment_3.yaml:25-159
────────────────────────────────────────
  25 ┌       affinity:
  26 │         nodeAffinity:
  27 │           requiredDuringSchedulingIgnoredDuringExecution:
  28 │             nodeSelectorTerms:
  29 │             - matchExpressions:
  30 │               - key: kubernetes.io/arch
  31 │                 operator: In
  32 │                 values:
  33 └                 - amd64
  ..   
────────────────────────────────────────



kubeflow-config_1.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'kubeflow-admin' shouldn't manage all resources at the namespace 'kubeflow'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 kubeflow-config_1.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - kubeflow.org
   9 │   resources:
  10 │   - '*'
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────



kubeflow-config_3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'centraldashboard' of Deployment 'centraldashboard' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'centraldashboard' of Deployment 'centraldashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'centraldashboard' of 'deployment' 'centraldashboard' in 'kubeflow' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'centraldashboard' of Deployment 'centraldashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'centraldashboard' of Deployment 'centraldashboard' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'centraldashboard' of Deployment 'centraldashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'centraldashboard' of Deployment 'centraldashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "centraldashboard" of deployment "centraldashboard" in "kubeflow" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container centraldashboard in kubeflow namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeflow-config_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 100m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment centraldashboard in kubeflow namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeflow-config_3.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: centraldashboard
  18 │         image: gcr.io/kubeflow-images-public/centraldashboard:v2.0.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 └             cpu: 100m
  ..   
────────────────────────────────────────



kubehunter1_1.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubehunter-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubehunter1_1.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 │   - watch
  15 └   - create
  ..   
────────────────────────────────────────



kubehunter1_6.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubehunter' of Deployment 'kubehunter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubehunter1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubehunter' of 'deployment' 'kubehunter' in 'kubeeye-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubehunter1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubehunter' of Deployment 'kubehunter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubehunter1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubehunter' of Deployment 'kubehunter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubehunter1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubehunter' of Deployment 'kubehunter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubehunter1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubehunter' of Deployment 'kubehunter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubehunter1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubehunter1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubehunter" of deployment "kubehunter" in "kubeeye-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubehunter1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubehunter1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubehunter in deployment kubehunter (namespace: kubeeye-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubehunter1_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────



kubehunter_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubehunter-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubehunter_1.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 │   - watch
  15 └   - create
  ..   
────────────────────────────────────────



kubehunter_6.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubehunter' of Deployment 'kubehunter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubehunter_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubehunter' of 'deployment' 'kubehunter' in 'kubeeye-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubehunter_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubehunter' of Deployment 'kubehunter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubehunter_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubehunter' of Deployment 'kubehunter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubehunter_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubehunter' of Deployment 'kubehunter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubehunter_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubehunter' of Deployment 'kubehunter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubehunter_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubehunter_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubehunter" of deployment "kubehunter" in "kubeeye-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubehunter_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubehunter_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubehunter in deployment kubehunter (namespace: kubeeye-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubehunter_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubehunter:latest
  20 │         name: kubehunter
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────



kubeless-cli1_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeless-cli' of 'pod' 'kubeless-cli' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeless-cli" of pod "kubeless-cli" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kubeless-cli in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubeless-cli1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kubeless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-cli in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kubeless-cli in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-cli1_1.yaml:8-11
────────────────────────────────────────
   8 ┌   serviceAccountName: kubeless-cli
   9 │   containers:
  10 │   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubeless-cli in pod kubeless-cli (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────



kubeless-cli1_2.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubeless-cli' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubeless-cli1_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kubeless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────



kubeless-cli2_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeless-cli' of 'pod' 'kubeless-cli' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeless-cli" of pod "kubeless-cli" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kubeless-cli in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubeless-cli2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kubeless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-cli in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kubeless-cli in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-cli2_1.yaml:8-11
────────────────────────────────────────
   8 ┌   serviceAccountName: kubeless-cli
   9 │   containers:
  10 │   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubeless-cli in pod kubeless-cli (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────



kubeless-cli2_2.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubeless-cli' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubeless-cli2_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kubeless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────



kubeless-cli3_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeless-cli' of 'pod' 'kubeless-cli' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeless-cli" of pod "kubeless-cli" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kubeless-cli in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubeless-cli3_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kubeless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-cli in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kubeless-cli in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-cli3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   serviceAccountName: kubeless-cli
   9 │   containers:
  10 │   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubeless-cli in pod kubeless-cli (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────



kubeless-cli3_2.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubeless-cli' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubeless-cli3_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kubeless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────



kubeless-cli_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeless-cli' of 'pod' 'kubeless-cli' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubeless-cli' of Pod 'kubeless-cli' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeless-cli' of Pod 'kubeless-cli' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeless-cli" of pod "kubeless-cli" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kubeless-cli in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubeless-cli_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kubeless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-cli in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kubeless-cli in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-cli_1.yaml:8-11
────────────────────────────────────────
   8 ┌   serviceAccountName: kubeless-cli
   9 │   containers:
  10 │   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubeless-cli in pod kubeless-cli (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: kubeless-cli
  11 └     image: kiamol/ch21-kubeless-cli
────────────────────────────────────────



kubeless-cli_2.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubeless-cli' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubeless-cli_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kubeless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────



kubeless-v1.0.71_7.yaml (kubernetes)
====================================
Tests: 147 (SUCCESSES: 98, FAILURES: 49)
Failures: 49 (UNKNOWN: 0, LOW: 30, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cronjob-trigger-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'http-trigger-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeless-function-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cronjob-trigger-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "http-trigger-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeless-function-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubeless-controller-manager in kubeless namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:17-78
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cronjob-trigger-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container http-trigger-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubeless-function-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.71_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────



kubeless-v1.0.72_7.yaml (kubernetes)
====================================
Tests: 147 (SUCCESSES: 98, FAILURES: 49)
Failures: 49 (UNKNOWN: 0, LOW: 30, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cronjob-trigger-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'http-trigger-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeless-function-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cronjob-trigger-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "http-trigger-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeless-function-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubeless-controller-manager in kubeless namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:17-78
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cronjob-trigger-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container http-trigger-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubeless-function-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.72_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────



kubeless-v1.0.73_7.yaml (kubernetes)
====================================
Tests: 147 (SUCCESSES: 98, FAILURES: 49)
Failures: 49 (UNKNOWN: 0, LOW: 30, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cronjob-trigger-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'http-trigger-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeless-function-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cronjob-trigger-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "http-trigger-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeless-function-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubeless-controller-manager in kubeless namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:17-78
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cronjob-trigger-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container http-trigger-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubeless-function-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.73_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────



kubeless-v1.0.7_7.yaml (kubernetes)
===================================
Tests: 147 (SUCCESSES: 98, FAILURES: 49)
Failures: 49 (UNKNOWN: 0, LOW: 30, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cronjob-trigger-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'http-trigger-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeless-function-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cronjob-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cronjob-trigger-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "http-trigger-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeless-function-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubeless-controller-manager in kubeless namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:17-78
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cronjob-trigger-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:58-77
────────────────────────────────────────
  58 ┌       - env:
  59 │         - name: KUBELESS_INGRESS_ENABLED
  60 │           valueFrom:
  61 │             configMapKeyRef:
  62 │               key: ingress-enabled
  63 │               name: kubeless-config
  64 │         - name: KUBELESS_SERVICE_TYPE
  65 │           valueFrom:
  66 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container http-trigger-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubeless-function-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.7_7.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────



kubeless-v1.0.8_1.yaml (kubernetes)
===================================
Tests: 131 (SUCCESSES: 98, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'http-trigger-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeless-function-controller' of 'deployment' 'kubeless-controller-manager' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'http-trigger-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeless-function-controller' of Deployment 'kubeless-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "http-trigger-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeless-function-controller" of deployment "kubeless-controller-manager" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubeless-controller-manager in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubeless-controller-manager in kubeless namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:17-58
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container http-trigger-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:38-57
────────────────────────────────────────
  38 ┌       - env:
  39 │         - name: KUBELESS_INGRESS_ENABLED
  40 │           valueFrom:
  41 │             configMapKeyRef:
  42 │               key: ingress-enabled
  43 │               name: kubeless-config
  44 │         - name: KUBELESS_SERVICE_TYPE
  45 │           valueFrom:
  46 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubeless-function-controller in deployment kubeless-controller-manager (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeless-v1.0.8_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: KUBELESS_INGRESS_ENABLED
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: ingress-enabled
  23 │               name: kubeless-config
  24 │         - name: KUBELESS_SERVICE_TYPE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────



kubelet-flag-editor-ds.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubelet-flag-editor' of DaemonSet 'kubelet-flag-editor' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubelet-flag-editor' of DaemonSet 'kubelet-flag-editor' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubelet-flag-editor' of 'daemonset' 'kubelet-flag-editor' in 'kubelet-flag-editor' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0008 (HIGH): DaemonSet 'kubelet-flag-editor' should not set 'spec.template.spec.hostIPC' to true
════════════════════════════════════════
Sharing the host’s IPC namespace allows container processes to communicate with processes on the host.

See https://avd.aquasec.com/misconfig/ksv008
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:10-66
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       k8s-app: kubelet-flag-editor
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: kubelet-flag-editor
  17 │     spec:
  18 └       hostPID: true
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): DaemonSet 'kubelet-flag-editor' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:10-66
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       k8s-app: kubelet-flag-editor
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: kubelet-flag-editor
  17 │     spec:
  18 └       hostPID: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubelet-flag-editor' of DaemonSet 'kubelet-flag-editor' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubelet-flag-editor' of DaemonSet 'kubelet-flag-editor' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubelet-flag-editor' of DaemonSet 'kubelet-flag-editor' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'kubelet-flag-editor' of DaemonSet 'kubelet-flag-editor' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubelet-flag-editor' of DaemonSet 'kubelet-flag-editor' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubelet-flag-editor' of DaemonSet 'kubelet-flag-editor' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'kubelet-flag-editor' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:10-66
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       k8s-app: kubelet-flag-editor
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         k8s-app: kubelet-flag-editor
  17 │     spec:
  18 └       hostPID: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubelet-flag-editor" of daemonset "kubelet-flag-editor" in "kubelet-flag-editor" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset kubelet-flag-editor in kubelet-flag-editor namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:18-66
────────────────────────────────────────
  18 ┌       hostPID: true
  19 │       hostIPC: true
  20 │       containers:
  21 │       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 └           - |
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubelet-flag-editor in daemonset kubelet-flag-editor (namespace: kubelet-flag-editor) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubelet-flag-editor-ds.yaml:21-58
────────────────────────────────────────
  21 ┌       - name: kubelet-flag-editor
  22 │         image: cr.yandex/crpjfmfou6gflobbfvfv/ubuntu-openssl:stable
  23 │         command:
  24 │           - sh
  25 │           - -c
  26 │           - |
  27 │             while true; do
  28 │               grep -f /mnt/user-flag-path/custom-flags /mnt/default/kubelet_secondary_env
  29 └               if [ $? -ne 0 ];
  ..   
────────────────────────────────────────



kubeletplugin.yaml (kubernetes)
===============================
Tests: 121 (SUCCESSES: 102, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'init' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeletplugin.yaml:26-48
────────────────────────────────────────
  26 ┌         - name: init
  27 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  28 │           imagePullPolicy: Always
  29 │           command: ["set-nas-status", "--status", "NotReady"]
  30 │           env:
  31 │             - name: NODE_NAME
  32 │               valueFrom:
  33 │                 fieldRef:
  34 └                   fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'plugin' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubeletplugin.yaml:50-84
────────────────────────────────────────
  50 ┌         - name: plugin
  51 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  52 │           imagePullPolicy: Always
  53 │           command: ["kubelet-plugin"]
  54 │           env:
  55 │             - name: CDI_ROOT
  56 │               value: /var/run/cdi
  57 │             - name: NODE_NAME
  58 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'plugin' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeletplugin.yaml:50-84
────────────────────────────────────────
  50 ┌         - name: plugin
  51 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  52 │           imagePullPolicy: Always
  53 │           command: ["kubelet-plugin"]
  54 │           env:
  55 │             - name: CDI_ROOT
  56 │               value: /var/run/cdi
  57 │             - name: NODE_NAME
  58 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubeletplugin.yaml:26-48
────────────────────────────────────────
  26 ┌         - name: init
  27 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  28 │           imagePullPolicy: Always
  29 │           command: ["set-nas-status", "--status", "NotReady"]
  30 │           env:
  31 │             - name: NODE_NAME
  32 │               valueFrom:
  33 │                 fieldRef:
  34 └                   fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'plugin' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubeletplugin.yaml:50-84
────────────────────────────────────────
  50 ┌         - name: plugin
  51 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  52 │           imagePullPolicy: Always
  53 │           command: ["kubelet-plugin"]
  54 │           env:
  55 │             - name: CDI_ROOT
  56 │               value: /var/run/cdi
  57 │             - name: NODE_NAME
  58 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeletplugin.yaml:26-48
────────────────────────────────────────
  26 ┌         - name: init
  27 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  28 │           imagePullPolicy: Always
  29 │           command: ["set-nas-status", "--status", "NotReady"]
  30 │           env:
  31 │             - name: NODE_NAME
  32 │               valueFrom:
  33 │                 fieldRef:
  34 └                   fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'plugin' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeletplugin.yaml:50-84
────────────────────────────────────────
  50 ┌         - name: plugin
  51 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  52 │           imagePullPolicy: Always
  53 │           command: ["kubelet-plugin"]
  54 │           env:
  55 │             - name: CDI_ROOT
  56 │               value: /var/run/cdi
  57 │             - name: NODE_NAME
  58 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeletplugin.yaml:26-48
────────────────────────────────────────
  26 ┌         - name: init
  27 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  28 │           imagePullPolicy: Always
  29 │           command: ["set-nas-status", "--status", "NotReady"]
  30 │           env:
  31 │             - name: NODE_NAME
  32 │               valueFrom:
  33 │                 fieldRef:
  34 └                   fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'plugin' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeletplugin.yaml:50-84
────────────────────────────────────────
  50 ┌         - name: plugin
  51 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  52 │           imagePullPolicy: Always
  53 │           command: ["kubelet-plugin"]
  54 │           env:
  55 │             - name: CDI_ROOT
  56 │               value: /var/run/cdi
  57 │             - name: NODE_NAME
  58 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeletplugin.yaml:26-48
────────────────────────────────────────
  26 ┌         - name: init
  27 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  28 │           imagePullPolicy: Always
  29 │           command: ["set-nas-status", "--status", "NotReady"]
  30 │           env:
  31 │             - name: NODE_NAME
  32 │               valueFrom:
  33 │                 fieldRef:
  34 └                   fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'plugin' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubeletplugin.yaml:50-84
────────────────────────────────────────
  50 ┌         - name: plugin
  51 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  52 │           imagePullPolicy: Always
  53 │           command: ["kubelet-plugin"]
  54 │           env:
  55 │             - name: CDI_ROOT
  56 │               value: /var/run/cdi
  57 │             - name: NODE_NAME
  58 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'plugin' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubeletplugin.yaml:50-84
────────────────────────────────────────
  50 ┌         - name: plugin
  51 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  52 │           imagePullPolicy: Always
  53 │           command: ["kubelet-plugin"]
  54 │           env:
  55 │             - name: CDI_ROOT
  56 │               value: /var/run/cdi
  57 │             - name: NODE_NAME
  58 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeletplugin.yaml:26-48
────────────────────────────────────────
  26 ┌         - name: init
  27 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  28 │           imagePullPolicy: Always
  29 │           command: ["set-nas-status", "--status", "NotReady"]
  30 │           env:
  31 │             - name: NODE_NAME
  32 │               valueFrom:
  33 │                 fieldRef:
  34 └                   fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'plugin' of DaemonSet 'kubevirt-dra-driver-kubeletplugin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeletplugin.yaml:50-84
────────────────────────────────────────
  50 ┌         - name: plugin
  51 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  52 │           imagePullPolicy: Always
  53 │           command: ["kubelet-plugin"]
  54 │           env:
  55 │             - name: CDI_ROOT
  56 │               value: /var/run/cdi
  57 │             - name: NODE_NAME
  58 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'kubevirt-dra-driver-kubeletplugin' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 kubeletplugin.yaml:11-94
────────────────────────────────────────
  11 ┌   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: kubevirt-dra-driver
  14 │       app.kubernetes.io/instance: kubevirt-dra-driver
  15 │   updateStrategy:
  16 │     type: RollingUpdate
  17 │   template:
  18 │     metadata:
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 kubeletplugin.yaml:73-80
────────────────────────────────────────
  73 ┌             privileged: false
  74 │             allowPrivilegeEscalation: false
  75 │             capabilities:
  76 │               drop: [ "ALL" ]
  77 │             readOnlyRootFilesystem: true
  78 │             runAsUser: 0
  79 │             seccompProfile:
  80 └               type: RuntimeDefault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset kubevirt-dra-driver-kubeletplugin in kubevirt-dra-driver namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeletplugin.yaml:23-94
────────────────────────────────────────
  23 ┌       serviceAccountName: kubevirt-dra-driver-service-account
  24 │       priorityClassName: system-node-critical
  25 │       initContainers:
  26 │         - name: init
  27 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  28 │           imagePullPolicy: Always
  29 │           command: ["set-nas-status", "--status", "NotReady"]
  30 │           env:
  31 └             - name: NODE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container init in daemonset kubevirt-dra-driver-kubeletplugin (namespace: kubevirt-dra-driver) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeletplugin.yaml:26-48
────────────────────────────────────────
  26 ┌         - name: init
  27 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  28 │           imagePullPolicy: Always
  29 │           command: ["set-nas-status", "--status", "NotReady"]
  30 │           env:
  31 │             - name: NODE_NAME
  32 │               valueFrom:
  33 │                 fieldRef:
  34 └                   fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container plugin in daemonset kubevirt-dra-driver-kubeletplugin (namespace: kubevirt-dra-driver) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeletplugin.yaml:50-84
────────────────────────────────────────
  50 ┌         - name: plugin
  51 │           image: registry:5000/registry.example.com/kubevirt-dra-driver:v0.1.0
  52 │           imagePullPolicy: Always
  53 │           command: ["kubelet-plugin"]
  54 │           env:
  55 │             - name: CDI_ROOT
  56 │               value: /var/run/cdi
  57 │             - name: NODE_NAME
  58 └               valueFrom:
  ..   
────────────────────────────────────────



kubemonitor-depl.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubemonitor' of Deployment 'kubemonitor' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubemonitor' of Deployment 'kubemonitor' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubemonitor' of 'deployment' 'kubemonitor' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubemonitor' of Deployment 'kubemonitor' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubemonitor' of Deployment 'kubemonitor' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubemonitor' of Deployment 'kubemonitor' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubemonitor' of Deployment 'kubemonitor' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubemonitor' of Deployment 'kubemonitor' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubemonitor' of Deployment 'kubemonitor' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubemonitor' of Deployment 'kubemonitor' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubemonitor' of Deployment 'kubemonitor' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubemonitor' of Deployment 'kubemonitor' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubemonitor" of deployment "kubemonitor" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment kubemonitor in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubemonitor-depl.yaml:4
────────────────────────────────────────
   4 [   name: kubemonitor
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment kubemonitor in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubemonitor in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubemonitor-depl.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubemonitor in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubemonitor-depl.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: kubemonitor
  17 │         image: kubemonitork8s:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │           protocol: TCP
  21 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



kubemonitor-depl_2.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'fabric8-rbac' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubemonitor-depl_2.yaml:4
────────────────────────────────────────
   4 [   name: fabric8-rbac
────────────────────────────────────────



kuber-deployment.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'project-team-master' of Deployment 'project-team-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'project-team-master' of 'deployment' 'project-team-master' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'project-team-master' of Deployment 'project-team-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'project-team-master' of Deployment 'project-team-master' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'project-team-master' of Deployment 'project-team-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "project-team-master" of deployment "project-team-master" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment project-team-master in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kuber-deployment.yaml:4
────────────────────────────────────────
   4 [   name: project-team-master
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment project-team-master in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container project-team-master in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment project-team-master in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kuber-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container project-team-master in deployment project-team-master (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kuber-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



kuber-deployment1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'project-team-master' of Deployment 'project-team-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'project-team-master' of 'deployment' 'project-team-master' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'project-team-master' of Deployment 'project-team-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'project-team-master' of Deployment 'project-team-master' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'project-team-master' of Deployment 'project-team-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'project-team-master' of Deployment 'project-team-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "project-team-master" of deployment "project-team-master" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment project-team-master in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kuber-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: project-team-master
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment project-team-master in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container project-team-master in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment project-team-master in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kuber-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container project-team-master in deployment project-team-master (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kuber-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: project-team-master
  17 │         image: lolgg/project-team-master:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



kuberesolver_role.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 1)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 kuberesolver_role.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - services
  11 │   - endpoints
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'pl-kuberesolver-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 kuberesolver_role.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - services
  11 │   - endpoints
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'pl-kuberesolver-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 kuberesolver_role.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - services
  11 │   - endpoints
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



kuberesolver_role1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 1)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 kuberesolver_role1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - services
  11 │   - endpoints
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'pl-kuberesolver-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 kuberesolver_role1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - services
  11 │   - endpoints
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'pl-kuberesolver-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 kuberesolver_role1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - services
  11 │   - endpoints
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



kubernetes-bootcamp.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-bootcamp' of Deployment 'kubernetes-bootcamp-tu-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-bootcamp' of Deployment 'kubernetes-bootcamp-tu-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-bootcamp' of 'deployment' 'kubernetes-bootcamp-tu-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-bootcamp' of Deployment 'kubernetes-bootcamp-tu-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-bootcamp' of Deployment 'kubernetes-bootcamp-tu-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-bootcamp' of Deployment 'kubernetes-bootcamp-tu-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-bootcamp' of Deployment 'kubernetes-bootcamp-tu-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-bootcamp' of Deployment 'kubernetes-bootcamp-tu-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-bootcamp' of Deployment 'kubernetes-bootcamp-tu-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-bootcamp' of Deployment 'kubernetes-bootcamp-tu-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-bootcamp' of Deployment 'kubernetes-bootcamp-tu-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-bootcamp" of deployment "kubernetes-bootcamp-tu-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment kubernetes-bootcamp-tu-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-bootcamp.yaml:4
────────────────────────────────────────
   4 [   name: kubernetes-bootcamp-tu-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubernetes-bootcamp-tu-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-bootcamp.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-bootcamp-tu-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-bootcamp.yaml:15-18
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: kubernetes-bootcamp
  17 │         image: gcr.io/google-samples/kubernetes-bootcamp:v1
  18 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



kubernetes-cluster-role-binding.yaml (kubernetes)
=================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-cluster-role-binding.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-container.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-example' of Deployment 'container-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-example' of Deployment 'container-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-example' of 'deployment' 'container-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-example' of Deployment 'container-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-example' of Deployment 'container-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-example" of deployment "container-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment container-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-container.yaml:4-6
────────────────────────────────────────
   4 ┌   name: container-deployment
   5 │   labels:
   6 └     app: containerLabel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container container-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-container.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment container-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-container.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



kubernetes-container1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-example' of Deployment 'container-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-example' of Deployment 'container-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-example' of 'deployment' 'container-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-example' of Deployment 'container-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-example' of Deployment 'container-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-example' of Deployment 'container-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-example" of deployment "container-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment container-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-container1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: container-deployment
   5 │   labels:
   6 └     app: containerLabel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container container-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-container1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment container-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-container1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: container-example
  19 │         image: container-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



kubernetes-cronjob.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'get-environments' of CronJob 'get-environments' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-cronjob.yaml:14-33
────────────────────────────────────────
  14 ┌           - name: get-environments
  15 │             image: jgoodier/markdown2-kubectl:0.0.4
  16 │             imagePullPolicy: IfNotPresent
  17 │             ## if the cluster_name is set, it will be printed at the top of the page
  18 │             # env:
  19 │             # - name: CLUSTER_NAME
  20 │             #   value: qa-gcp1
  21 │             command: ["/usr/bin/python", "/apps/get_environments.py"]
  22 └             volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'get-environments' of CronJob 'get-environments' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-cronjob.yaml:14-33
────────────────────────────────────────
  14 ┌           - name: get-environments
  15 │             image: jgoodier/markdown2-kubectl:0.0.4
  16 │             imagePullPolicy: IfNotPresent
  17 │             ## if the cluster_name is set, it will be printed at the top of the page
  18 │             # env:
  19 │             # - name: CLUSTER_NAME
  20 │             #   value: qa-gcp1
  21 │             command: ["/usr/bin/python", "/apps/get_environments.py"]
  22 └             volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'get-environments' of CronJob 'get-environments' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-cronjob.yaml:14-33
────────────────────────────────────────
  14 ┌           - name: get-environments
  15 │             image: jgoodier/markdown2-kubectl:0.0.4
  16 │             imagePullPolicy: IfNotPresent
  17 │             ## if the cluster_name is set, it will be printed at the top of the page
  18 │             # env:
  19 │             # - name: CLUSTER_NAME
  20 │             #   value: qa-gcp1
  21 │             command: ["/usr/bin/python", "/apps/get_environments.py"]
  22 └             volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'get-environments' of CronJob 'get-environments' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-cronjob.yaml:14-33
────────────────────────────────────────
  14 ┌           - name: get-environments
  15 │             image: jgoodier/markdown2-kubectl:0.0.4
  16 │             imagePullPolicy: IfNotPresent
  17 │             ## if the cluster_name is set, it will be printed at the top of the page
  18 │             # env:
  19 │             # - name: CLUSTER_NAME
  20 │             #   value: qa-gcp1
  21 │             command: ["/usr/bin/python", "/apps/get_environments.py"]
  22 └             volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'get-environments' of CronJob 'get-environments' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-cronjob.yaml:14-33
────────────────────────────────────────
  14 ┌           - name: get-environments
  15 │             image: jgoodier/markdown2-kubectl:0.0.4
  16 │             imagePullPolicy: IfNotPresent
  17 │             ## if the cluster_name is set, it will be printed at the top of the page
  18 │             # env:
  19 │             # - name: CLUSTER_NAME
  20 │             #   value: qa-gcp1
  21 │             command: ["/usr/bin/python", "/apps/get_environments.py"]
  22 └             volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'get-environments' of CronJob 'get-environments' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-cronjob.yaml:14-33
────────────────────────────────────────
  14 ┌           - name: get-environments
  15 │             image: jgoodier/markdown2-kubectl:0.0.4
  16 │             imagePullPolicy: IfNotPresent
  17 │             ## if the cluster_name is set, it will be printed at the top of the page
  18 │             # env:
  19 │             # - name: CLUSTER_NAME
  20 │             #   value: qa-gcp1
  21 │             command: ["/usr/bin/python", "/apps/get_environments.py"]
  22 └             volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob get-environments in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-cronjob.yaml:4
────────────────────────────────────────
   4 [   name: get-environments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container get-environments in cronjob get-environments (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-cronjob.yaml:14-33
────────────────────────────────────────
  14 ┌           - name: get-environments
  15 │             image: jgoodier/markdown2-kubectl:0.0.4
  16 │             imagePullPolicy: IfNotPresent
  17 │             ## if the cluster_name is set, it will be printed at the top of the page
  18 │             # env:
  19 │             # - name: CLUSTER_NAME
  20 │             #   value: qa-gcp1
  21 │             command: ["/usr/bin/python", "/apps/get_environments.py"]
  22 └             volumeMounts:
  ..   
────────────────────────────────────────



kubernetes-daemonset-v1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of DaemonSet 'my-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'daemonset' 'my-daemonset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of DaemonSet 'my-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of DaemonSet 'my-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of daemonset "my-daemonset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset my-daemonset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-daemonset
   5 │   labels:
   6 └     app: my-daemonset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-daemonset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset my-daemonset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container in daemonset my-daemonset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-daemonset-v1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────



kubernetes-daemonset-v2.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of DaemonSet 'my-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'daemonset' 'my-daemonset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of DaemonSet 'my-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of DaemonSet 'my-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of DaemonSet 'my-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of daemonset "my-daemonset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset my-daemonset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-daemonset
   5 │   labels:
   6 └     app: my-daemonset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-daemonset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset my-daemonset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container in daemonset my-daemonset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-daemonset-v2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: cule925/client-server-arm64:v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: SERVER_IP
  23 │           value: "192.168.7.80"
  24 │         - name: SERVER_PORT
  25 └           value: "8080"
────────────────────────────────────────



kubernetes-dashboard-admin.rbac1_1.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-admin.rbac1_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard-admin.rbac2_2.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-admin.rbac2_2.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard-admin.rbac3_2.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-admin.rbac3_2.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard-admin.rbac4_2.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-admin.rbac4_2.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard-admin.rbac_2.yaml (kubernetes)
===================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-admin.rbac_2.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard-adminuser_1.yaml (kubernetes)
==================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'kubernetes-dashboard-admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-adminuser_1.yaml:4
────────────────────────────────────────
   4 [   name: kubernetes-dashboard-admin-user
────────────────────────────────────────



kubernetes-dashboard-cluster-role-binding.yaml (kubernetes)
===========================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-cluster-role-binding.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard-local1_10.yaml (kubernetes)
================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'dashboard-metrics-scraper' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard-local1_10.yaml:9-13
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 8000
  11 │     targetPort: 8000
  12 │   selector:
  13 └     k8s-app: kubernetes-metrics-scraper-head
────────────────────────────────────────



kubernetes-dashboard-local1_3.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 112, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard-local-minimal' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard-local1_3.yaml:13-18
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   verbs:
  18 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard-local-minimal' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard-local1_3.yaml:31-39
────────────────────────────────────────
  31 ┌ - apiGroups:
  32 │   - ''
  33 │   resources:
  34 │   - configmaps
  35 │   resourceNames:
  36 │   - kubernetes-dashboard-settings
  37 │   verbs:
  38 │   - get
  39 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard-local-minimal' shouldn't have access to manage secrets in namespace 'kube-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard-local1_3.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard-local-minimal' shouldn't have access to manage secrets in namespace 'kube-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard-local1_3.yaml:19-30
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - secrets
  23 │   resourceNames:
  24 │   - kubernetes-dashboard-key-holder
  25 │   - kubernetes-dashboard-certs
  26 │   - kubernetes-dashboard-csrf
  27 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard-local1_7.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard-local' of 'deployment' 'kubernetes-dashboard-local' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'kubernetes-dashboard-local' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:9-51
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   revisionHistoryLimit: 10
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: kubernetes-dashboard-local
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         k8s-app: kubernetes-dashboard-local
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-dashboard-local" of deployment "kubernetes-dashboard-local" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubernetes-dashboard-local in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-dashboard-local in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:19-51
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard-local in deployment kubernetes-dashboard-local (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard-local1_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────



kubernetes-dashboard-local1_8.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kubernetes-dashboard-local' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard-local1_8.yaml:9-13
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 8443
  12 │   selector:
  13 └     k8s-app: kubernetes-dashboard-local
────────────────────────────────────────



kubernetes-dashboard-local1_9.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-metrics-scraper-head' of 'deployment' 'kubernetes-metrics-scraper-head' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'kubernetes-metrics-scraper-head' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:9-43
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   revisionHistoryLimit: 10
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: kubernetes-metrics-scraper-head
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         k8s-app: kubernetes-metrics-scraper-head
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-metrics-scraper-head" of deployment "kubernetes-metrics-scraper-head" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubernetes-metrics-scraper-head in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-metrics-scraper-head in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:19-43
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-metrics-scraper-head in deployment kubernetes-metrics-scraper-head (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard-local1_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard-local_10.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'dashboard-metrics-scraper' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard-local_10.yaml:9-13
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 8000
  11 │     targetPort: 8000
  12 │   selector:
  13 └     k8s-app: kubernetes-metrics-scraper-head
────────────────────────────────────────



kubernetes-dashboard-local_3.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 112, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard-local-minimal' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard-local_3.yaml:13-18
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   verbs:
  18 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard-local-minimal' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard-local_3.yaml:31-39
────────────────────────────────────────
  31 ┌ - apiGroups:
  32 │   - ''
  33 │   resources:
  34 │   - configmaps
  35 │   resourceNames:
  36 │   - kubernetes-dashboard-settings
  37 │   verbs:
  38 │   - get
  39 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard-local-minimal' shouldn't have access to manage secrets in namespace 'kube-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard-local_3.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard-local-minimal' shouldn't have access to manage secrets in namespace 'kube-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard-local_3.yaml:19-30
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - secrets
  23 │   resourceNames:
  24 │   - kubernetes-dashboard-key-holder
  25 │   - kubernetes-dashboard-certs
  26 │   - kubernetes-dashboard-csrf
  27 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard-local_7.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard-local' of 'deployment' 'kubernetes-dashboard-local' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard-local' of Deployment 'kubernetes-dashboard-local' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'kubernetes-dashboard-local' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:9-51
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   revisionHistoryLimit: 10
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: kubernetes-dashboard-local
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         k8s-app: kubernetes-dashboard-local
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-dashboard-local" of deployment "kubernetes-dashboard-local" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubernetes-dashboard-local in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-dashboard-local in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:19-51
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard-local in deployment kubernetes-dashboard-local (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard-local_7.yaml:20-39
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard-local
  21 │         image: kubernetes/kubernetes-dashboard-amd64:head
  22 │         imagePullPolicy: Never
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         volumeMounts:
  ..   
────────────────────────────────────────



kubernetes-dashboard-local_8.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kubernetes-dashboard-local' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard-local_8.yaml:9-13
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 8443
  12 │   selector:
  13 └     k8s-app: kubernetes-dashboard-local
────────────────────────────────────────



kubernetes-dashboard-local_9.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-metrics-scraper-head' of 'deployment' 'kubernetes-metrics-scraper-head' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-metrics-scraper-head' of Deployment 'kubernetes-metrics-scraper-head' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'kubernetes-metrics-scraper-head' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:9-43
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   revisionHistoryLimit: 10
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: kubernetes-metrics-scraper-head
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         k8s-app: kubernetes-metrics-scraper-head
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-metrics-scraper-head" of deployment "kubernetes-metrics-scraper-head" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubernetes-metrics-scraper-head in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-metrics-scraper-head in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:19-43
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-metrics-scraper-head in deployment kubernetes-metrics-scraper-head (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard-local_9.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: kubernetes-metrics-scraper-head
  21 │         image: kubernetesdashboarddev/dashboard-metrics-sidecar:latest
  22 │         ports:
  23 │         - containerPort: 8000
  24 │           protocol: TCP
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             scheme: HTTP
  28 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard-service-np1_1.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-service-np1_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard-service-np2_1.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-service-np2_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard-service-np3_1.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-service-np3_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard-service-np_1.yaml (kubernetes)
===================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-service-np_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard-user_1.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard-user_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard10_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-dashboard" of deployment "kubernetes-dashboard" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-dashboard in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:19-62
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard10_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────



kubernetes-dashboard10_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dashboard-metrics-scraper" of deployment "dashboard-metrics-scraper" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dashboard-metrics-scraper in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:21-50
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard10_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard10_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard10_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard10_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard12_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard12_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



kubernetes-dashboard12_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard12_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard12_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard12_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard12_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard15_14.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard15_14.yaml:31-51
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-api
  32 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 9000
  36 │           name: api
  37 │           protocol: TCP
  38 │         args:
  39 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard15_14.yaml:31-51
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-api
  32 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 9000
  36 │           name: api
  37 │           protocol: TCP
  38 │         args:
  39 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard15_14.yaml:31-51
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-api
  32 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 9000
  36 │           name: api
  37 │           protocol: TCP
  38 │         args:
  39 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard15_14.yaml:31-51
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-api
  32 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 9000
  36 │           name: api
  37 │           protocol: TCP
  38 │         args:
  39 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard15_14.yaml:31-51
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-api
  32 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 9000
  36 │           name: api
  37 │           protocol: TCP
  38 │         args:
  39 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard15_14.yaml:31-51
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-api
  32 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 9000
  36 │           name: api
  37 │           protocol: TCP
  38 │         args:
  39 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard-api in deployment kubernetes-dashboard-api (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard15_14.yaml:31-51
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-api
  32 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 9000
  36 │           name: api
  37 │           protocol: TCP
  38 │         args:
  39 └         - --enable-insecure-login
  ..   
────────────────────────────────────────



kubernetes-dashboard15_15.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard15_15.yaml:31-48
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-web
  32 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           name: web
  37 │           protocol: TCP
  38 │         volumeMounts:
  39 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard15_15.yaml:31-48
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-web
  32 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           name: web
  37 │           protocol: TCP
  38 │         volumeMounts:
  39 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard15_15.yaml:31-48
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-web
  32 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           name: web
  37 │           protocol: TCP
  38 │         volumeMounts:
  39 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard15_15.yaml:31-48
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-web
  32 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           name: web
  37 │           protocol: TCP
  38 │         volumeMounts:
  39 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard15_15.yaml:31-48
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-web
  32 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           name: web
  37 │           protocol: TCP
  38 │         volumeMounts:
  39 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard15_15.yaml:31-48
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-web
  32 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           name: web
  37 │           protocol: TCP
  38 │         volumeMounts:
  39 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard-web in deployment kubernetes-dashboard-web (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard15_15.yaml:31-48
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-web
  32 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           name: web
  37 │           protocol: TCP
  38 │         volumeMounts:
  39 └         - mountPath: /tmp
  ..   
────────────────────────────────────────



kubernetes-dashboard15_16.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard15_16.yaml:31-54
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-metrics-scraper
  32 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           protocol: TCP
  37 │         livenessProbe:
  38 │           httpGet:
  39 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard15_16.yaml:31-54
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-metrics-scraper
  32 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           protocol: TCP
  37 │         livenessProbe:
  38 │           httpGet:
  39 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard15_16.yaml:31-54
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-metrics-scraper
  32 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           protocol: TCP
  37 │         livenessProbe:
  38 │           httpGet:
  39 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard15_16.yaml:31-54
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-metrics-scraper
  32 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           protocol: TCP
  37 │         livenessProbe:
  38 │           httpGet:
  39 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard15_16.yaml:31-54
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-metrics-scraper
  32 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           protocol: TCP
  37 │         livenessProbe:
  38 │           httpGet:
  39 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard15_16.yaml:31-54
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-metrics-scraper
  32 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           protocol: TCP
  37 │         livenessProbe:
  38 │           httpGet:
  39 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard-metrics-scraper in deployment kubernetes-dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard15_16.yaml:31-54
────────────────────────────────────────
  31 ┌       - name: kubernetes-dashboard-metrics-scraper
  32 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         ports:
  35 │         - containerPort: 8000
  36 │           protocol: TCP
  37 │         livenessProbe:
  38 │           httpGet:
  39 └             scheme: HTTP
  ..   
────────────────────────────────────────



kubernetes-dashboard15_6.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard15_6.yaml:20-28
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   resourceNames:
  25 │   - kubernetes-dashboard-settings
  26 │   verbs:
  27 │   - get
  28 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard15_6.yaml:9-19
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-csrf
  16 │   verbs:
  17 └   - get
  ..   
────────────────────────────────────────



kubernetes-dashboard16_5.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kubernetes-dashboard' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard16_5.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 8443
  12 │   selector:
  13 │     k8s-app: kubernetes-dashboard
  14 └   type: NodePort
────────────────────────────────────────



kubernetes-dashboard17_1.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard17_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard18_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard18_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



kubernetes-dashboard18_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard18_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard18_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard18_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard18_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard19_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-dashboard" of deployment "kubernetes-dashboard" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-dashboard in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:19-58
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 └         - --token-ttl=86400
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard19_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────



kubernetes-dashboard19_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dashboard-metrics-scraper" of deployment "dashboard-metrics-scraper" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dashboard-metrics-scraper in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:21-50
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard19_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard19_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard19_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard19_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard20_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-dashboard" of deployment "kubernetes-dashboard" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-dashboard in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:19-58
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 └         - --token-ttl=86400
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard20_11.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --token-ttl=86400
  28 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────



kubernetes-dashboard20_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dashboard-metrics-scraper" of deployment "dashboard-metrics-scraper" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dashboard-metrics-scraper in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:21-50
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard20_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard20_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard20_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard20_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard22_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard22_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────



kubernetes-dashboard22_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard22_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard22_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard22_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard22_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard25_14.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard-api' of 'deployment' 'kubernetes-dashboard-api' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard-api' of Deployment 'kubernetes-dashboard-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard-api in deployment kubernetes-dashboard-api (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard25_14.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-api
  31 │         image: docker.io/kubernetesui/dashboard-api:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 9000
  35 │           name: api
  36 │           protocol: TCP
  37 │         args:
  38 └         - --enable-insecure-login
  ..   
────────────────────────────────────────



kubernetes-dashboard25_15.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard-web' of 'deployment' 'kubernetes-dashboard-web' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard-web' of Deployment 'kubernetes-dashboard-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard-web in deployment kubernetes-dashboard-web (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard25_15.yaml:30-44
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-web
  31 │         image: docker.io/kubernetesui/dashboard-web:v1.0.0
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           name: web
  36 │           protocol: TCP
  37 │         volumeMounts:
  38 └         - mountPath: /tmp
  ..   
────────────────────────────────────────



kubernetes-dashboard25_16.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of 'deployment' 'kubernetes-dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard-metrics-scraper' of Deployment 'kubernetes-dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard-metrics-scraper in deployment kubernetes-dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard25_16.yaml:30-50
────────────────────────────────────────
  30 ┌       - name: kubernetes-dashboard-metrics-scraper
  31 │         image: docker.io/kubernetesui/metrics-scraper:v1.0.9
  32 │         imagePullPolicy: IfNotPresent
  33 │         ports:
  34 │         - containerPort: 8000
  35 │           protocol: TCP
  36 │         livenessProbe:
  37 │           httpGet:
  38 └             scheme: HTTP
  ..   
────────────────────────────────────────



kubernetes-dashboard25_6.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard25_6.yaml:20-28
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   resourceNames:
  25 │   - kubernetes-dashboard-settings
  26 │   verbs:
  27 │   - get
  28 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard25_6.yaml:9-19
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-csrf
  16 │   verbs:
  17 └   - get
  ..   
────────────────────────────────────────



kubernetes-dashboard30_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard30_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.5.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



kubernetes-dashboard30_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard30_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.7
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard30_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard30_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard30_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard33_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard33_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



kubernetes-dashboard33_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard33_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard33_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard33_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard33_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard34_2.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 112, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard-minimal' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard34_2.yaml:13-18
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   verbs:
  18 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard-minimal' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard34_2.yaml:30-38
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - ''
  32 │   resources:
  33 │   - configmaps
  34 │   resourceNames:
  35 │   - kubernetes-dashboard-settings
  36 │   verbs:
  37 │   - get
  38 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard-minimal' shouldn't have access to manage secrets in namespace 'kube-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard34_2.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard-minimal' shouldn't have access to manage secrets in namespace 'kube-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard34_2.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - secrets
  23 │   resourceNames:
  24 │   - kubernetes-dashboard-key-holder
  25 │   - kubernetes-dashboard-certs
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



kubernetes-dashboard34_5.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kubernetes-dashboard' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard34_5.yaml:9-13
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 8443
  12 │   selector:
  13 └     k8s-app: kubernetes-dashboard
────────────────────────────────────────



kubernetes-dashboard35_2.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 112, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard-minimal' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard35_2.yaml:13-18
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   verbs:
  18 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard-minimal' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard35_2.yaml:30-38
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - ''
  32 │   resources:
  33 │   - configmaps
  34 │   resourceNames:
  35 │   - kubernetes-dashboard-settings
  36 │   verbs:
  37 │   - get
  38 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard-minimal' shouldn't have access to manage secrets in namespace 'kube-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard35_2.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard-minimal' shouldn't have access to manage secrets in namespace 'kube-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard35_2.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - secrets
  23 │   resourceNames:
  24 │   - kubernetes-dashboard-key-holder
  25 │   - kubernetes-dashboard-certs
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



kubernetes-dashboard35_5.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kubernetes-dashboard' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard35_5.yaml:9-13
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 8443
  12 │   selector:
  13 └     k8s-app: kubernetes-dashboard
────────────────────────────────────────



kubernetes-dashboard36_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard36_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



kubernetes-dashboard36_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard36_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard36_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard36_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard36_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard37_2.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 112, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard-minimal' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard37_2.yaml:13-18
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   verbs:
  18 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard-minimal' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard37_2.yaml:30-38
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - ''
  32 │   resources:
  33 │   - configmaps
  34 │   resourceNames:
  35 │   - kubernetes-dashboard-settings
  36 │   verbs:
  37 │   - get
  38 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard-minimal' shouldn't have access to manage secrets in namespace 'kube-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard37_2.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard-minimal' shouldn't have access to manage secrets in namespace 'kube-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard37_2.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - secrets
  23 │   resourceNames:
  24 │   - kubernetes-dashboard-key-holder
  25 │   - kubernetes-dashboard-certs
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



kubernetes-dashboard37_4.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'kubernetes-dashboard' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:9-52
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   revisionHistoryLimit: 10
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: kubernetes-dashboard
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         k8s-app: kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'kubernetes-dashboard' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:9-52
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   revisionHistoryLimit: 10
  11 │   selector:
  12 │     matchLabels:
  13 │       k8s-app: kubernetes-dashboard
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         k8s-app: kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-dashboard" of deployment "kubernetes-dashboard" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubernetes-dashboard in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-dashboard in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:19-52
────────────────────────────────────────
  19 ┌       hostNetwork: true
  20 │       nodeSelector:
  21 │         kubernetes.io/hostname: node1
  22 │       containers:
  23 │       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard37_4.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: registry.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
  25 │         ports:
  26 │         - containerPort: 8443
  27 │           protocol: TCP
  28 │           hostPort: 8443
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         volumeMounts:
  ..   
────────────────────────────────────────



kubernetes-dashboard37_5.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kubernetes-dashboard' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-dashboard37_5.yaml:9-15
────────────────────────────────────────
   9 ┌   type: NodePort
  10 │   ports:
  11 │   - port: 8443
  12 │     targetPort: 8443
  13 │     nodePort: 30000
  14 │   selector:
  15 └     k8s-app: kubernetes-dashboard
────────────────────────────────────────



kubernetes-dashboard39_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard39_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --namespace=kubernetes-dashboard
  31 └         - --enable-insecure-login
  ..   
────────────────────────────────────────



kubernetes-dashboard39_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard39_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard39_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard39_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard39_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard3_11.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-dashboard" of deployment "kubernetes-dashboard" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-dashboard in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:19-62
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard3_11.yaml:20-50
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.2.0
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         - containerPort: 9090
  27 │           protocol: TCP
  28 └         args:
  ..   
────────────────────────────────────────



kubernetes-dashboard3_13.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dashboard-metrics-scraper" of deployment "dashboard-metrics-scraper" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dashboard-metrics-scraper in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:21-50
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard3_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard3_7.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard3_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard3_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard40_12.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-dashboard40_12.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



kubernetes-dashboard40_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard40_13.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



kubernetes-dashboard40_15.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard40_15.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard40_8.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard40_8.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard40_8.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-dashboard5_11.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard5_11.yaml:23-49
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



kubernetes-dashboard5_13.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-dashboard5_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────



kubernetes-dashboard5_7.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes-dashboard5_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes-dashboard5_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



kubernetes-deployment-manifest.yaml (kubernetes)
================================================
Tests: 126 (SUCCESSES: 97, FAILURES: 29)
Failures: 29 (UNKNOWN: 0, LOW: 19, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cloud-sql-proxy' of Deployment 'sample-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sample-app' of Deployment 'sample-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cloud-sql-proxy' of Deployment 'sample-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sample-app' of Deployment 'sample-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cloud-sql-proxy' of 'deployment' 'sample-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sample-app' of 'deployment' 'sample-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cloud-sql-proxy' of Deployment 'sample-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sample-app' of Deployment 'sample-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sample-app' of Deployment 'sample-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cloud-sql-proxy' of Deployment 'sample-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sample-app' of Deployment 'sample-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sample-app' of Deployment 'sample-app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sample-app' of Deployment 'sample-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cloud-sql-proxy' of Deployment 'sample-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sample-app' of Deployment 'sample-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cloud-sql-proxy' of Deployment 'sample-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sample-app' of Deployment 'sample-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cloud-sql-proxy' of Deployment 'sample-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sample-app' of Deployment 'sample-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cloud-sql-proxy" of deployment "sample-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sample-app" of deployment "sample-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:37-48
────────────────────────────────────────
  37 ┌       - name: cloud-sql-proxy
  38 │         image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
  39 │         args:
  40 │         - "--structured-logs"
  41 │         - "--port=3306"
  42 │         - "microservice-on-kubernetes:europe-west2:sampleapp-db"
  43 │         securityContext:
  44 │           runAsNonRoot: true
  45 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment sample-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:4
────────────────────────────────────────
   4 [   name: sample-app-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sample-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment sample-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:15-48
────────────────────────────────────────
  15 ┌       serviceAccountName: cloud-sql-proxy-sa
  16 │       containers:
  17 │       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sample-app in deployment sample-app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-deployment-manifest.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: sample-app
  18 │         image: europe-west2-docker.pkg.dev/microservice-on-kubernetes/sample-app-repo/gcprestfulmicroservicekubernetes:latest08
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: DB_USER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: db-credentials
  ..   
────────────────────────────────────────



kubernetes-deployment.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-app-container' of Deployment 'my-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-app-container' of Deployment 'my-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-app-container' of 'deployment' 'my-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-app-container' of Deployment 'my-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-app-container' of Deployment 'my-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-app-container' of Deployment 'my-app-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-app-container' of Deployment 'my-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-app-container' of Deployment 'my-app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-app-container' of Deployment 'my-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-app-container' of Deployment 'my-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-app-container' of Deployment 'my-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-app-container' of Deployment 'my-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-app-container" of deployment "my-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment.yaml:4
────────────────────────────────────────
   4 [   name: my-app-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-app-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-app-container
  17 │         image: my_app_php:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



kubernetes-deployment1_1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user' of Deployment 'user' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'user' of Deployment 'user' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'user' of 'deployment' 'user' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'user' of Deployment 'user' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'user' of Deployment 'user' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'user' of Deployment 'user' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'user' of Deployment 'user' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'user' of Deployment 'user' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'user' of Deployment 'user' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'user' of Deployment 'user' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user' of Deployment 'user' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user" of deployment "user" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment user in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:4
────────────────────────────────────────
   4 [   name: user
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container user in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment1_1.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: user
  17 │         image: wuphf-dot-com-user-service:local
  18 │         imagePullPolicy: Never
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────



kubernetes-deployment1_11.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api-gateway' of Deployment 'api-gateway' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api-gateway' of Deployment 'api-gateway' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api-gateway' of 'deployment' 'api-gateway' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api-gateway' of Deployment 'api-gateway' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api-gateway' of Deployment 'api-gateway' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api-gateway' of Deployment 'api-gateway' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api-gateway' of Deployment 'api-gateway' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api-gateway' of Deployment 'api-gateway' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api-gateway' of Deployment 'api-gateway' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api-gateway' of Deployment 'api-gateway' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api-gateway' of Deployment 'api-gateway' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api-gateway" of deployment "api-gateway" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment api-gateway in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:4
────────────────────────────────────────
   4 [   name: api-gateway
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api-gateway in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment api-gateway in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment1_11.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: api-gateway
  17 │         image: wuphf-dot-com-api-gateway:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────



kubernetes-deployment1_4.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'zookeeper' of StatefulSet 'zookeeper' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'zookeeper' of StatefulSet 'zookeeper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'zookeeper' of 'statefulset' 'zookeeper' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'zookeeper' of StatefulSet 'zookeeper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'zookeeper' of StatefulSet 'zookeeper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'zookeeper' of StatefulSet 'zookeeper' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'zookeeper' of StatefulSet 'zookeeper' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'zookeeper' of StatefulSet 'zookeeper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'zookeeper' of StatefulSet 'zookeeper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'zookeeper' of StatefulSet 'zookeeper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'zookeeper' of StatefulSet 'zookeeper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'zookeeper' of StatefulSet 'zookeeper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "zookeeper" of statefulset "zookeeper" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset zookeeper in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:4
────────────────────────────────────────
   4 [   name: zookeeper
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container zookeeper in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset zookeeper in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container zookeeper in statefulset zookeeper (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-deployment1_4.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: confluentinc/cp-zookeeper:latest
  19 │         env:
  20 │         - name: ZOOKEEPER_CLIENT_PORT
  21 │           value: '2181'
  22 │         ports:
  23 └         - containerPort: 2181
────────────────────────────────────────



kubernetes-deployment1_6.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kkafka' of StatefulSet 'kkafka' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kkafka' of StatefulSet 'kkafka' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kkafka' of 'statefulset' 'kkafka' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kkafka' of StatefulSet 'kkafka' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kkafka' of StatefulSet 'kkafka' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kkafka' of StatefulSet 'kkafka' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kkafka' of StatefulSet 'kkafka' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kkafka' of StatefulSet 'kkafka' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kkafka' of StatefulSet 'kkafka' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kkafka' of StatefulSet 'kkafka' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kkafka' of StatefulSet 'kkafka' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kkafka' of StatefulSet 'kkafka' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kkafka" of statefulset "kkafka" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset kkafka in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:4
────────────────────────────────────────
   4 [   name: kkafka
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kkafka in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset kkafka in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 └         - name: KAFKA_ADVERTISED_LISTENERS
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kkafka in statefulset kkafka (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-deployment1_6.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: kkafka
  18 │         image: confluentinc/cp-kafka:latest
  19 │         env:
  20 │         - name: KAFKA_BROKER_ID
  21 │           value: '1'
  22 │         - name: KAFKA_ZOOKEEPER_CONNECT
  23 │           value: zookeeper:2181
  24 │         - name: KAFKA_ADVERTISED_LISTENERS
  25 └           value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kkafka:9092
  ..   
────────────────────────────────────────



kubernetes-deployment1_8.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'notification' of Deployment 'notification' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'notification' of Deployment 'notification' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'notification' of 'deployment' 'notification' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'notification' of Deployment 'notification' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'notification' of Deployment 'notification' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'notification' of Deployment 'notification' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'notification' of Deployment 'notification' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'notification' of Deployment 'notification' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'notification' of Deployment 'notification' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'notification' of Deployment 'notification' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'notification' of Deployment 'notification' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "notification" of deployment "notification" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment notification in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:4
────────────────────────────────────────
   4 [   name: notification
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container notification in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment notification in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment1_8.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: notification
  17 │         image: wuphf-dot-com-notification-service:local
  18 │         imagePullPolicy: IfNotPresent
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: wupfh-config
  22 │         ports:
  23 └         - containerPort: 8082
────────────────────────────────────────



kubernetes-deployment2_10.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'delete' of Deployment 'delete' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'delete' of Deployment 'delete' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'delete' of 'deployment' 'delete' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'delete' of Deployment 'delete' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'delete' of Deployment 'delete' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'delete' of Deployment 'delete' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'delete' of Deployment 'delete' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'delete' of Deployment 'delete' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'delete' of Deployment 'delete' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'delete' of Deployment 'delete' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'delete' of Deployment 'delete' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'delete' of Deployment 'delete' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "delete" of deployment "delete" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment delete in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:4
────────────────────────────────────────
   4 [   name: delete
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container delete in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment delete in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:15-40
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container delete in deployment delete (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-deployment2_10.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: delete
  17 │         image: jpabloacosta/delete_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────



kubernetes-deployment2_12.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'search' of Deployment 'search' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'search' of Deployment 'search' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'search' of 'deployment' 'search' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'search' of Deployment 'search' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'search' of Deployment 'search' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'search' of Deployment 'search' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'search' of Deployment 'search' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'search' of Deployment 'search' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'search' of Deployment 'search' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'search' of Deployment 'search' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'search' of Deployment 'search' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'search' of Deployment 'search' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "search" of deployment "search" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment search in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:4
────────────────────────────────────────
   4 [   name: search
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container search in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment search in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:15-40
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container search in deployment search (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-deployment2_12.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: search
  17 │         image: jpabloacosta/search_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────



kubernetes-deployment2_2.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysql' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_2.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 │         image: mysql:latest
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           valueFrom:
  23 └             secretKeyRef:
  ..   
────────────────────────────────────────



kubernetes-deployment2_4.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'adminer' of Deployment 'adminer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'adminer' of Deployment 'adminer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'adminer' of 'deployment' 'adminer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'adminer' of Deployment 'adminer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'adminer' of Deployment 'adminer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'adminer' of Deployment 'adminer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'adminer' of Deployment 'adminer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'adminer' of Deployment 'adminer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'adminer' of Deployment 'adminer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'adminer' of Deployment 'adminer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'adminer' of Deployment 'adminer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'adminer' of Deployment 'adminer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "adminer" of deployment "adminer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adminer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:4
────────────────────────────────────────
   4 [   name: adminer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adminer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adminer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_4.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: adminer
  17 │         image: adminer
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────



kubernetes-deployment2_6.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Deployment 'create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Deployment 'create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'deployment' 'create' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Deployment 'create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'create' of Deployment 'create' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'create' of Deployment 'create' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Deployment 'create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Deployment 'create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Deployment 'create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Deployment 'create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Deployment 'create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Deployment 'create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of deployment "create" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment create in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:4
────────────────────────────────────────
   4 [   name: create
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container create in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment create in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:15-40
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in deployment create (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-deployment2_6.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: create
  17 │         image: jpabloacosta/create_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────



kubernetes-deployment2_8.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'update' of Deployment 'update' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'update' of Deployment 'update' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'update' of 'deployment' 'update' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'update' of Deployment 'update' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'update' of Deployment 'update' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'update' of Deployment 'update' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'update' of Deployment 'update' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'update' of Deployment 'update' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'update' of Deployment 'update' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'update' of Deployment 'update' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'update' of Deployment 'update' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'update' of Deployment 'update' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "update" of deployment "update" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment update in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:4
────────────────────────────────────────
   4 [   name: update
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container update in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment update in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:15-40
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container update in deployment update (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-deployment2_8.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: update
  17 │         image: jpabloacosta/update_docker
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_DATASOURCE_URL
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-config
  ..   
────────────────────────────────────────



kubernetes-deployment3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'react-app' of Deployment 'react-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'react-app' of Deployment 'react-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'react-app' of 'deployment' 'react-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'react-app' of Deployment 'react-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'react-app' of Deployment 'react-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'react-app' of Deployment 'react-app-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'react-app' of Deployment 'react-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'react-app' of Deployment 'react-app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'react-app' of Deployment 'react-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'react-app' of Deployment 'react-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'react-app' of Deployment 'react-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'react-app' of Deployment 'react-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "react-app" of deployment "react-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment react-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-deployment3.yaml:4
────────────────────────────────────────
   4 [   name: react-app-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container react-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment react-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-deployment3.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container react-app in deployment react-app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-deployment3.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: react-app
  17 │         image: jefta17/react-app:latest
  18 │         ports:
  19 └         - containerPort: 8000
────────────────────────────────────────



kubernetes-discover-pod.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod1.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod10.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod10.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod11.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod11.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod13.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod13.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod14.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod14.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod15.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod15.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod16.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod16.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod17.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod17.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod18.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod18.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod2.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod2.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod3.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod3.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod4.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod4.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod5.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod5.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod6.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod6.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod7.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod7.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod8.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod8.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-discover-pod9.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-aggregator' of 'replicationcontroller' 'kube-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-aggregator' of ReplicationController 'kube-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-aggregator" of replicationcontroller "kube-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller kube-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kube-aggregator
   5 │   labels:
   6 └     kube-aggregator: "true"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicationcontroller kube-aggregator in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:17-63
────────────────────────────────────────
  17 ┌       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 │             port: 443
  25 └             scheme: HTTPS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller kube-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-discover-pod9.yaml:16-93
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kube-aggregator
  18 │         image: kube-aggregator:latest
  19 │         imagePullPolicy: Never
  20 │         livenessProbe:
  21 │           failureThreshold: 3
  22 │           httpGet:
  23 │             path: /version
  24 └             port: 443
  ..   
────────────────────────────────────────



kubernetes-external-secrets-clusterrole.yaml (kubernetes)
=========================================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kubernetes-external-secrets' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubernetes-external-secrets-clusterrole.yaml:15-17
────────────────────────────────────────
  15 ┌ - apiGroups: [""]
  16 │   resources: ["secrets"]
  17 └   verbs: ["create", "update", "get"]
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'kubernetes-external-secrets' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubernetes-external-secrets-clusterrole.yaml:31-39
────────────────────────────────────────
  31 ┌ - apiGroups:
  32 │   - ""
  33 │   resourceNames:
  34 │   - vault-tls
  35 │   resources:
  36 │   - secrets
  37 │   verbs:
  38 │   - get
  39 └   - list
────────────────────────────────────────



kubernetes-external-secrets-deploy.yaml (kubernetes)
====================================================
Tests: 128 (SUCCESSES: 100, FAILURES: 28)
Failures: 28 (UNKNOWN: 0, LOW: 20, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-vault-secret' of Deployment 'kubernetes-external-secrets' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kubernetes-external-secrets' of Deployment 'kubernetes-external-secrets' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-vault-secret' of Deployment 'kubernetes-external-secrets' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-external-secrets' of Deployment 'kubernetes-external-secrets' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-vault-secret' of 'deployment' 'kubernetes-external-secrets' in 'secret-infra' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-external-secrets' of 'deployment' 'kubernetes-external-secrets' in 'secret-infra' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-vault-secret' of Deployment 'kubernetes-external-secrets' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-external-secrets' of Deployment 'kubernetes-external-secrets' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-vault-secret' of Deployment 'kubernetes-external-secrets' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-external-secrets' of Deployment 'kubernetes-external-secrets' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-vault-secret' of Deployment 'kubernetes-external-secrets' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-external-secrets' of Deployment 'kubernetes-external-secrets' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-vault-secret' of Deployment 'kubernetes-external-secrets' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-external-secrets' of Deployment 'kubernetes-external-secrets' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-vault-secret' of Deployment 'kubernetes-external-secrets' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-external-secrets' of Deployment 'kubernetes-external-secrets' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-vault-secret' of Deployment 'kubernetes-external-secrets' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-external-secrets' of Deployment 'kubernetes-external-secrets' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-vault-secret' of Deployment 'kubernetes-external-secrets' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-external-secrets' of Deployment 'kubernetes-external-secrets' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-vault-secret" of deployment "kubernetes-external-secrets" in "secret-infra" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-external-secrets" of deployment "kubernetes-external-secrets" in "secret-infra" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container init-vault-secret in deployment kubernetes-external-secrets (namespace: secret-infra) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:33-42
────────────────────────────────────────
  33 ┌       - args:
  34 │         - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' | base64 --decode > /tmp/vault/ca.crt
  35 │         command:
  36 │         - /bin/sh
  37 │         - -c
  38 │         image: bitnami/kubectl:1.20.2
  39 │         name: init-vault-secret
  40 │         volumeMounts:
  41 │         - mountPath: /tmp/vault
  42 └           name: vault-ca
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-external-secrets in deployment kubernetes-external-secrets (namespace: secret-infra) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-external-secrets-deploy.yaml:44-73
────────────────────────────────────────
  44 ┌       - name: kubernetes-external-secrets
  45 │         image: "ghcr.io/external-secrets/kubernetes-external-secrets:8.5.5"
  46 │         ports:
  47 │         - name: prometheus
  48 │           containerPort: 3001
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources: {}
  51 │         env:
  52 └         - name: "AKEYLESS_API_ENDPOINT"
  ..   
────────────────────────────────────────



kubernetes-headlamp-ci.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PersistentVolumeClaim 'headlamp' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-headlamp-ci.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



kubernetes-headlamp-ci_1.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'headlamp' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-headlamp-ci_1.yaml:7-13
────────────────────────────────────────
   7 ┌   type: NodePort
   8 │   ports:
   9 │   - port: 80
  10 │     targetPort: 4466
  11 │   selector:
  12 │     app.kubernetes.io/name: headlamp
  13 └     app.kubernetes.io/instance: headlamp
────────────────────────────────────────



kubernetes-headlamp-ci_2.yaml (kubernetes)
==========================================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 20, MEDIUM: 10, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'headlamp' of Deployment 'headlamp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'headlamp-plugins' of Deployment 'headlamp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'headlamp' of Deployment 'headlamp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'headlamp-plugins' of Deployment 'headlamp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'headlamp' of 'deployment' 'headlamp' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'headlamp-plugins' of 'deployment' 'headlamp' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'headlamp-plugins' of Deployment 'headlamp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'headlamp-plugins' of Deployment 'headlamp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'headlamp' of Deployment 'headlamp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'headlamp-plugins' of Deployment 'headlamp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'headlamp' of Deployment 'headlamp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'headlamp-plugins' of Deployment 'headlamp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'headlamp-plugins' of Deployment 'headlamp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'headlamp-plugins' of Deployment 'headlamp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'headlamp-plugins' of Deployment 'headlamp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'headlamp-plugins' of Deployment 'headlamp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'headlamp-plugins' of Deployment 'headlamp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'headlamp' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:10-57
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: headlamp
  14 │       app.kubernetes.io/instance: headlamp
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/name: headlamp
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "headlamp" of deployment "headlamp" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "headlamp-plugins" of deployment "headlamp" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container headlamp in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment headlamp in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:21-57
────────────────────────────────────────
  21 ┌       initContainers:
  22 │       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container headlamp in deployment headlamp (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:33-51
────────────────────────────────────────
  33 ┌       - name: headlamp
  34 │         securityContext:
  35 │           privileged: false
  36 │           runAsGroup: 101
  37 │           runAsNonRoot: true
  38 │           runAsUser: 100
  39 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  40 │         imagePullPolicy: Never
  41 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container headlamp-plugins in deployment headlamp (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-headlamp-ci_2.yaml:22-31
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /bin/sh
  24 │         - -c
  25 │         - mkdir -p /build/plugins && cp -r /plugins/* /build/plugins/
  26 │         image: ghcr.io/headlamp-k8s/headlamp-plugins-test:latest
  27 │         imagePullPolicy: Never
  28 │         name: headlamp-plugins
  29 │         volumeMounts:
  30 │         - mountPath: /build/plugins
  31 └           name: headlamp-plugins
────────────────────────────────────────



kubernetes-headlamp-ingress-sample.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Ingress 'headlamp' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-headlamp-ingress-sample.yaml:11-25
────────────────────────────────────────
  11 ┌   tls:
  12 │   - secretName: headlamp
  13 │     hosts:
  14 │     - __URL__
  15 │   rules:
  16 │   - host: __URL__
  17 │     http:
  18 │       paths:
  19 └       - path: /
  ..   
────────────────────────────────────────



kubernetes-headlamp.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'headlamp' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-headlamp.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 80
   9 │     targetPort: 4466
  10 │   selector:
  11 └     k8s-app: headlamp
────────────────────────────────────────



kubernetes-headlamp_1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'headlamp' of Deployment 'headlamp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'headlamp' of Deployment 'headlamp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'headlamp' of 'deployment' 'headlamp' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'headlamp' of Deployment 'headlamp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'headlamp' of Deployment 'headlamp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'headlamp' of Deployment 'headlamp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'headlamp' of Deployment 'headlamp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'headlamp' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:7-32
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       k8s-app: headlamp
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         k8s-app: headlamp
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "headlamp" of deployment "headlamp" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container headlamp in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment headlamp in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:16-32
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container headlamp in deployment headlamp (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-headlamp_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: headlamp
  18 │         image: ghcr.io/headlamp-k8s/headlamp:latest
  19 │         args:
  20 │         - -in-cluster
  21 │         - -plugins-dir=/headlamp/plugins
  22 │         ports:
  23 │         - containerPort: 4466
  24 │         livenessProbe:
  25 └           httpGet:
  ..   
────────────────────────────────────────



kubernetes-incluster1_1.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'crossplane-provider-kubernetes' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-incluster1_1.yaml:4
────────────────────────────────────────
   4 [   name: crossplane-provider-kubernetes
────────────────────────────────────────



kubernetes-incluster2_1.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'crossplane-provider-kubernetes' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-incluster2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: crossplane-provider-kubernetes
   5 │   annotations:
   6 └     argocd.argoproj.io/sync-wave: '-1'
────────────────────────────────────────



kubernetes-incluster_1.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'crossplane-provider-kubernetes' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 kubernetes-incluster_1.yaml:4
────────────────────────────────────────
   4 [   name: crossplane-provider-kubernetes
────────────────────────────────────────



kubernetes-manifests.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'helloworld' of Deployment 'hello-world-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'helloworld' of 'deployment' 'hello-world-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'helloworld' of Deployment 'hello-world-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'helloworld' of Deployment 'hello-world-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'helloworld' of Deployment 'hello-world-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "helloworld" of deployment "hello-world-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello-world-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests1.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: hello-world-dep
   7 └   name: hello-world-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-world-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello-world-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests1.yaml:20-24
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container helloworld in deployment hello-world-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-manifests1.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────



kubernetes-manifests10.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests10_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests10_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests10_15.yaml (kubernetes)
===========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests10_16.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests10_18.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests10_2.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests10_20.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests10_22.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests10_4.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests10_6.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests10_9.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests10_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests10_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests10_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests10_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests10_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests11.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11.yaml:14-44
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests11_11.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_11.yaml:14-40
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests11_13.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_13.yaml:14-45
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 └         - name: REDIS_ADDR
  ..   
────────────────────────────────────────



kubernetes-manifests11_15.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Deployment 'loadgenerator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'deployment' 'loadgenerator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loadgenerator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loadgenerator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_15.yaml:17-34
────────────────────────────────────────
  17 ┌       serviceAccountName: default
  18 │       terminationGracePeriodSeconds: 5
  19 │       restartPolicy: Always
  20 │       containers:
  21 │       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 └           value: frontend:80
  ..   
────────────────────────────────────────



kubernetes-manifests11_16.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_16.yaml:14-41
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 └         env:
  ..   
────────────────────────────────────────



kubernetes-manifests11_18.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_18.yaml:14-40
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 └           value: '50051'
  ..   
────────────────────────────────────────



kubernetes-manifests11_2.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_2.yaml:14-51
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 └             command:
  ..   
────────────────────────────────────────


