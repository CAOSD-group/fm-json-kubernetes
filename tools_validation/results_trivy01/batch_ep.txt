
Report Summary

┌────────────────────────────────────────────┬────────────┬───────────────────┐
│                   Target                   │    Type    │ Misconfigurations │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole.yaml          │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole1.yaml         │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole10.yaml        │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole11.yaml        │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole12.yaml        │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole13.yaml        │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole2.yaml         │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole3.yaml         │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole4.yaml         │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole5.yaml         │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole6.yaml         │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole7.yaml         │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole8.yaml         │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRole9.yaml         │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding1.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding10.yaml │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding11.yaml │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding12.yaml │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding13.yaml │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding2.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding3.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding4.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding5.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding6.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding7.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding8.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-clusterRoleBinding9.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment.yaml           │ kubernetes │        26         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment1.yaml          │ kubernetes │        26         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment10.yaml         │ kubernetes │        11         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment11.yaml         │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment12.yaml         │ kubernetes │         4         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment13.yaml         │ kubernetes │        26         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment2.yaml          │ kubernetes │         9         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment3.yaml          │ kubernetes │         9         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment4.yaml          │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment5.yaml          │ kubernetes │        26         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment6.yaml          │ kubernetes │        26         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment7.yaml          │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment8.yaml          │ kubernetes │         9         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-deployment9.yaml          │ kubernetes │        11         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-networkPolicy.yaml        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-networkPolicy1.yaml       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-networkPolicy2.yaml       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-networkPolicy3.yaml       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-networkPolicy4.yaml       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-networkPolicy5.yaml       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-networkPolicy6.yaml       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-networkPolicy7.yaml       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-networkPolicy8.yaml       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service1.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service10.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service11.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service12.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service13.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service2.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service3.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service4.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service5.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service6.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service7.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service8.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-service9.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount.yaml       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount1.yaml      │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount10.yaml     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount11.yaml     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount12.yaml     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount13.yaml     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount2.yaml      │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount3.yaml      │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount4.yaml      │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount5.yaml      │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount6.yaml      │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount7.yaml      │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount8.yaml      │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeStateMetrics-serviceAccount9.yaml      │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernet_dashboad.yaml                     │ kubernetes │        11         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_20.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_21.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_22.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_23.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_3.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_4.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_5.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_6.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_7.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_8.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests11_9.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12.yaml                │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_10.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_11.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_12.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_13.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_14.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_15.yaml             │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_16.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_17.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_18.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_19.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_2.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_20.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_21.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_22.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_23.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_3.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_4.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_5.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_6.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_7.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_8.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests12_9.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13.yaml                │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_10.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_11.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_12.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_13.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_14.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_15.yaml             │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_16.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_17.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_18.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_19.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_2.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_20.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_21.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_22.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_23.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_3.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_4.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_5.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_6.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_7.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_8.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests13_9.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14.yaml                │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_10.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_11.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_12.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_13.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_14.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_15.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_16.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_17.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_18.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_19.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_2.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_20.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_21.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_22.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_23.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_3.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_4.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_5.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_6.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_7.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_8.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests14_9.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15.yaml                │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_10.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_11.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_12.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_13.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_14.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_15.yaml             │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_16.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_17.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_18.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_19.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_2.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_20.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_21.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_22.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_23.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_3.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_4.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_5.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_6.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_7.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_8.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests15_9.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_10.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_11.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_12.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_13.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_14.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_15.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_16.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_17.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_18.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_19.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_2.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_21.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_22.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_23.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_24.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_25.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_26.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_27.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_28.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_3.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_4.yaml              │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_5.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_6.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_7.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_8.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests16_9.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17.yaml                │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_10.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_11.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_12.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_13.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_14.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_15.yaml             │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_16.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_17.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_18.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_19.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_2.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_20.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_21.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_22.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_23.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_3.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_4.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_5.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_6.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_7.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_8.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests17_9.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18.yaml                │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_10.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_11.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_12.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_13.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_14.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_15.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_16.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_17.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_18.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_19.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_2.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_20.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_21.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_22.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_23.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_24.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_25.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_26.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_27.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_28.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_29.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_3.yaml              │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_30.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_31.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_32.yaml             │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_33.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_34.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_4.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_5.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_6.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_7.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_8.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests18_9.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19.yaml                │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_10.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_11.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_12.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_13.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_14.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_15.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_16.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_17.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_18.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_19.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_2.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_20.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_21.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_22.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_23.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_24.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_25.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_26.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_27.yaml             │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_28.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_29.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_3.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_4.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_5.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_6.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_7.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_8.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests19_9.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests1_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2.yaml                 │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_10.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_11.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_12.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_13.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_14.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_15.yaml              │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_16.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_17.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_18.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_19.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_2.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_20.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_21.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_22.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_23.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_3.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_4.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_5.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_6.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_7.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_8.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests2_9.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3.yaml                 │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_10.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_11.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_12.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_13.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_14.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_15.yaml              │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_16.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_17.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_18.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_19.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_2.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_20.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_21.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_22.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_23.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_3.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_4.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_5.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_6.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_7.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_8.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests3_9.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests4.yaml                 │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests4_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5.yaml                 │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_10.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_11.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_12.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_13.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_14.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_15.yaml              │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_16.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_17.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_18.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_19.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_2.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_20.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_21.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_22.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_23.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_3.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_4.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_5.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_6.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_7.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_8.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests5_9.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6.yaml                 │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_10.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_11.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_12.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_13.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_14.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_15.yaml              │ kubernetes │        29         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_16.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_17.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_18.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_19.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_2.yaml               │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_20.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_21.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_22.yaml              │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_23.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_3.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_4.yaml               │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_5.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_6.yaml               │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_7.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_8.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests6_9.yaml               │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests7.yaml                 │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests7_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8.yaml                 │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_10.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_11.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_12.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_13.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_14.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_15.yaml              │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_16.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_17.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_18.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_19.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_2.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_20.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_21.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_22.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_23.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_3.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_4.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_5.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_6.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_7.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_8.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests8_9.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9.yaml                 │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_10.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_11.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_12.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_13.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_14.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_15.yaml              │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_16.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_17.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_18.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_19.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_2.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_20.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_21.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_22.yaml              │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_23.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_3.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_4.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_5.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_6.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_7.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_8.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests9_9.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_10.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_11.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_12.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_13.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_14.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_15.yaml               │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_16.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_17.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_18.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_19.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_2.yaml                │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_20.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_21.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_22.yaml               │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_23.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_4.yaml                │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_6.yaml                │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_7.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-manifests_9.yaml                │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-namespace.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-ocean.yaml                      │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-ocean1.yaml                     │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-ocean1_1.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-ocean_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-operator.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-operator_1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-operator_2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-operator_3.yaml                 │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-resource-staging-server_1.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-resource-staging-server_2.yaml  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-secret.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service-account.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service-account1.yaml           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service-nodeport.yaml           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service1.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service10.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service11.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service12.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service14.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service15.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service16.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service17.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service18.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service19.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service2.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service3.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service4.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service5.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service6.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service7.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service8.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-service9.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-skooner.yaml                    │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-skooner_1.yaml                  │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test-hpa.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test.yaml                       │ kubernetes │        16         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_1.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_10.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_11.yaml                    │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_12.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_13.yaml                    │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_14.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_15.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_16.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_17.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_2.yaml                     │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_3.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_4.yaml                     │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_5.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_6.yaml                     │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_7.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_8.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-test_9.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-unibuc-ro-ingress.yaml          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-whale.yaml                      │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-whale1.yaml                     │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-whale1_1.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes-whale_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes1.yaml                           │ kubernetes │        31         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes10.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes10_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes10_2.yaml                        │ kubernetes │        16         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes10_3.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes11.yaml                          │ kubernetes │        32         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes12.yaml                          │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes12_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes19.yaml                          │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes25.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes25_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28.yaml                          │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_10.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_11.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_12.yaml                       │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_13.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_14.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_15.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_16.yaml                       │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_17.yaml                       │ kubernetes │        50         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_18.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_19.yaml                       │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_2.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_20.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_21.yaml                       │ kubernetes │        34         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_22.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_23.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_24.yaml                       │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_25.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_26.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_27.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_28.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_29.yaml                       │ kubernetes │        50         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_3.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_30.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_31.yaml                       │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_4.yaml                        │ kubernetes │        82         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_5.yaml                        │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_6.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_7.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_8.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes28_9.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_10.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_11.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_12.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_13.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_14.yaml                       │ kubernetes │         6         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_15.yaml                       │ kubernetes │         3         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_16.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_17.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_18.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_19.yaml                       │ kubernetes │         4         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_2.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_20.yaml                       │ kubernetes │         4         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_21.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_22.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_3.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_4.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_5.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_6.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_7.yaml                        │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_8.yaml                        │ kubernetes │         4         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes29_9.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes3.yaml                           │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes30_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes30_2.yaml                        │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes30_3.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes30_4.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes30_5.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes30_6.yaml                        │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes30_7.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes30_8.yaml                        │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes30_9.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes31.yaml                          │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes31_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes31_2.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes34.yaml                          │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes34_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes35.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes35_1.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes35_2.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes35_3.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes35_4.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes35_5.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes35_6.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes35_7.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes36.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes36_1.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes36_2.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes36_3.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes36_4.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes36_5.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes36_6.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes36_7.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes39.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes39_1.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes39_2.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes39_3.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes39_4.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes39_5.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes39_6.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes39_7.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes3_1.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes3_2.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes4.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes40.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes40_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes40_2.yaml                        │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes40_3.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes40_4.yaml                        │ kubernetes │        12         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes41.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes41_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes41_2.yaml                        │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes41_3.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes41_4.yaml                        │ kubernetes │        12         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes42.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes42_1.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes42_2.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes42_3.yaml                        │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes42_4.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes42_5.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes42_6.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes42_7.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes46.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes46_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes4_1.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes4_2.yaml                         │ kubernetes │        16         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes4_3.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes5.yaml                           │ kubernetes │        32         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes50.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes50_1.yaml                        │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes51.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes51_1.yaml                        │ kubernetes │        15         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes52.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes52_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes52_2.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes52_3.yaml                        │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes52_4.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes53.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes53_1.yaml                        │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes53_2.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes53_3.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes53_4.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes54.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes54_1.yaml                        │ kubernetes │        14         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes7.yaml                           │ kubernetes │        31         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes9.yaml                           │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes9_1.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes9_2.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetesDeployment.yaml                  │ kubernetes │        34         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetesService.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment.yaml                 │ kubernetes │        19         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment11.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment11_1.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment11_2.yaml             │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment11_3.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment11_4.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment11_5.yaml             │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment1_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment4.yaml                │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment5.yaml                │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment6.yaml                │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deployment7.yaml                │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deploymnet.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_deploymnet_1.yaml               │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_job_template.yaml               │ kubernetes │        15         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_operator_3.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_operator_4.yaml                 │ kubernetes │        13         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_operator_5.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_operator_6.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_operator_7.yaml                 │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_redis_secret.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_secret.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_secret_1.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubernetes_secret_2.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuberouter.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuberouter_1.yaml                          │ kubernetes │        37         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuberouter_2.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuberouter_3.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kuberouter_4.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape1_1.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape3.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape3_1.yaml                          │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape3_2.yaml                          │ kubernetes │         6         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape3_3.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape3_4.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape3_5.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape3_6.yaml                          │ kubernetes │        10         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape4.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape4_1.yaml                          │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape4_2.yaml                          │ kubernetes │         6         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape4_3.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape4_4.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape4_5.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape4_6.yaml                          │ kubernetes │        10         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescape_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescapevalidator_editor_role.yaml        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubescapevalidator_viewer_role.yaml        │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubeshark-front-svc.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubesync_editor_role.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubesync_editor_role1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubesync_viewer_role.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubesync_viewer_role1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail-clusterauth.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail-clusterauth_1.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail-clusterauth_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail-clusterauth_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail-clusterauth_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail-clusterauth_5.yaml                │ kubernetes │         5         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_10.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_11.yaml                          │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_12.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_13.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_14.yaml                          │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_15.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_16.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_17.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_18.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_19.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_2.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_20.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_21.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_22.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_23.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_24.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_3.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_4.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_5.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_6.yaml                           │ kubernetes │        17         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_7.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_8.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetail1_9.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetesting.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubetesting_1.yaml                         │ kubernetes │        18         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevip.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-kvm-ds.yaml                       │ kubernetes │        20         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-kvm-ds1.yaml                      │ kubernetes │        20         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-kvm-ds2.yaml                      │ kubernetes │        20         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-kvm-ds3.yaml                      │ kubernetes │        20         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator-v1.3.1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator-v1.3.1_2.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator-v1.3.1_3.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator-v1.3.1_4.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator-v1.3.1_5.yaml            │ kubernetes │         3         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator-v1.3.1_6.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator-v1.3.1_8.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator-v1.3.1_9.yaml            │ kubernetes │         6         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator1_2.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator1_3.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator1_4.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator1_5.yaml                  │ kubernetes │         2         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator1_6.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator1_8.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator1_9.yaml                  │ kubernetes │         6         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator2_2.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator2_3.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────┼────────────┼───────────────────┤
│ kubevirt-operator2_4.yaml                  │ kubernetes │         0         │
└────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


kubeStateMetrics-clusterRole.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole.yaml:11-28
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - resourcequotas
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole1.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole1.yaml:11-28
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - resourcequotas
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole10.yaml (kubernetes)
================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole10.yaml:11-29
────────────────────────────────────────
  11 ┌   - apiGroups:
  12 │       - ""
  13 │     resources:
  14 │       - configmaps
  15 │       - secrets
  16 │       - nodes
  17 │       - pods
  18 │       - services
  19 └       - serviceaccounts
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole11.yaml (kubernetes)
================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole11.yaml:11-29
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - serviceaccounts
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole12.yaml (kubernetes)
================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole12.yaml:11-29
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - serviceaccounts
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole13.yaml (kubernetes)
================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole13.yaml:11-28
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - resourcequotas
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole2.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole2.yaml:11-29
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - serviceaccounts
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole3.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole3.yaml:11-29
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - serviceaccounts
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole4.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole4.yaml:11-29
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - serviceaccounts
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole5.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole5.yaml:11-28
────────────────────────────────────────
  11 ┌   - apiGroups:
  12 │       - ""
  13 │     resources:
  14 │       - configmaps
  15 │       - secrets
  16 │       - nodes
  17 │       - pods
  18 │       - services
  19 └       - resourcequotas
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole6.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole6.yaml:11-28
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - resourcequotas
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole7.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole7.yaml:11-29
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - serviceaccounts
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole8.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole8.yaml:11-29
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - serviceaccounts
  ..   
────────────────────────────────────────



kubeStateMetrics-clusterRole9.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'kube-state-metrics' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubeStateMetrics-clusterRole9.yaml:11-29
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - secrets
  16 │   - nodes
  17 │   - pods
  18 │   - services
  19 └   - serviceaccounts
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment.yaml (kubernetes)
=============================================
Tests: 129 (SUCCESSES: 103, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 13, MEDIUM: 9, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy-main' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy-self' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-state-metrics' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-main" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-self" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-state-metrics" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:28-89
────────────────────────────────────────
  28 ┌       containers:
  29 │       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment1.yaml (kubernetes)
==============================================
Tests: 129 (SUCCESSES: 103, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 13, MEDIUM: 9, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy-main' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy-self' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-state-metrics' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-main" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-self" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-state-metrics" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:28-89
────────────────────────────────────────
  28 ┌       containers:
  29 │       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment1.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment10.yaml (kubernetes)
===============================================
Tests: 120 (SUCCESSES: 109, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0015 (LOW): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:54-80
────────────────────────────────────────
  54 ┌         - args:
  55 │             - --secure-listen-address=:8443
  56 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │             - --upstream=http://127.0.0.1:8081/
  58 │           image: quay.io/brancz/kube-rbac-proxy:v0.16.0
  59 │           name: kube-rbac-proxy-main
  60 │           ports:
  61 │             - containerPort: 8443
  62 └               name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:81-107
────────────────────────────────────────
  81 ┌         - args:
  82 │             - --secure-listen-address=:9443
  83 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  84 │             - --upstream=http://127.0.0.1:8082/
  85 │           image: quay.io/brancz/kube-rbac-proxy:v0.16.0
  86 │           name: kube-rbac-proxy-self
  87 │           ports:
  88 │             - containerPort: 9443
  89 └               name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:30-53
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --host=127.0.0.1
  32 │             - --port=8081
  33 │             - --telemetry-host=127.0.0.1
  34 │             - --telemetry-port=8082
  35 │           image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.11.0
  36 │           name: kube-state-metrics
  37 │           resources:
  38 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:54-80
────────────────────────────────────────
  54 ┌         - args:
  55 │             - --secure-listen-address=:8443
  56 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │             - --upstream=http://127.0.0.1:8081/
  58 │           image: quay.io/brancz/kube-rbac-proxy:v0.16.0
  59 │           name: kube-rbac-proxy-main
  60 │           ports:
  61 │             - containerPort: 8443
  62 └               name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:81-107
────────────────────────────────────────
  81 ┌         - args:
  82 │             - --secure-listen-address=:9443
  83 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  84 │             - --upstream=http://127.0.0.1:8082/
  85 │           image: quay.io/brancz/kube-rbac-proxy:v0.16.0
  86 │           name: kube-rbac-proxy-self
  87 │           ports:
  88 │             - containerPort: 9443
  89 └               name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:30-53
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --host=127.0.0.1
  32 │             - --port=8081
  33 │             - --telemetry-host=127.0.0.1
  34 │             - --telemetry-port=8082
  35 │           image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.11.0
  36 │           name: kube-state-metrics
  37 │           resources:
  38 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:30-53
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --host=127.0.0.1
  32 │             - --port=8081
  33 │             - --telemetry-host=127.0.0.1
  34 │             - --telemetry-port=8082
  35 │           image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.11.0
  36 │           name: kube-state-metrics
  37 │           resources:
  38 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:28-110
────────────────────────────────────────
  28 ┌       automountServiceAccountToken: true
  29 │       containers:
  30 │         - args:
  31 │             - --host=127.0.0.1
  32 │             - --port=8081
  33 │             - --telemetry-host=127.0.0.1
  34 │             - --telemetry-port=8082
  35 │           image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.11.0
  36 └           name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:54-80
────────────────────────────────────────
  54 ┌         - args:
  55 │             - --secure-listen-address=:8443
  56 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │             - --upstream=http://127.0.0.1:8081/
  58 │           image: quay.io/brancz/kube-rbac-proxy:v0.16.0
  59 │           name: kube-rbac-proxy-main
  60 │           ports:
  61 │             - containerPort: 8443
  62 └               name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:81-107
────────────────────────────────────────
  81 ┌         - args:
  82 │             - --secure-listen-address=:9443
  83 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  84 │             - --upstream=http://127.0.0.1:8082/
  85 │           image: quay.io/brancz/kube-rbac-proxy:v0.16.0
  86 │           name: kube-rbac-proxy-self
  87 │           ports:
  88 │             - containerPort: 9443
  89 └               name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-state-metrics in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment10.yaml:30-53
────────────────────────────────────────
  30 ┌         - args:
  31 │             - --host=127.0.0.1
  32 │             - --port=8081
  33 │             - --telemetry-host=127.0.0.1
  34 │             - --telemetry-port=8082
  35 │           image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.11.0
  36 │           name: kube-state-metrics
  37 │           resources:
  38 └             limits:
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment11.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 1, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment11.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment11.yaml:28-110
────────────────────────────────────────
  28 ┌       automountServiceAccountToken: true
  29 │       containers:
  30 │       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
  36 └         name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment11.yaml:54-80
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.16.0
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment11.yaml:81-107
────────────────────────────────────────
  81 ┌       - args:
  82 │         - --secure-listen-address=:9443
  83 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  84 │         - --upstream=http://127.0.0.1:8082/
  85 │         image: quay.io/brancz/kube-rbac-proxy:v0.16.0
  86 │         name: kube-rbac-proxy-self
  87 │         ports:
  88 │         - containerPort: 9443
  89 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-state-metrics in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment11.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment12.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 112, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment12.yaml:28-111
────────────────────────────────────────
  28 ┌       automountServiceAccountToken: true
  29 │       containers:
  30 │       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.14.0
  36 └         name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment12.yaml:55-81
────────────────────────────────────────
  55 ┌       - args:
  56 │         - --secure-listen-address=:8443
  57 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  58 │         - --upstream=http://127.0.0.1:8081/
  59 │         image: quay.io/brancz/kube-rbac-proxy:v0.18.2
  60 │         name: kube-rbac-proxy-main
  61 │         ports:
  62 │         - containerPort: 8443
  63 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment12.yaml:82-108
────────────────────────────────────────
  82 ┌       - args:
  83 │         - --secure-listen-address=:9443
  84 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  85 │         - --upstream=http://127.0.0.1:8082/
  86 │         image: quay.io/brancz/kube-rbac-proxy:v0.18.2
  87 │         name: kube-rbac-proxy-self
  88 │         ports:
  89 │         - containerPort: 9443
  90 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-state-metrics in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment12.yaml:30-54
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.14.0
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment13.yaml (kubernetes)
===============================================
Tests: 129 (SUCCESSES: 103, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 13, MEDIUM: 9, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy-main' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy-self' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-state-metrics' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-main" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-self" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-state-metrics" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:28-89
────────────────────────────────────────
  28 ┌       containers:
  29 │       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment13.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment2.yaml (kubernetes)
==============================================
Tests: 118 (SUCCESSES: 109, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 3, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment2.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment2.yaml:54-78
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment2.yaml:79-103
────────────────────────────────────────
  79 ┌       - args:
  80 │         - --secure-listen-address=:9443
  81 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  82 │         - --upstream=http://127.0.0.1:8082/
  83 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  84 │         name: kube-rbac-proxy-self
  85 │         ports:
  86 │         - containerPort: 9443
  87 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-main" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment2.yaml:54-78
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-self" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment2.yaml:79-103
────────────────────────────────────────
  79 ┌       - args:
  80 │         - --secure-listen-address=:9443
  81 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  82 │         - --upstream=http://127.0.0.1:8082/
  83 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  84 │         name: kube-rbac-proxy-self
  85 │         ports:
  86 │         - containerPort: 9443
  87 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment2.yaml:28-106
────────────────────────────────────────
  28 ┌       automountServiceAccountToken: true
  29 │       containers:
  30 │       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2
  36 └         name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment2.yaml:54-78
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment2.yaml:79-103
────────────────────────────────────────
  79 ┌       - args:
  80 │         - --secure-listen-address=:9443
  81 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  82 │         - --upstream=http://127.0.0.1:8082/
  83 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  84 │         name: kube-rbac-proxy-self
  85 │         ports:
  86 │         - containerPort: 9443
  87 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-state-metrics in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment2.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment3.yaml (kubernetes)
==============================================
Tests: 118 (SUCCESSES: 109, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 3, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment3.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment3.yaml:54-78
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment3.yaml:79-103
────────────────────────────────────────
  79 ┌       - args:
  80 │         - --secure-listen-address=:9443
  81 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  82 │         - --upstream=http://127.0.0.1:8082/
  83 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  84 │         name: kube-rbac-proxy-self
  85 │         ports:
  86 │         - containerPort: 9443
  87 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-main" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment3.yaml:54-78
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-self" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment3.yaml:79-103
────────────────────────────────────────
  79 ┌       - args:
  80 │         - --secure-listen-address=:9443
  81 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  82 │         - --upstream=http://127.0.0.1:8082/
  83 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  84 │         name: kube-rbac-proxy-self
  85 │         ports:
  86 │         - containerPort: 9443
  87 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment3.yaml:28-106
────────────────────────────────────────
  28 ┌       automountServiceAccountToken: true
  29 │       containers:
  30 │       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2
  36 └         name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment3.yaml:54-78
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment3.yaml:79-103
────────────────────────────────────────
  79 ┌       - args:
  80 │         - --secure-listen-address=:9443
  81 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  82 │         - --upstream=http://127.0.0.1:8082/
  83 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  84 │         name: kube-rbac-proxy-self
  85 │         ports:
  86 │         - containerPort: 9443
  87 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-state-metrics in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment3.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment4.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 1, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment4.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.10.1
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment4.yaml:28-110
────────────────────────────────────────
  28 ┌       automountServiceAccountToken: true
  29 │       containers:
  30 │       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.10.1
  36 └         name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment4.yaml:54-80
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.16.0
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment4.yaml:81-107
────────────────────────────────────────
  81 ┌       - args:
  82 │         - --secure-listen-address=:9443
  83 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  84 │         - --upstream=http://127.0.0.1:8082/
  85 │         image: quay.io/brancz/kube-rbac-proxy:v0.16.0
  86 │         name: kube-rbac-proxy-self
  87 │         ports:
  88 │         - containerPort: 9443
  89 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-state-metrics in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment4.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.10.1
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment5.yaml (kubernetes)
==============================================
Tests: 129 (SUCCESSES: 103, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 13, MEDIUM: 9, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:45-65
────────────────────────────────────────
  45 ┌         - args:
  46 │             - --logtostderr
  47 │             - --secure-listen-address=:8443
  48 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │             - --upstream=http://127.0.0.1:8081/
  50 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │           name: kube-rbac-proxy-main
  52 │           ports:
  53 └             - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:66-86
────────────────────────────────────────
  66 ┌         - args:
  67 │             - --logtostderr
  68 │             - --secure-listen-address=:9443
  69 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │             - --upstream=http://127.0.0.1:8082/
  71 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │           name: kube-rbac-proxy-self
  73 │           ports:
  74 └             - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:29-44
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --host=127.0.0.1
  31 │             - --port=8081
  32 │             - --telemetry-host=127.0.0.1
  33 │             - --telemetry-port=8082
  34 │           image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │           name: kube-state-metrics
  36 │           resources:
  37 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:45-65
────────────────────────────────────────
  45 ┌         - args:
  46 │             - --logtostderr
  47 │             - --secure-listen-address=:8443
  48 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │             - --upstream=http://127.0.0.1:8081/
  50 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │           name: kube-rbac-proxy-main
  52 │           ports:
  53 └             - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:66-86
────────────────────────────────────────
  66 ┌         - args:
  67 │             - --logtostderr
  68 │             - --secure-listen-address=:9443
  69 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │             - --upstream=http://127.0.0.1:8082/
  71 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │           name: kube-rbac-proxy-self
  73 │           ports:
  74 └             - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:29-44
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --host=127.0.0.1
  31 │             - --port=8081
  32 │             - --telemetry-host=127.0.0.1
  33 │             - --telemetry-port=8082
  34 │           image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │           name: kube-state-metrics
  36 │           resources:
  37 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy-main' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:45-65
────────────────────────────────────────
  45 ┌         - args:
  46 │             - --logtostderr
  47 │             - --secure-listen-address=:8443
  48 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │             - --upstream=http://127.0.0.1:8081/
  50 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │           name: kube-rbac-proxy-main
  52 │           ports:
  53 └             - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy-self' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:66-86
────────────────────────────────────────
  66 ┌         - args:
  67 │             - --logtostderr
  68 │             - --secure-listen-address=:9443
  69 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │             - --upstream=http://127.0.0.1:8082/
  71 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │           name: kube-rbac-proxy-self
  73 │           ports:
  74 └             - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-state-metrics' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:29-44
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --host=127.0.0.1
  31 │             - --port=8081
  32 │             - --telemetry-host=127.0.0.1
  33 │             - --telemetry-port=8082
  34 │           image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │           name: kube-state-metrics
  36 │           resources:
  37 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:29-44
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --host=127.0.0.1
  31 │             - --port=8081
  32 │             - --telemetry-host=127.0.0.1
  33 │             - --telemetry-port=8082
  34 │           image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │           name: kube-state-metrics
  36 │           resources:
  37 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:45-65
────────────────────────────────────────
  45 ┌         - args:
  46 │             - --logtostderr
  47 │             - --secure-listen-address=:8443
  48 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │             - --upstream=http://127.0.0.1:8081/
  50 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │           name: kube-rbac-proxy-main
  52 │           ports:
  53 └             - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:66-86
────────────────────────────────────────
  66 ┌         - args:
  67 │             - --logtostderr
  68 │             - --secure-listen-address=:9443
  69 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │             - --upstream=http://127.0.0.1:8082/
  71 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │           name: kube-rbac-proxy-self
  73 │           ports:
  74 └             - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:29-44
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --host=127.0.0.1
  31 │             - --port=8081
  32 │             - --telemetry-host=127.0.0.1
  33 │             - --telemetry-port=8082
  34 │           image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │           name: kube-state-metrics
  36 │           resources:
  37 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:29-44
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --host=127.0.0.1
  31 │             - --port=8081
  32 │             - --telemetry-host=127.0.0.1
  33 │             - --telemetry-port=8082
  34 │           image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │           name: kube-state-metrics
  36 │           resources:
  37 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:45-65
────────────────────────────────────────
  45 ┌         - args:
  46 │             - --logtostderr
  47 │             - --secure-listen-address=:8443
  48 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │             - --upstream=http://127.0.0.1:8081/
  50 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │           name: kube-rbac-proxy-main
  52 │           ports:
  53 └             - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:66-86
────────────────────────────────────────
  66 ┌         - args:
  67 │             - --logtostderr
  68 │             - --secure-listen-address=:9443
  69 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │             - --upstream=http://127.0.0.1:8082/
  71 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │           name: kube-rbac-proxy-self
  73 │           ports:
  74 └             - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:29-44
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --host=127.0.0.1
  31 │             - --port=8081
  32 │             - --telemetry-host=127.0.0.1
  33 │             - --telemetry-port=8082
  34 │           image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │           name: kube-state-metrics
  36 │           resources:
  37 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-main" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:45-65
────────────────────────────────────────
  45 ┌         - args:
  46 │             - --logtostderr
  47 │             - --secure-listen-address=:8443
  48 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │             - --upstream=http://127.0.0.1:8081/
  50 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │           name: kube-rbac-proxy-main
  52 │           ports:
  53 └             - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-self" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:66-86
────────────────────────────────────────
  66 ┌         - args:
  67 │             - --logtostderr
  68 │             - --secure-listen-address=:9443
  69 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │             - --upstream=http://127.0.0.1:8082/
  71 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │           name: kube-rbac-proxy-self
  73 │           ports:
  74 └             - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-state-metrics" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:29-44
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --host=127.0.0.1
  31 │             - --port=8081
  32 │             - --telemetry-host=127.0.0.1
  33 │             - --telemetry-port=8082
  34 │           image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │           name: kube-state-metrics
  36 │           resources:
  37 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:29-44
────────────────────────────────────────
  29 ┌         - args:
  30 │             - --host=127.0.0.1
  31 │             - --port=8081
  32 │             - --telemetry-host=127.0.0.1
  33 │             - --telemetry-port=8082
  34 │           image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │           name: kube-state-metrics
  36 │           resources:
  37 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:45-65
────────────────────────────────────────
  45 ┌         - args:
  46 │             - --logtostderr
  47 │             - --secure-listen-address=:8443
  48 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │             - --upstream=http://127.0.0.1:8081/
  50 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │           name: kube-rbac-proxy-main
  52 │           ports:
  53 └             - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:66-86
────────────────────────────────────────
  66 ┌         - args:
  67 │             - --logtostderr
  68 │             - --secure-listen-address=:9443
  69 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │             - --upstream=http://127.0.0.1:8082/
  71 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │           name: kube-rbac-proxy-self
  73 │           ports:
  74 └             - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:28-89
────────────────────────────────────────
  28 ┌       containers:
  29 │         - args:
  30 │             - --host=127.0.0.1
  31 │             - --port=8081
  32 │             - --telemetry-host=127.0.0.1
  33 │             - --telemetry-port=8082
  34 │           image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │           name: kube-state-metrics
  36 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:45-65
────────────────────────────────────────
  45 ┌         - args:
  46 │             - --logtostderr
  47 │             - --secure-listen-address=:8443
  48 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │             - --upstream=http://127.0.0.1:8081/
  50 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │           name: kube-rbac-proxy-main
  52 │           ports:
  53 └             - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment5.yaml:66-86
────────────────────────────────────────
  66 ┌         - args:
  67 │             - --logtostderr
  68 │             - --secure-listen-address=:9443
  69 │             - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │             - --upstream=http://127.0.0.1:8082/
  71 │           image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │           name: kube-rbac-proxy-self
  73 │           ports:
  74 └             - containerPort: 9443
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment6.yaml (kubernetes)
==============================================
Tests: 129 (SUCCESSES: 103, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 13, MEDIUM: 9, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy-main' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy-self' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-state-metrics' of 'deployment' 'kube-state-metrics' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy-main' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy-self' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-main" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-self" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-state-metrics" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:29-44
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 │         resources:
  37 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:28-89
────────────────────────────────────────
  28 ┌       containers:
  29 │       - args:
  30 │         - --host=127.0.0.1
  31 │         - --port=8081
  32 │         - --telemetry-host=127.0.0.1
  33 │         - --telemetry-port=8082
  34 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0
  35 │         name: kube-state-metrics
  36 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:45-65
────────────────────────────────────────
  45 ┌       - args:
  46 │         - --logtostderr
  47 │         - --secure-listen-address=:8443
  48 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  49 │         - --upstream=http://127.0.0.1:8081/
  50 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  51 │         name: kube-rbac-proxy-main
  52 │         ports:
  53 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment6.yaml:66-86
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --logtostderr
  68 │         - --secure-listen-address=:9443
  69 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  70 │         - --upstream=http://127.0.0.1:8082/
  71 │         image: quay.io/brancz/kube-rbac-proxy:v0.11.0
  72 │         name: kube-rbac-proxy-self
  73 │         ports:
  74 └         - containerPort: 9443
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment7.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 1, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment7.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.10.1
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment7.yaml:28-110
────────────────────────────────────────
  28 ┌       automountServiceAccountToken: true
  29 │       containers:
  30 │       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.10.1
  36 └         name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment7.yaml:54-80
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.15.0
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment7.yaml:81-107
────────────────────────────────────────
  81 ┌       - args:
  82 │         - --secure-listen-address=:9443
  83 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  84 │         - --upstream=http://127.0.0.1:8082/
  85 │         image: quay.io/brancz/kube-rbac-proxy:v0.15.0
  86 │         name: kube-rbac-proxy-self
  87 │         ports:
  88 │         - containerPort: 9443
  89 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-state-metrics in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment7.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.10.1
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment8.yaml (kubernetes)
==============================================
Tests: 118 (SUCCESSES: 109, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 3, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment8.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment8.yaml:54-78
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment8.yaml:79-103
────────────────────────────────────────
  79 ┌       - args:
  80 │         - --secure-listen-address=:9443
  81 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  82 │         - --upstream=http://127.0.0.1:8082/
  83 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  84 │         name: kube-rbac-proxy-self
  85 │         ports:
  86 │         - containerPort: 9443
  87 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-main" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment8.yaml:54-78
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-self" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment8.yaml:79-103
────────────────────────────────────────
  79 ┌       - args:
  80 │         - --secure-listen-address=:9443
  81 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  82 │         - --upstream=http://127.0.0.1:8082/
  83 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  84 │         name: kube-rbac-proxy-self
  85 │         ports:
  86 │         - containerPort: 9443
  87 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment8.yaml:28-106
────────────────────────────────────────
  28 ┌       automountServiceAccountToken: true
  29 │       containers:
  30 │       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2
  36 └         name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment8.yaml:54-78
────────────────────────────────────────
  54 ┌       - args:
  55 │         - --secure-listen-address=:8443
  56 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  57 │         - --upstream=http://127.0.0.1:8081/
  58 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  59 │         name: kube-rbac-proxy-main
  60 │         ports:
  61 │         - containerPort: 8443
  62 └           name: https-main
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment8.yaml:79-103
────────────────────────────────────────
  79 ┌       - args:
  80 │         - --secure-listen-address=:9443
  81 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  82 │         - --upstream=http://127.0.0.1:8082/
  83 │         image: quay.io/brancz/kube-rbac-proxy:v0.14.2
  84 │         name: kube-rbac-proxy-self
  85 │         ports:
  86 │         - containerPort: 9443
  87 └           name: https-self
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-state-metrics in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment8.yaml:30-53
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────



kubeStateMetrics-deployment9.yaml (kubernetes)
==============================================
Tests: 119 (SUCCESSES: 108, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 4, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:30-50
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.6.0
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:30-50
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.6.0
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:30-50
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.6.0
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:51-76
────────────────────────────────────────
  51 ┌       - args:
  52 │         - --logtostderr
  53 │         - --secure-listen-address=:8443
  54 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  55 │         - --upstream=http://127.0.0.1:8081/
  56 │         image: quay.io/brancz/kube-rbac-proxy:v0.13.0
  57 │         name: kube-rbac-proxy-main
  58 │         ports:
  59 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:77-102
────────────────────────────────────────
  77 ┌       - args:
  78 │         - --logtostderr
  79 │         - --secure-listen-address=:9443
  80 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  81 │         - --upstream=http://127.0.0.1:8082/
  82 │         image: quay.io/brancz/kube-rbac-proxy:v0.13.0
  83 │         name: kube-rbac-proxy-self
  84 │         ports:
  85 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-main" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:51-76
────────────────────────────────────────
  51 ┌       - args:
  52 │         - --logtostderr
  53 │         - --secure-listen-address=:8443
  54 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  55 │         - --upstream=http://127.0.0.1:8081/
  56 │         image: quay.io/brancz/kube-rbac-proxy:v0.13.0
  57 │         name: kube-rbac-proxy-main
  58 │         ports:
  59 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy-self" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:77-102
────────────────────────────────────────
  77 ┌       - args:
  78 │         - --logtostderr
  79 │         - --secure-listen-address=:9443
  80 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  81 │         - --upstream=http://127.0.0.1:8082/
  82 │         image: quay.io/brancz/kube-rbac-proxy:v0.13.0
  83 │         name: kube-rbac-proxy-self
  84 │         ports:
  85 └         - containerPort: 9443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-state-metrics" of deployment "kube-state-metrics" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:30-50
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.6.0
  36 │         name: kube-state-metrics
  37 │         resources:
  38 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kube-state-metrics in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:28-105
────────────────────────────────────────
  28 ┌       automountServiceAccountToken: true
  29 │       containers:
  30 │       - args:
  31 │         - --host=127.0.0.1
  32 │         - --port=8081
  33 │         - --telemetry-host=127.0.0.1
  34 │         - --telemetry-port=8082
  35 │         image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.6.0
  36 └         name: kube-state-metrics
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-main in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:51-76
────────────────────────────────────────
  51 ┌       - args:
  52 │         - --logtostderr
  53 │         - --secure-listen-address=:8443
  54 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  55 │         - --upstream=http://127.0.0.1:8081/
  56 │         image: quay.io/brancz/kube-rbac-proxy:v0.13.0
  57 │         name: kube-rbac-proxy-main
  58 │         ports:
  59 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy-self in deployment kube-state-metrics (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubeStateMetrics-deployment9.yaml:77-102
────────────────────────────────────────
  77 ┌       - args:
  78 │         - --logtostderr
  79 │         - --secure-listen-address=:9443
  80 │         - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
  81 │         - --upstream=http://127.0.0.1:8082/
  82 │         image: quay.io/brancz/kube-rbac-proxy:v0.13.0
  83 │         name: kube-rbac-proxy-self
  84 │         ports:
  85 └         - containerPort: 9443
  ..   
────────────────────────────────────────



kubernet_dashboad.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernet_dashboad.yaml:23-53
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



kubernetes-manifests11_20.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_20.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 └             port: 6379
  ..   
────────────────────────────────────────



kubernetes-manifests11_22.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_22.yaml:14-44
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests11_4.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_4.yaml:14-44
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 └           periodSeconds: 5
  ..   
────────────────────────────────────────



kubernetes-manifests11_6.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_6.yaml:16-61
────────────────────────────────────────
  16 ┌       serviceAccountName: default
  17 │       containers:
  18 │       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 └           httpGet:
  ..   
────────────────────────────────────────



kubernetes-manifests11_9.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests11_9.yaml:14-40
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests12.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests12_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests12_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests12_15.yaml (kubernetes)
===========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests12_16.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests12_18.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests12_2.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests12_20.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests12_22.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests12_4.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests12_6.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests12_9.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests12_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests12_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests12_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests12_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests12_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests13.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests13_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests13_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests13_15.yaml (kubernetes)
===========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests13_16.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests13_18.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests13_2.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests13_20.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests13_22.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests13_4.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests13_6.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests13_9.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests13_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests13_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests13_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests13_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests13_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests14.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_PROFILER
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14.yaml:14-44
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests14_11.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_11.yaml:14-40
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests14_13.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_13.yaml:14-45
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 └         - name: REDIS_ADDR
  ..   
────────────────────────────────────────



kubernetes-manifests14_15.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Deployment 'loadgenerator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'deployment' 'loadgenerator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loadgenerator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 │           value: frontend:80
  26 │         - name: USERS
  27 │           value: '10'
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loadgenerator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_15.yaml:17-34
────────────────────────────────────────
  17 ┌       serviceAccountName: default
  18 │       terminationGracePeriodSeconds: 5
  19 │       restartPolicy: Always
  20 │       containers:
  21 │       - name: main
  22 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.3
  23 │         env:
  24 │         - name: FRONTEND_ADDR
  25 └           value: frontend:80
  ..   
────────────────────────────────────────



kubernetes-manifests14_16.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_16.yaml:14-41
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 └         env:
  ..   
────────────────────────────────────────



kubernetes-manifests14_18.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_18.yaml:14-40
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 └           value: '50051'
  ..   
────────────────────────────────────────



kubernetes-manifests14_2.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_2.yaml:14-51
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 └             command:
  ..   
────────────────────────────────────────



kubernetes-manifests14_20.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_20.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 └             port: 6379
  ..   
────────────────────────────────────────



kubernetes-manifests14_22.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_22.yaml:14-44
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests14_4.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_4.yaml:14-44
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 └           periodSeconds: 5
  ..   
────────────────────────────────────────



kubernetes-manifests14_6.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_6.yaml:16-61
────────────────────────────────────────
  16 ┌       serviceAccountName: default
  17 │       containers:
  18 │       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 └           httpGet:
  ..   
────────────────────────────────────────



kubernetes-manifests14_9.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests14_9.yaml:14-40
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests15.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests15_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests15_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests15_15.yaml (kubernetes)
===========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests15_16.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests15_18.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests15_2.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests15_20.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests15_22.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests15_4.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests15_6.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests15_9.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests15_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests15_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests15_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests15_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests15_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests16.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'postgres-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"POSTGRES_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



kubernetes-manifests16_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_11.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/frontend:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_11.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/frontend:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_11.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/frontend:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_11.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/frontend:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_11.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests16_14.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_14.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/paymentservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_14.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/paymentservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_14.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/paymentservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_14.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/paymentservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_14.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests16_16.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_16.yaml:22-78
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/productcatalogservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_16.yaml:22-78
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/productcatalogservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_16.yaml:22-78
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/productcatalogservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_16.yaml:22-78
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/productcatalogservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_16.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests16_18.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_18.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/cartservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_18.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/cartservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_18.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/cartservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_18.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/cartservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_18.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests16_21.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_21.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/currencyservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_21.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/currencyservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_21.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/currencyservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_21.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/currencyservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_21.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests16_23.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_23.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/shippingservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_23.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/shippingservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_23.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/shippingservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_23.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/shippingservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_23.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests16_25.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_25.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_25.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_25.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_25.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_25.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests16_27.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_27.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/adservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_27.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/adservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_27.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/adservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_27.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/adservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_27.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests16_4.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:4
────────────────────────────────────────
   4 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 │         volumeMounts:
  24 └         - mountPath: /var/lib/postgresql/data
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests16_4.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: postgres
  17 │         image: postgres:12.10
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         envFrom:
  21 │         - secretRef:
  22 │             name: postgres-config
  23 └         volumeMounts:
  ..   
────────────────────────────────────────



kubernetes-manifests16_5.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/emailservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/emailservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/emailservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/emailservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_5.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests16_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/checkoutservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/checkoutservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/checkoutservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/checkoutservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_7.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests16_9.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests16_9.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/recommendationservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests16_9.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/recommendationservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests16_9.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/recommendationservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests16_9.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: 200262187471.dkr.ecr.ap-southeast-1.amazonaws.com/recommendationservice:a1b66c1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests16_9.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests17.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests17_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests17_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests17_15.yaml (kubernetes)
===========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests17_16.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests17_18.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests17_2.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests17_20.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests17_22.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests17_4.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests17_6.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests17_9.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests17_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests17_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests17_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests17_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests17_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests18.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18.yaml:4-6
────────────────────────────────────────
   4 ┌   name: currencyservice
   5 │   labels:
   6 └     app: currencyservice
────────────────────────────────────────



kubernetes-manifests18_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_11.yaml:23-52
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_11.yaml:23-52
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_11.yaml:23-52
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_11.yaml:23-52
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_11.yaml:4-6
────────────────────────────────────────
   4 ┌   name: shippingservice
   5 │   labels:
   6 └     app: shippingservice
────────────────────────────────────────



kubernetes-manifests18_14.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_14.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_14.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_14.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_14.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_14.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



kubernetes-manifests18_17.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_17.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_17.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_17.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_17.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: redis-cart
   5 │   labels:
   6 └     app: redis-cart
────────────────────────────────────────



kubernetes-manifests18_19.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_19.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_19.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_19.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_19.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_19.yaml:4-6
────────────────────────────────────────
   4 ┌   name: emailservice
   5 │   labels:
   6 └     app: emailservice
────────────────────────────────────────



kubernetes-manifests18_22.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_22.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_22.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_22.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_22.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_22.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



kubernetes-manifests18_25.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_25.yaml:25-79
────────────────────────────────────────
  25 ┌       - name: server
  26 │         securityContext:
  27 │           allowPrivilegeEscalation: false
  28 │           capabilities:
  29 │             drop:
  30 │             - ALL
  31 │           privileged: false
  32 │           readOnlyRootFilesystem: true
  33 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_25.yaml:25-79
────────────────────────────────────────
  25 ┌       - name: server
  26 │         securityContext:
  27 │           allowPrivilegeEscalation: false
  28 │           capabilities:
  29 │             drop:
  30 │             - ALL
  31 │           privileged: false
  32 │           readOnlyRootFilesystem: true
  33 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_25.yaml:25-79
────────────────────────────────────────
  25 ┌       - name: server
  26 │         securityContext:
  27 │           allowPrivilegeEscalation: false
  28 │           capabilities:
  29 │             drop:
  30 │             - ALL
  31 │           privileged: false
  32 │           readOnlyRootFilesystem: true
  33 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_25.yaml:25-79
────────────────────────────────────────
  25 ┌       - name: server
  26 │         securityContext:
  27 │           allowPrivilegeEscalation: false
  28 │           capabilities:
  29 │             drop:
  30 │             - ALL
  31 │           privileged: false
  32 │           readOnlyRootFilesystem: true
  33 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_25.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 └     app: frontend
────────────────────────────────────────



kubernetes-manifests18_29.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_29.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_29.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_29.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_29.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_29.yaml:4-6
────────────────────────────────────────
   4 ┌   name: recommendationservice
   5 │   labels:
   6 └     app: recommendationservice
────────────────────────────────────────



kubernetes-manifests18_3.yaml (kubernetes)
==========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:51-71
────────────────────────────────────────
  51 ┌       - name: main
  52 │         securityContext:
  53 │           allowPrivilegeEscalation: false
  54 │           capabilities:
  55 │             drop:
  56 │             - ALL
  57 │           privileged: false
  58 │           readOnlyRootFilesystem: true
  59 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:51-71
────────────────────────────────────────
  51 ┌       - name: main
  52 │         securityContext:
  53 │           allowPrivilegeEscalation: false
  54 │           capabilities:
  55 │             drop:
  56 │             - ALL
  57 │           privileged: false
  58 │           readOnlyRootFilesystem: true
  59 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:51-71
────────────────────────────────────────
  51 ┌       - name: main
  52 │         securityContext:
  53 │           allowPrivilegeEscalation: false
  54 │           capabilities:
  55 │             drop:
  56 │             - ALL
  57 │           privileged: false
  58 │           readOnlyRootFilesystem: true
  59 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:51-71
────────────────────────────────────────
  51 ┌       - name: main
  52 │         securityContext:
  53 │           allowPrivilegeEscalation: false
  54 │           capabilities:
  55 │             drop:
  56 │             - ALL
  57 │           privileged: false
  58 │           readOnlyRootFilesystem: true
  59 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: loadgenerator
   5 │   labels:
   6 └     app: loadgenerator
────────────────────────────────────────



kubernetes-manifests18_32.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_32.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_32.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_32.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_32.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_32.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────



kubernetes-manifests18_5.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_5.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_5.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_5.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_5.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: productcatalogservice
   5 │   labels:
   6 └     app: productcatalogservice
────────────────────────────────────────



kubernetes-manifests18_8.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests18_8.yaml:23-61
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests18_8.yaml:23-61
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests18_8.yaml:23-61
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests18_8.yaml:23-61
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests18_8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: checkoutservice
   5 │   labels:
   6 └     app: checkoutservice
────────────────────────────────────────



kubernetes-manifests19.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 │           value: '8080'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19.yaml:14-43
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PORT
  22 └           value: '8080'
  ..   
────────────────────────────────────────



kubernetes-manifests19_12.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 │           value: '3550'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_12.yaml:14-41
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 3550
  20 │         env:
  21 │         - name: PORT
  22 └           value: '3550'
  ..   
────────────────────────────────────────



kubernetes-manifests19_15.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:16-44
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 │           value: redis-cart:6379
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_15.yaml:14-44
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 7070
  20 │         env:
  21 │         - name: REDIS_ADDR
  22 └           value: redis-cart:6379
  ..   
────────────────────────────────────────



kubernetes-manifests19_18.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 │         - name: PORT
  23 │           value: '7000'
  24 └         - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_18.yaml:14-42
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.6.0
  18 │         ports:
  19 │         - name: grpc
  20 │           containerPort: 7000
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests19_2.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_2.yaml:14-51
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 └             command:
  ..   
────────────────────────────────────────



kubernetes-manifests19_21.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_21.yaml:14-42
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 └           value: '50051'
  ..   
────────────────────────────────────────



kubernetes-manifests19_24.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_24.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 └             port: 6379
  ..   
────────────────────────────────────────



kubernetes-manifests19_27.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:16-43
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_27.yaml:14-43
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 9555
  20 │         env:
  21 │         - name: PORT
  22 └           value: '9555'
  ..   
────────────────────────────────────────



kubernetes-manifests19_4.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 │           exec:
  23 │             command:
  24 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_4.yaml:14-45
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           periodSeconds: 5
  22 └           exec:
  ..   
────────────────────────────────────────



kubernetes-manifests19_6.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:16-61
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 │           httpGet:
  23 │             path: /_healthz
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_6.yaml:14-61
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.6.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         readinessProbe:
  21 │           initialDelaySeconds: 10
  22 └           httpGet:
  ..   
────────────────────────────────────────



kubernetes-manifests19_9.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         - name: DISABLE_PROFILER
  24 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests19_9.yaml:14-41
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.6.0
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 └           value: '50051'
  ..   
────────────────────────────────────────



kubernetes-manifests2.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests2_11.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests2_13.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests2_15.yaml (kubernetes)
==========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests2_16.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests2_18.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests2_2.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests2_20.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests2_22.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests2_4.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests2_6.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests2_9.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests2_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests2_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests2_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests2_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests2_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests3.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests3_11.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests3_13.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests3_15.yaml (kubernetes)
==========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests3_16.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests3_18.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests3_2.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests3_20.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests3_22.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests3_4.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests3_6.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests3_9.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests3_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests3_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests3_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests3_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests3_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests4.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'helloworld' of Deployment 'hello-world-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'helloworld' of 'deployment' 'hello-world-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'helloworld' of Deployment 'hello-world-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'helloworld' of Deployment 'hello-world-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'helloworld' of Deployment 'hello-world-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'helloworld' of Deployment 'hello-world-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "helloworld" of deployment "hello-world-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello-world-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests4.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: hello-world-dep
   7 └   name: hello-world-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-world-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello-world-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests4.yaml:20-24
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container helloworld in deployment hello-world-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-manifests4.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: gabrie30/hello-world
  22 │         name: helloworld
  23 │         imagePullPolicy: Always
  24 └         resources: {}
────────────────────────────────────────



kubernetes-manifests5.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests5_11.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests5_13.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests5_15.yaml (kubernetes)
==========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests5_16.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests5_18.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests5_2.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests5_20.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests5_22.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests5_4.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests5_6.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests5_9.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests5_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests5_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests5_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests5_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests5_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests6.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: DISABLE_TRACING
  25 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6.yaml:14-46
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests6_11.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 │         - name: PORT
  23 │           value: '3550'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_11.yaml:14-40
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 3550
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests6_13.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_13.yaml:14-45
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 └         - name: REDIS_ADDR
  ..   
────────────────────────────────────────



kubernetes-manifests6_15.yaml (kubernetes)
==========================================
Tests: 126 (SUCCESSES: 97, FAILURES: 29)
Failures: 29 (UNKNOWN: 0, LOW: 17, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Deployment 'loadgenerator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend-check' of 'deployment' 'loadgenerator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'deployment' 'loadgenerator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loadgenerator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:34-47
────────────────────────────────────────
  34 ┌       - name: main
  35 │         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.2.4
  36 │         env:
  37 │         - name: FRONTEND_ADDR
  38 │           value: frontend:80
  39 │         - name: USERS
  40 │           value: '10'
  41 │         resources:
  42 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loadgenerator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:21-32
────────────────────────────────────────
  21 ┌       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  26 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  27 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  28 │         name: frontend-check
  29 └         image: busybox:latest
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loadgenerator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_15.yaml:17-47
────────────────────────────────────────
  17 ┌       serviceAccountName: default
  18 │       terminationGracePeriodSeconds: 5
  19 │       restartPolicy: Always
  20 │       initContainers:
  21 │       - command:
  22 │         - /bin/sh
  23 │         - -exc
  24 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  25 └           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  ..   
────────────────────────────────────────



kubernetes-manifests6_16.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 │         env:
  23 │         - name: PORT
  24 │           value: '7000'
  25 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_16.yaml:14-41
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.4
  19 │         ports:
  20 │         - name: grpc
  21 │           containerPort: 7000
  22 └         env:
  ..   
────────────────────────────────────────



kubernetes-manifests6_18.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:16-40
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 │           value: '50051'
  23 │         readinessProbe:
  24 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_18.yaml:14-40
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 50051
  20 │         env:
  21 │         - name: PORT
  22 └           value: '50051'
  ..   
────────────────────────────────────────



kubernetes-manifests6_2.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:16-51
────────────────────────────────────────
  16 ┌       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 │             command:
  23 │             - /bin/grpc_health_probe
  24 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_2.yaml:14-51
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       containers:
  16 │       - name: server
  17 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.4
  18 │         ports:
  19 │         - containerPort: 5050
  20 │         readinessProbe:
  21 │           exec:
  22 └             command:
  ..   
────────────────────────────────────────



kubernetes-manifests6_20.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_20.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 └             port: 6379
  ..   
────────────────────────────────────────



kubernetes-manifests6_22.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_22.yaml:14-44
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests6_4.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:17-50
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           periodSeconds: 5
  23 │           exec:
  24 │             command:
  25 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_4.yaml:14-50
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 └           periodSeconds: 5
  ..   
────────────────────────────────────────



kubernetes-manifests6_6.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:18-61
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 │           httpGet:
  25 │             path: /_healthz
  26 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_6.yaml:16-61
────────────────────────────────────────
  16 ┌       serviceAccountName: default
  17 │       containers:
  18 │       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.4
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         readinessProbe:
  23 │           initialDelaySeconds: 10
  24 └           httpGet:
  ..   
────────────────────────────────────────



kubernetes-manifests6_9.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 │         - name: PORT
  23 │           value: '50051'
  24 │         readinessProbe:
  25 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests6_9.yaml:14-40
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.4
  19 │         ports:
  20 │         - containerPort: 50051
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



kubernetes-manifests7.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-dev-frontend' of Deployment 'kuberada-python' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-dev-frontend' of Deployment 'kuberada-python' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-dev-frontend' of 'deployment' 'kuberada-python' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-dev-frontend' of Deployment 'kuberada-python' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-dev-frontend' of Deployment 'kuberada-python' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'python-dev-frontend' of Deployment 'kuberada-python' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-dev-frontend' of Deployment 'kuberada-python' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-dev-frontend' of Deployment 'kuberada-python' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-dev-frontend' of Deployment 'kuberada-python' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-dev-frontend' of Deployment 'kuberada-python' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-dev-frontend' of Deployment 'kuberada-python' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-dev-frontend' of Deployment 'kuberada-python' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-dev-frontend" of deployment "kuberada-python" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment kuberada-python in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: kuberada-python
   5 │   labels:
   6 └     app: python-dev
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kuberada-python in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kuberada-python in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-manifests7.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python-dev-frontend in deployment kuberada-python (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-manifests7.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-dev-frontend
  19 │         image: ghcr.io/colossus06/frontend:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────



kubernetes-manifests8.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests8_11.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests8_13.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests8_15.yaml (kubernetes)
==========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests8_16.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests8_18.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests8_2.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests8_20.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests8_22.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests8_4.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests8_6.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests8_9.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests8_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests8_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests8_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests8_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests8_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests9.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────



kubernetes-manifests9_11.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests9_13.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests9_15.yaml (kubernetes)
==========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests9_16.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests9_18.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests9_2.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests9_20.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests9_22.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests9_4.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests9_6.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests9_9.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests9_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests9_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests9_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests9_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests9_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-manifests_11.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_11.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_11.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────



kubernetes-manifests_13.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_13.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_13.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



kubernetes-manifests_15.yaml (kubernetes)
=========================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-manifests_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-manifests_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-manifests_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-manifests_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-manifests_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_15.yaml:26-44
────────────────────────────────────────
  26 ┌       - command:
  27 │         - /bin/sh
  28 │         - -exc
  29 │         - "echo \"Init container pinging frontend: ${FRONTEND_ADDR}...\"\nSTATUSCODE=$(wget\
  30 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  31 │           \ $2}')\nif test $STATUSCODE -ne 200; then\n    echo \"Error: Could not\
  32 │           \ reach frontend - Status code: ${STATUSCODE}\"\n    exit 1\nfi\n"
  33 │         name: frontend-check
  34 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_15.yaml:46-66
────────────────────────────────────────
  46 ┌       - name: main
  47 │         securityContext:
  48 │           allowPrivilegeEscalation: false
  49 │           capabilities:
  50 │             drop:
  51 │             - ALL
  52 │           privileged: false
  53 │           readOnlyRootFilesystem: true
  54 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_15.yaml:4
────────────────────────────────────────
   4 [   name: loadgenerator
────────────────────────────────────────



kubernetes-manifests_16.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_16.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_16.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────



kubernetes-manifests_18.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_18.yaml:21-50
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_18.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────



kubernetes-manifests_2.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_2.yaml:21-59
────────────────────────────────────────
  21 ┌       - name: server
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - ALL
  27 │           privileged: false
  28 │           readOnlyRootFilesystem: true
  29 └         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_2.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────



kubernetes-manifests_20.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_20.yaml:20-48
────────────────────────────────────────
  20 ┌       - name: redis
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           capabilities:
  24 │             drop:
  25 │             - ALL
  26 │           privileged: false
  27 │           readOnlyRootFilesystem: true
  28 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────



kubernetes-manifests_22.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_22.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_22.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



kubernetes-manifests_4.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_4.yaml:22-54
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_4.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────



kubernetes-manifests_6.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_6.yaml:23-75
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_6.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────



kubernetes-manifests_9.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-manifests_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-manifests_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-manifests_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-manifests_9.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-manifests_9.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────



kubernetes-ocean.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ocean-example' of 'deployment' 'ocean-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ocean-example" of deployment "ocean-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ocean-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-ocean.yaml:4-6
────────────────────────────────────────
   4 ┌   name: ocean-deployment
   5 │   labels:
   6 └     app: oceanLabel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ocean-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-ocean.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ocean-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-ocean.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



kubernetes-ocean1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ocean-example' of 'deployment' 'ocean-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ocean-example' of Deployment 'ocean-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ocean-example" of deployment "ocean-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ocean-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-ocean1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: ocean-deployment
   5 │   labels:
   6 └     app: oceanLabel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ocean-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-ocean1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ocean-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-ocean1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: ocean-example
  19 │         image: ocean-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



kubernetes-operator_3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-operator' of 'statefulset' 'kubernetes-operator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-operator' of StatefulSet 'kubernetes-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-operator" of statefulset "kubernetes-operator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset kubernetes-operator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-operator_3.yaml:4-5
────────────────────────────────────────
   4 ┌   name: kubernetes-operator
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubernetes-operator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset kubernetes-operator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-operator_3.yaml:17-28
────────────────────────────────────────
  17 ┌       serviceAccountName: kubernetes-operator
  18 │       containers:
  19 │       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 │         imagePullPolicy: Always
  22 │       tolerations:
  23 │       - key: node-role.kubernetes.io/master
  24 │         operator: Exists
  25 └         effect: NoSchedule
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-operator in statefulset kubernetes-operator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-operator_3.yaml:19-21
────────────────────────────────────────
  19 ┌       - name: kubernetes-operator
  20 │         image: 192.168.16.70:5000/test:0.0.0.1
  21 └         imagePullPolicy: Always
────────────────────────────────────────



kubernetes-skooner.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'skooner' of Deployment 'skooner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'skooner' of Deployment 'skooner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'skooner' of 'deployment' 'skooner' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'skooner' of Deployment 'skooner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'skooner' of Deployment 'skooner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'skooner' of Deployment 'skooner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'skooner' of Deployment 'skooner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'skooner' of Deployment 'skooner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'skooner' of Deployment 'skooner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'skooner' of Deployment 'skooner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'skooner' of Deployment 'skooner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'skooner' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-skooner.yaml:7-29
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       k8s-app: skooner
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         k8s-app: skooner
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "skooner" of deployment "skooner" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container skooner in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment skooner in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-skooner.yaml:16-29
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container skooner in deployment skooner (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes-skooner.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: skooner
  18 │         image: ghcr.io/skooner-k8s/skooner:stable
  19 │         ports:
  20 │         - containerPort: 4654
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             scheme: HTTP
  24 │             path: /
  25 └             port: 4654
  ..   
────────────────────────────────────────



kubernetes-skooner_1.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'skooner' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kubernetes-skooner_1.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 80
   9 │     targetPort: 4654
  10 │   selector:
  11 └     k8s-app: skooner
────────────────────────────────────────



kubernetes-test.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'trading-app-ui' of Deployment 'trading-app-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'trading-app-ui' of Deployment 'trading-app-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'trading-app-ui' of 'deployment' 'trading-app-ui' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'trading-app-ui' of Deployment 'trading-app-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'trading-app-ui' of Deployment 'trading-app-ui' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'trading-app-ui' of Deployment 'trading-app-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'trading-app-ui' of Deployment 'trading-app-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'trading-app-ui' of Deployment 'trading-app-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'trading-app-ui' of Deployment 'trading-app-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'trading-app-ui' of Deployment 'trading-app-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "trading-app-ui" of deployment "trading-app-ui" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment trading-app-ui in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-test.yaml:4
────────────────────────────────────────
   4 [   name: trading-app-ui
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container trading-app-ui in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │           limits:
  27 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment trading-app-ui in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test.yaml:15-27
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: trading-app-ui
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trading-app-ui:latest
  20 │         ports:
  21 │         - containerPort: 5173
  22 │           name: trading-app-ui
  23 └         resources:
  ..   
────────────────────────────────────────



kubernetes-test_11.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'market-data' of Deployment 'market-data' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'market-data' of Deployment 'market-data' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'market-data' of 'deployment' 'market-data' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'market-data' of Deployment 'market-data' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'market-data' of Deployment 'market-data' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'market-data' of Deployment 'market-data' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'market-data' of Deployment 'market-data' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'market-data' of Deployment 'market-data' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'market-data' of Deployment 'market-data' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'market-data' of Deployment 'market-data' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'market-data' of Deployment 'market-data' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'market-data' of Deployment 'market-data' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "market-data" of deployment "market-data" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment market-data in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-test_11.yaml:4
────────────────────────────────────────
   4 [   name: market-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container market-data in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test_11.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: market-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment market-data in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test_11.yaml:15-42
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: market-data
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/market-data-service:latest
  20 │         ports:
  21 │         - containerPort: 8444
  22 │         env:
  23 └         - name: DB_HOST
  ..   
────────────────────────────────────────



kubernetes-test_13.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'market-db' of Deployment 'market-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'market-db' of Deployment 'market-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'market-db' of 'deployment' 'market-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'market-db' of Deployment 'market-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'market-db' of Deployment 'market-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'market-db' of Deployment 'market-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'market-db' of Deployment 'market-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'market-db' of Deployment 'market-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'market-db' of Deployment 'market-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'market-db' of Deployment 'market-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'market-db' of Deployment 'market-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'market-db' of Deployment 'market-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "market-db" of deployment "market-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment market-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-test_13.yaml:4
────────────────────────────────────────
   4 [   name: market-db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container market-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test_13.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: market-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment market-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test_13.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: market-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────



kubernetes-test_2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'trade-submission' of Deployment 'trade-submission' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'trade-submission' of Deployment 'trade-submission' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'trade-submission' of 'deployment' 'trade-submission' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'trade-submission' of Deployment 'trade-submission' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'trade-submission' of Deployment 'trade-submission' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'trade-submission' of Deployment 'trade-submission' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'trade-submission' of Deployment 'trade-submission' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'trade-submission' of Deployment 'trade-submission' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'trade-submission' of Deployment 'trade-submission' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'trade-submission' of Deployment 'trade-submission' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'trade-submission' of Deployment 'trade-submission' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'trade-submission' of Deployment 'trade-submission' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "trade-submission" of deployment "trade-submission" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment trade-submission in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-test_2.yaml:4
────────────────────────────────────────
   4 [   name: trade-submission
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container trade-submission in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test_2.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment trade-submission in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test_2.yaml:15-42
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: trade-submission
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-submission-service:latest
  20 │         ports:
  21 │         - containerPort: 8440
  22 │         env:
  23 └         - name: DB_HOST
  ..   
────────────────────────────────────────



kubernetes-test_4.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'trade-view' of Deployment 'trade-view' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'trade-view' of Deployment 'trade-view' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'trade-view' of 'deployment' 'trade-view' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'trade-view' of Deployment 'trade-view' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'trade-view' of Deployment 'trade-view' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'trade-view' of Deployment 'trade-view' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'trade-view' of Deployment 'trade-view' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'trade-view' of Deployment 'trade-view' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'trade-view' of Deployment 'trade-view' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'trade-view' of Deployment 'trade-view' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'trade-view' of Deployment 'trade-view' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'trade-view' of Deployment 'trade-view' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "trade-view" of deployment "trade-view" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment trade-view in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-test_4.yaml:4
────────────────────────────────────────
   4 [   name: trade-view
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container trade-view in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test_4.yaml:18-42
────────────────────────────────────────
  18 ┌       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: trade-db-conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment trade-view in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test_4.yaml:15-42
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: trade-view
  19 │         image: mycontainerregistrymstest3.azurecr.io/samples/trade-view-service:latest
  20 │         ports:
  21 │         - containerPort: 8442
  22 │         env:
  23 └         - name: DB_HOST
  ..   
────────────────────────────────────────



kubernetes-test_6.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'trade-db' of Deployment 'trade-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'trade-db' of Deployment 'trade-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'trade-db' of 'deployment' 'trade-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'trade-db' of Deployment 'trade-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'trade-db' of Deployment 'trade-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'trade-db' of Deployment 'trade-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'trade-db' of Deployment 'trade-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'trade-db' of Deployment 'trade-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'trade-db' of Deployment 'trade-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'trade-db' of Deployment 'trade-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'trade-db' of Deployment 'trade-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'trade-db' of Deployment 'trade-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "trade-db" of deployment "trade-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment trade-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-test_6.yaml:4
────────────────────────────────────────
   4 [   name: trade-db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container trade-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test_6.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: trade-db-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment trade-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-test_6.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: trade-db
  19 │         image: postgres
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────



kubernetes-whale.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'whale-example' of Deployment 'whale-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'whale-example' of 'deployment' 'whale-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'whale-example' of Deployment 'whale-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'whale-example' of Deployment 'whale-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "whale-example" of deployment "whale-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment whale-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-whale.yaml:4-6
────────────────────────────────────────
   4 ┌   name: whale-deployment
   5 │   labels:
   6 └     app: whaleLabel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container whale-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-whale.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment whale-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-whale.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



kubernetes-whale1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'whale-example' of Deployment 'whale-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'whale-example' of 'deployment' 'whale-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'whale-example' of Deployment 'whale-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'whale-example' of Deployment 'whale-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'whale-example' of Deployment 'whale-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "whale-example" of deployment "whale-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment whale-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes-whale1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: whale-deployment
   5 │   labels:
   6 └     app: whaleLabel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container whale-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-whale1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment whale-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes-whale1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: whale-example
  19 │         image: whale-example:1.0
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



kubernetes1.yaml (kubernetes)
=============================
Tests: 127 (SUCCESSES: 96, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 19, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dind' of Deployment 'github-runner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dind' of Deployment 'github-runner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'github-runner' of Deployment 'github-runner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dind' of 'deployment' 'github-runner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'github-runner' of 'deployment' 'github-runner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dind' of Deployment 'github-runner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dind' of Deployment 'github-runner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'dind' of Deployment 'github-runner' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dind' of Deployment 'github-runner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dind" of deployment "github-runner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "github-runner" of deployment "github-runner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes1.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment github-runner in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: github-runner
   5 │   labels:
   6 └     app: github-runner
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container github-runner in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment github-runner in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes1.yaml:17-62
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: github-secret
  ..   
────────────────────────────────────────



kubernetes10_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mutating-webhook' of 'deployment' 'validating-webhooks' in 'webhooks' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mutating-webhook" of deployment "validating-webhooks" in "webhooks" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container validating-webhooks in webhooks namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes10_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment validating-webhooks in webhooks namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes10_2.yaml:16-30
────────────────────────────────────────
  16 ┌       serviceAccountName: webhook-sa
  17 │       containers:
  18 │       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 └         - name: webhook-certs
  ..   
────────────────────────────────────────



kubernetes11.yaml (kubernetes)
==============================
Tests: 127 (SUCCESSES: 95, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 19, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dind' of Deployment 'github-runner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dind' of Deployment 'github-runner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'github-runner' of Deployment 'github-runner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dind' of 'deployment' 'github-runner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'github-runner' of 'deployment' 'github-runner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dind' of Deployment 'github-runner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dind' of Deployment 'github-runner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'dind' of Deployment 'github-runner' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dind' of Deployment 'github-runner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dind" of deployment "github-runner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "github-runner" of deployment "github-runner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes11.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment github-runner in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes11.yaml:4-6
────────────────────────────────────────
   4 ┌   name: github-runner
   5 │   labels:
   6 └     app: github-runner
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container github-runner in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment github-runner in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes11.yaml:17-61
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 └                   key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container github-runner in deployment github-runner (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes11.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────



kubernetes12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'say' of Deployment 'say-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'say' of Deployment 'say-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'say' of 'deployment' 'say-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'say' of Deployment 'say-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'say' of Deployment 'say-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'say' of Deployment 'say-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'say' of Deployment 'say-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'say' of Deployment 'say-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'say' of Deployment 'say-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'say' of Deployment 'say-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'say' of Deployment 'say-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'say' of Deployment 'say-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "say" of deployment "say-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment say-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes12.yaml:4
────────────────────────────────────────
   4 [   name: say-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container say-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes12.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment say-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes12.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: say
  17 │         image: gcr.io/text-to-speech-408813/say
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────



kubernetes19.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'docker' of Deployment 'teacher-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'docker' of Deployment 'teacher-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'docker' of 'deployment' 'teacher-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'docker' of Deployment 'teacher-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'docker' of Deployment 'teacher-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'docker' of Deployment 'teacher-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'docker' of Deployment 'teacher-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'docker' of Deployment 'teacher-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'docker' of Deployment 'teacher-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'docker' of Deployment 'teacher-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'docker' of Deployment 'teacher-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "docker" of deployment "teacher-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment teacher-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes19.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: teacher-app
   7 └   name: teacher-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container teacher-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment teacher-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes19.yaml:20-24
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container docker in deployment teacher-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes19.yaml:21-24
────────────────────────────────────────
  21 ┌       - image: registry.gitlab.com/vasiaplaton/teacher/docker:main
  22 │         name: docker
  23 │         resources: {}
  24 └         imagePullPolicy: Always
────────────────────────────────────────



kubernetes25.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'videopredict-deploy' of 'deployment' 'videopredict-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'videopredict-deploy' of Deployment 'videopredict-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "videopredict-deploy" of deployment "videopredict-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment videopredict-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes25.yaml:4
────────────────────────────────────────
   4 [   name: videopredict-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container videopredict-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment videopredict-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes25.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container videopredict-deploy in deployment videopredict-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes25.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: videopredict-deploy
  17 │         imagePullPolicy: Never
  18 │         image: martinetoering/videopredict_deploy:latest
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────



kubernetes28.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kafka-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"server.properties"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



kubernetes28_12.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'spring-boot-kafka' of Deployment 'spring-boot-kafka-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'spring-boot-kafka' of Deployment 'spring-boot-kafka-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'spring-boot-kafka' of 'deployment' 'spring-boot-kafka-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'spring-boot-kafka' of Deployment 'spring-boot-kafka-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'spring-boot-kafka' of Deployment 'spring-boot-kafka-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'spring-boot-kafka' of Deployment 'spring-boot-kafka-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'spring-boot-kafka' of Deployment 'spring-boot-kafka-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'spring-boot-kafka' of Deployment 'spring-boot-kafka-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'spring-boot-kafka' of Deployment 'spring-boot-kafka-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'spring-boot-kafka' of Deployment 'spring-boot-kafka-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'spring-boot-kafka' of Deployment 'spring-boot-kafka-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "spring-boot-kafka" of deployment "spring-boot-kafka-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment spring-boot-kafka-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes28_12.yaml:4
────────────────────────────────────────
   4 [   name: spring-boot-kafka-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container spring-boot-kafka-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment spring-boot-kafka-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_12.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container spring-boot-kafka in deployment spring-boot-kafka-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes28_12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: spring-boot-kafka
  17 │         image: sasabistrovic/spring-boot-kafka:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: SPRING_KAFKA_URL
  22 │           value: kafka-service:9092
  23 │         - name: SPRING_KAFKA_TOPIC
  24 └           value: item-topic
────────────────────────────────────────



kubernetes28_16.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'rabbitmq-config' in 'default' namespace stores secrets in key(s) or value(s) '{"default_pass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



kubernetes28_17.yaml (kubernetes)
=================================
Tests: 146 (SUCCESSES: 96, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 31, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create-log-dir' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create-log-dir' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create-log-dir' of 'deployment' 'rabbitmq' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'permissions-to-rabbitmq-data' of 'deployment' 'rabbitmq' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq' of 'deployment' 'rabbitmq' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create-log-dir' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'create-log-dir' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'create-log-dir' of Deployment 'rabbitmq' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create-log-dir' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create-log-dir' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create-log-dir' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create-log-dir' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create-log-dir' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create-log-dir' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'permissions-to-rabbitmq-data' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create-log-dir" of deployment "rabbitmq" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "permissions-to-rabbitmq-data" of deployment "rabbitmq" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq" of deployment "rabbitmq" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment rabbitmq in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes28_17.yaml:4
────────────────────────────────────────
   4 [   name: rabbitmq
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_17.yaml:60-68
────────────────────────────────────────
  60 ┌       - name: create-log-dir
  61 │         image: busybox
  62 │         command:
  63 │         - sh
  64 │         - -c
  65 │         - mkdir -p /bitnami/rabbitmq/log
  66 │         volumeMounts:
  67 │         - name: rabbitmq-data
  68 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_17.yaml:51-59
────────────────────────────────────────
  51 ┌       - name: permissions-to-rabbitmq-data
  52 │         image: busybox
  53 │         command:
  54 │         - sh
  55 │         - -c
  56 │         - chmod 777 /bitnami/rabbitmq
  57 │         volumeMounts:
  58 │         - name: rabbitmq-data
  59 └           mountPath: /bitnami/rabbitmq
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_17.yaml:15-68
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 └         - name: RABBITMQ_DEFAULT_PASS
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq in deployment rabbitmq (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes28_17.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: rabbitmq
  17 │         image: sasabistrovic/docker-data-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 5672
  20 │         env:
  21 │         - name: RABBITMQ_DEFAULT_USER
  22 │           value: admin
  23 │         - name: RABBITMQ_DEFAULT_PASS
  24 └           value: admin
  ..   
────────────────────────────────────────



kubernetes28_19.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'spring-boot-rabbitmq' of Deployment 'spring-boot-rabbitmq-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'spring-boot-rabbitmq' of Deployment 'spring-boot-rabbitmq-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'spring-boot-rabbitmq' of 'deployment' 'spring-boot-rabbitmq-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'spring-boot-rabbitmq' of Deployment 'spring-boot-rabbitmq-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'spring-boot-rabbitmq' of Deployment 'spring-boot-rabbitmq-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'spring-boot-rabbitmq' of Deployment 'spring-boot-rabbitmq-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'spring-boot-rabbitmq' of Deployment 'spring-boot-rabbitmq-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'spring-boot-rabbitmq' of Deployment 'spring-boot-rabbitmq-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'spring-boot-rabbitmq' of Deployment 'spring-boot-rabbitmq-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'spring-boot-rabbitmq' of Deployment 'spring-boot-rabbitmq-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'spring-boot-rabbitmq' of Deployment 'spring-boot-rabbitmq-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "spring-boot-rabbitmq" of deployment "spring-boot-rabbitmq-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment spring-boot-rabbitmq-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes28_19.yaml:4
────────────────────────────────────────
   4 [   name: spring-boot-rabbitmq-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container spring-boot-rabbitmq-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment spring-boot-rabbitmq-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_19.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 └         - name: SPRING_RABBITMQ_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container spring-boot-rabbitmq in deployment spring-boot-rabbitmq-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes28_19.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-rabbitmq
  17 │         image: sasabistrovic/spring-boot-rabbitmq:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: SPRING_RABBITMQ_HOST
  22 │           value: rabbitmq-service
  23 │         - name: SPRING_RABBITMQ_PORT
  24 └           value: '5672'
  ..   
────────────────────────────────────────



kubernetes28_21.yaml (kubernetes)
=================================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'fix-permissions-data' of Deployment 'elasticsearch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fix-permissions-data' of Deployment 'elasticsearch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'elasticsearch' of 'deployment' 'elasticsearch' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fix-permissions-data' of 'deployment' 'elasticsearch' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fix-permissions-data' of Deployment 'elasticsearch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fix-permissions-data' of Deployment 'elasticsearch' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'fix-permissions-data' of Deployment 'elasticsearch' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fix-permissions-data' of Deployment 'elasticsearch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fix-permissions-data' of Deployment 'elasticsearch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fix-permissions-data' of Deployment 'elasticsearch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fix-permissions-data' of Deployment 'elasticsearch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fix-permissions-data' of Deployment 'elasticsearch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fix-permissions-data' of Deployment 'elasticsearch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "elasticsearch" of deployment "elasticsearch" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fix-permissions-data" of deployment "elasticsearch" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment elasticsearch in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes28_21.yaml:4
────────────────────────────────────────
   4 [   name: elasticsearch
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container elasticsearch in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container elasticsearch in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_21.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 │         - name: elasticsearch-data
  24 └           mountPath: /usr/share/elasticsearch/data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment elasticsearch in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_21.yaml:15-43
────────────────────────────────────────
  15 ┌       initContainers:
  16 │       - name: fix-permissions-data
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1000:1000 /usr/share/elasticsearch/data
  22 │         volumeMounts:
  23 └         - name: elasticsearch-data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container elasticsearch in deployment elasticsearch (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes28_21.yaml:26-39
────────────────────────────────────────
  26 ┌       - name: elasticsearch
  27 │         image: sasabistrovic/docker-data-elasticsearch:1.0
  28 │         ports:
  29 │         - containerPort: 9200
  30 │         volumeMounts:
  31 │         - name: elasticsearch-data
  32 │           mountPath: /usr/share/elasticsearch/data
  33 │         env:
  34 └         - name: discovery.type
  ..   
────────────────────────────────────────



kubernetes28_24.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'spring-boot-elasticsearch' of Deployment 'spring-boot-elasticsearch-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'spring-boot-elasticsearch' of Deployment 'spring-boot-elasticsearch-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'spring-boot-elasticsearch' of 'deployment' 'spring-boot-elasticsearch-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'spring-boot-elasticsearch' of Deployment 'spring-boot-elasticsearch-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'spring-boot-elasticsearch' of Deployment 'spring-boot-elasticsearch-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'spring-boot-elasticsearch' of Deployment 'spring-boot-elasticsearch-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'spring-boot-elasticsearch' of Deployment 'spring-boot-elasticsearch-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'spring-boot-elasticsearch' of Deployment 'spring-boot-elasticsearch-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'spring-boot-elasticsearch' of Deployment 'spring-boot-elasticsearch-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'spring-boot-elasticsearch' of Deployment 'spring-boot-elasticsearch-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'spring-boot-elasticsearch' of Deployment 'spring-boot-elasticsearch-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "spring-boot-elasticsearch" of deployment "spring-boot-elasticsearch-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment spring-boot-elasticsearch-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes28_24.yaml:4
────────────────────────────────────────
   4 [   name: spring-boot-elasticsearch-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container spring-boot-elasticsearch-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment spring-boot-elasticsearch-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_24.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container spring-boot-elasticsearch in deployment spring-boot-elasticsearch-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes28_24.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: spring-boot-elasticsearch
  17 │         image: sasabistrovic/spring-boot-elasticsearch:1.0
  18 │         ports:
  19 │         - containerPort: 8082
  20 │         env:
  21 │         - name: SPRING_ELASTICSEARCH_URL
  22 └           value: elasticsearch-service:9200
────────────────────────────────────────



kubernetes28_29.yaml (kubernetes)
=================================
Tests: 146 (SUCCESSES: 96, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 31, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'permissions-fix-data' of Deployment 'redis-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'permissions-fix-log' of Deployment 'redis-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'permissions-fix-data' of Deployment 'redis-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'permissions-fix-log' of Deployment 'redis-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'permissions-fix-data' of 'deployment' 'redis-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'permissions-fix-log' of 'deployment' 'redis-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'permissions-fix-data' of Deployment 'redis-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'permissions-fix-log' of Deployment 'redis-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'redis-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'permissions-fix-data' of Deployment 'redis-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'permissions-fix-log' of Deployment 'redis-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'permissions-fix-data' of Deployment 'redis-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'permissions-fix-log' of Deployment 'redis-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'permissions-fix-data' of Deployment 'redis-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'permissions-fix-log' of Deployment 'redis-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'permissions-fix-data' of Deployment 'redis-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'permissions-fix-log' of Deployment 'redis-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'redis-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'permissions-fix-data' of Deployment 'redis-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'permissions-fix-log' of Deployment 'redis-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'redis-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'permissions-fix-data' of Deployment 'redis-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'permissions-fix-log' of Deployment 'redis-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'redis-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'permissions-fix-data' of Deployment 'redis-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'permissions-fix-log' of Deployment 'redis-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'permissions-fix-data' of Deployment 'redis-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'permissions-fix-log' of Deployment 'redis-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "permissions-fix-data" of deployment "redis-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "permissions-fix-log" of deployment "redis-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes28_29.yaml:4
────────────────────────────────────────
   4 [   name: redis-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_29.yaml:54-62
────────────────────────────────────────
  54 ┌       - name: permissions-fix-log
  55 │         image: busybox
  56 │         command:
  57 │         - chmod
  58 │         - '777'
  59 │         - /bitnami/redis/logs
  60 │         volumeMounts:
  61 │         - name: redis-logs
  62 └           mountPath: /bitnami/redis/logs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_29.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: permissions-fix-data
  46 │         image: busybox
  47 │         command:
  48 │         - chmod
  49 │         - '777'
  50 │         - /bitnami/redis/data
  51 │         volumeMounts:
  52 │         - name: redis-data
  53 └           mountPath: /bitnami/redis/data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_29.yaml:15-62
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container redis in deployment redis-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes28_29.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: redis
  17 │         image: sasabistrovic/docker-data-redis:1.0
  18 │         env:
  19 │         - name: ALLOW_EMPTY_PASSWORD
  20 │           value: 'yes'
  21 │         ports:
  22 │         - containerPort: 6379
  23 │         volumeMounts:
  24 └         - name: redis-data
  ..   
────────────────────────────────────────



kubernetes28_31.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'spring-boot-redis' of Deployment 'spring-boot-redis-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'spring-boot-redis' of Deployment 'spring-boot-redis-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'spring-boot-redis' of 'deployment' 'spring-boot-redis-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'spring-boot-redis' of Deployment 'spring-boot-redis-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'spring-boot-redis' of Deployment 'spring-boot-redis-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'spring-boot-redis' of Deployment 'spring-boot-redis-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'spring-boot-redis' of Deployment 'spring-boot-redis-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'spring-boot-redis' of Deployment 'spring-boot-redis-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'spring-boot-redis' of Deployment 'spring-boot-redis-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'spring-boot-redis' of Deployment 'spring-boot-redis-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'spring-boot-redis' of Deployment 'spring-boot-redis-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "spring-boot-redis" of deployment "spring-boot-redis-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment spring-boot-redis-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes28_31.yaml:4
────────────────────────────────────────
   4 [   name: spring-boot-redis-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container spring-boot-redis-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment spring-boot-redis-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_31.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 └         - name: SPRING_REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container spring-boot-redis in deployment spring-boot-redis-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes28_31.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: spring-boot-redis
  17 │         image: sasabistrovic/spring-boot-redis:1.0
  18 │         ports:
  19 │         - containerPort: 8083
  20 │         env:
  21 │         - name: SPRING_REDIS_HOST
  22 │           value: redis-service
  23 │         - name: SPRING_REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────



kubernetes28_4.yaml (kubernetes)
================================
Tests: 178 (SUCCESSES: 96, FAILURES: 82)
Failures: 82 (UNKNOWN: 0, LOW: 51, MEDIUM: 20, HIGH: 11, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'delete-lost-found' of Deployment 'kafka-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kafka' of Deployment 'kafka-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'delete-lost-found' of Deployment 'kafka-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kafka' of Deployment 'kafka-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'delete-lost-found' of 'deployment' 'kafka-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fix-permissions-kafka' of 'deployment' 'kafka-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fix-permissions-zookeeper-data' of 'deployment' 'kafka-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fix-permissions-zookeeper-log' of 'deployment' 'kafka-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kafka' of 'deployment' 'kafka-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'delete-lost-found' of Deployment 'kafka-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kafka' of Deployment 'kafka-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'delete-lost-found' of Deployment 'kafka-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kafka' of Deployment 'kafka-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'delete-lost-found' of Deployment 'kafka-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'delete-lost-found' of Deployment 'kafka-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kafka' of Deployment 'kafka-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'delete-lost-found' of Deployment 'kafka-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kafka' of Deployment 'kafka-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'delete-lost-found' of Deployment 'kafka-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kafka' of Deployment 'kafka-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'delete-lost-found' of Deployment 'kafka-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kafka' of Deployment 'kafka-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'delete-lost-found' of Deployment 'kafka-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kafka' of Deployment 'kafka-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'delete-lost-found' of Deployment 'kafka-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fix-permissions-kafka' of Deployment 'kafka-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fix-permissions-zookeeper-data' of Deployment 'kafka-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fix-permissions-zookeeper-log' of Deployment 'kafka-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kafka' of Deployment 'kafka-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "delete-lost-found" of deployment "kafka-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fix-permissions-kafka" of deployment "kafka-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fix-permissions-zookeeper-data" of deployment "kafka-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fix-permissions-zookeeper-log" of deployment "kafka-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kafka" of deployment "kafka-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment kafka-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes28_4.yaml:4
────────────────────────────────────────
   4 [   name: kafka-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kafka-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_4.yaml:34-42
────────────────────────────────────────
  34 ┌       - name: fix-permissions-zookeeper-data
  35 │         image: busybox
  36 │         command:
  37 │         - sh
  38 │         - -c
  39 │         - chown -R 1001:1001 /bitnami/zookeeper/data
  40 │         volumeMounts:
  41 │         - name: zookeeper-kafka-data
  42 └           mountPath: /bitnami/zookeeper/data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kafka-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_4.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 │         - name: kafka-logs
  24 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kafka-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_4.yaml:25-33
────────────────────────────────────────
  25 ┌       - name: fix-permissions-zookeeper-log
  26 │         image: busybox
  27 │         command:
  28 │         - sh
  29 │         - -c
  30 │         - chown -R 1001:1001 /bitnami/zookeeper/logs
  31 │         volumeMounts:
  32 │         - name: zookeeper-kafka-logs
  33 └           mountPath: /bitnami/zookeeper/logs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kafka-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_4.yaml:43-51
────────────────────────────────────────
  43 ┌       - name: delete-lost-found
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - rm -rf /bitnami/kafka/logs/lost+found
  49 │         volumeMounts:
  50 │         - name: kafka-logs
  51 └           mountPath: /bitnami/kafka/logs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kafka-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kafka-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_4.yaml:15-152
────────────────────────────────────────
  15 ┌       initContainers:
  16 │       - name: fix-permissions-kafka
  17 │         image: busybox
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - chown -R 1001:1001 /bitnami/kafka/logs
  22 │         volumeMounts:
  23 └         - name: kafka-logs
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kafka in deployment kafka-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes28_4.yaml:53-125
────────────────────────────────────────
  53 ┌       - name: kafka
  54 │         image: sasabistrovic/docker-data-kafka:1.0
  55 │         env:
  56 │         - name: KAFKA_LISTENERS
  57 │           value: PLAINTEXT://:9092
  58 │         - name: KAFKA_ADVERTISED_LISTENERS
  59 │           value: PLAINTEXT://kafka-service:9092
  60 │         - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  61 └           value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  ..   
────────────────────────────────────────



kubernetes28_5.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'zookeeper' of StatefulSet 'zk-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'zookeeper' of StatefulSet 'zk-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'zookeeper' of 'statefulset' 'zk-statefulset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'zookeeper' of StatefulSet 'zk-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'zookeeper' of StatefulSet 'zk-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'zookeeper' of StatefulSet 'zk-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'zookeeper' of StatefulSet 'zk-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'zookeeper' of StatefulSet 'zk-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'zookeeper' of StatefulSet 'zk-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'zookeeper' of StatefulSet 'zk-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'zookeeper' of StatefulSet 'zk-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "zookeeper" of statefulset "zk-statefulset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset zk-statefulset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes28_5.yaml:4
────────────────────────────────────────
   4 [   name: zk-statefulset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container zk-statefulset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset zk-statefulset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes28_5.yaml:16-49
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 └         - containerPort: 3888
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container zookeeper in statefulset zk-statefulset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes28_5.yaml:17-42
────────────────────────────────────────
  17 ┌       - name: zookeeper
  18 │         image: sasabistrovic/docker-data-zookeeper:1.0
  19 │         ports:
  20 │         - containerPort: 2181
  21 │           name: client
  22 │         - containerPort: 2888
  23 │           name: peer
  24 │         - containerPort: 3888
  25 └           name: leader-election
  ..   
────────────────────────────────────────



kubernetes29_14.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 110, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'dynatrace-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 kubernetes29_14.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - apps
  30 │   resources:
  31 │   - statefulsets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'dynatrace-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 kubernetes29_14.yaml:39-49
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - apps
  41 │   resources:
  42 │   - daemonsets
  43 │   verbs:
  44 │   - get
  45 │   - list
  46 │   - watch
  47 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'dynatrace-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 kubernetes29_14.yaml:76-85
────────────────────────────────────────
  76 ┌ - apiGroups:
  77 │   - ''
  78 │   resources:
  79 │   - pods
  80 │   verbs:
  81 │   - get
  82 │   - list
  83 │   - watch
  84 │   - delete
  85 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'dynatrace-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes29_14.yaml:65-75
────────────────────────────────────────
  65 ┌ - apiGroups:
  66 │   - ''
  67 │   resources:
  68 │   - configmaps
  69 │   verbs:
  70 │   - get
  71 │   - list
  72 │   - watch
  73 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'dynatrace-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 kubernetes29_14.yaml:103-113
────────────────────────────────────────
 103 ┌ - apiGroups:
 104 │   - ''
 105 │   resources:
 106 │   - services
 107 │   verbs:
 108 │   - create
 109 │   - update
 110 │   - delete
 111 └   - get
 ...   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'dynatrace-operator' shouldn't have access to manage secrets in namespace 'dynatrace'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes29_14.yaml:86-95
────────────────────────────────────────
  86 ┌ - apiGroups:
  87 │   - ''
  88 │   resources:
  89 │   - secrets
  90 │   verbs:
  91 │   - get
  92 │   - list
  93 │   - watch
  94 │   - create
  95 └   - update
────────────────────────────────────────



kubernetes29_15.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'dynatrace-webhook' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes29_15.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - services
  15 │   - configmaps
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'dynatrace-webhook' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 kubernetes29_15.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - services
  15 │   - configmaps
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'dynatrace-webhook' shouldn't have access to manage secrets in namespace 'dynatrace'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubernetes29_15.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - services
  15 │   - configmaps
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────



kubernetes29_19.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'dynatrace-operator' of Deployment 'dynatrace-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes29_19.yaml:28-80
────────────────────────────────────────
  28 ┌       - name: dynatrace-operator
  29 │         args:
  30 │         - operator
  31 │         image: docker.io/dynatrace/dynatrace-operator:v0.6.0
  32 │         imagePullPolicy: Always
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 │           valueFrom:
  36 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dynatrace-operator' of Deployment 'dynatrace-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes29_19.yaml:28-80
────────────────────────────────────────
  28 ┌       - name: dynatrace-operator
  29 │         args:
  30 │         - operator
  31 │         image: docker.io/dynatrace/dynatrace-operator:v0.6.0
  32 │         imagePullPolicy: Always
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 │           valueFrom:
  36 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dynatrace-operator in dynatrace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes29_19.yaml:27-98
────────────────────────────────────────
  27 ┌       containers:
  28 │       - name: dynatrace-operator
  29 │         args:
  30 │         - operator
  31 │         image: docker.io/dynatrace/dynatrace-operator:v0.6.0
  32 │         imagePullPolicy: Always
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dynatrace-operator in deployment dynatrace-operator (namespace: dynatrace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes29_19.yaml:28-80
────────────────────────────────────────
  28 ┌       - name: dynatrace-operator
  29 │         args:
  30 │         - operator
  31 │         image: docker.io/dynatrace/dynatrace-operator:v0.6.0
  32 │         imagePullPolicy: Always
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 │           valueFrom:
  36 └             fieldRef:
  ..   
────────────────────────────────────────



kubernetes29_20.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'webhook' of Deployment 'dynatrace-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes29_20.yaml:48-94
────────────────────────────────────────
  48 ┌       - name: webhook
  49 │         args:
  50 │         - webhook-server
  51 │         - --certs-dir=/tmp/k8s-webhook-server/serving-certs/
  52 │         image: docker.io/dynatrace/dynatrace-operator:v0.6.0
  53 │         imagePullPolicy: Always
  54 │         env:
  55 │         - name: POD_NAMESPACE
  56 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webhook' of Deployment 'dynatrace-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes29_20.yaml:48-94
────────────────────────────────────────
  48 ┌       - name: webhook
  49 │         args:
  50 │         - webhook-server
  51 │         - --certs-dir=/tmp/k8s-webhook-server/serving-certs/
  52 │         image: docker.io/dynatrace/dynatrace-operator:v0.6.0
  53 │         imagePullPolicy: Always
  54 │         env:
  55 │         - name: POD_NAMESPACE
  56 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dynatrace-webhook in dynatrace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes29_20.yaml:30-95
────────────────────────────────────────
  30 ┌       volumes:
  31 │       - emptyDir: {}
  32 │         name: certs-dir
  33 │       affinity:
  34 │         nodeAffinity:
  35 │           requiredDuringSchedulingIgnoredDuringExecution:
  36 │             nodeSelectorTerms:
  37 │             - matchExpressions:
  38 └               - key: kubernetes.io/arch
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container webhook in deployment dynatrace-webhook (namespace: dynatrace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes29_20.yaml:48-94
────────────────────────────────────────
  48 ┌       - name: webhook
  49 │         args:
  50 │         - webhook-server
  51 │         - --certs-dir=/tmp/k8s-webhook-server/serving-certs/
  52 │         image: docker.io/dynatrace/dynatrace-operator:v0.6.0
  53 │         imagePullPolicy: Always
  54 │         env:
  55 │         - name: POD_NAMESPACE
  56 └           valueFrom:
  ..   
────────────────────────────────────────



kubernetes29_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 kubernetes29_7.yaml:10-25
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - nodes
  14 │   - pods
  15 │   - namespaces
  16 │   - replicationcontrollers
  17 │   - events
  18 └   - resourcequotas
  ..   
────────────────────────────────────────



kubernetes29_8.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 112, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 4)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dynatrace-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubernetes29_8.yaml:27-32
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - ''
  29 │   resources:
  30 │   - secrets
  31 │   verbs:
  32 └   - create
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'dynatrace-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubernetes29_8.yaml:33-44
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resources:
  36 │   - secrets
  37 │   resourceNames:
  38 │   - dynatrace-dynakube-config
  39 │   - dynatrace-data-ingest-endpoint
  40 │   - dynatrace-activegate-internal-proxy
  41 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'dynatrace-operator' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 kubernetes29_8.yaml:52-60
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - admissionregistration.k8s.io
  54 │   resources:
  55 │   - mutatingwebhookconfigurations
  56 │   resourceNames:
  57 │   - dynatrace-webhook
  58 │   verbs:
  59 │   - get
  60 └   - update
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'dynatrace-operator' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 kubernetes29_8.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - admissionregistration.k8s.io
  63 │   resources:
  64 │   - validatingwebhookconfigurations
  65 │   resourceNames:
  66 │   - dynatrace-webhook
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────



kubernetes29_9.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'dynatrace-webhook' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubernetes29_9.yaml:26-31
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   resources:
  29 │   - secrets
  30 │   verbs:
  31 └   - create
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'dynatrace-webhook' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubernetes29_9.yaml:32-43
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - secrets
  36 │   resourceNames:
  37 │   - dynatrace-dynakube-config
  38 │   - dynatrace-data-ingest-endpoint
  39 │   verbs:
  40 └   - get
  ..   
────────────────────────────────────────



kubernetes3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counter' of Deployment 'counter-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counter' of Deployment 'counter-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counter' of 'deployment' 'counter-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counter' of Deployment 'counter-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counter' of Deployment 'counter-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counter' of Deployment 'counter-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counter' of Deployment 'counter-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counter" of deployment "counter-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment counter-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes3.yaml:4
────────────────────────────────────────
   4 [   name: counter-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes3.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment counter-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes3.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 └             cpu: 4
  ..   
────────────────────────────────────────



kubernetes30_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'scrum-user-postgres' of Deployment 'scrum-user-postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'scrum-user-postgres' of Deployment 'scrum-user-postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'scrum-user-postgres' of 'deployment' 'scrum-user-postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'scrum-user-postgres' of Deployment 'scrum-user-postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'scrum-user-postgres' of Deployment 'scrum-user-postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'scrum-user-postgres' of Deployment 'scrum-user-postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'scrum-user-postgres' of Deployment 'scrum-user-postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'scrum-user-postgres' of Deployment 'scrum-user-postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'scrum-user-postgres' of Deployment 'scrum-user-postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'scrum-user-postgres' of Deployment 'scrum-user-postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'scrum-user-postgres' of Deployment 'scrum-user-postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "scrum-user-postgres" of deployment "scrum-user-postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment scrum-user-postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes30_2.yaml:4
────────────────────────────────────────
   4 [   name: scrum-user-postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container scrum-user-postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment scrum-user-postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes30_2.yaml:15-40
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 └         - name: POSTGRES_DB
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container scrum-user-postgres in deployment scrum-user-postgres (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes30_2.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: scrum-user-postgres
  17 │         image: sasabistrovic/scrum-user-postgres:1.0
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────



kubernetes30_4.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'scrum-user-pgadmin' of Deployment 'scrum-user-pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'scrum-user-pgadmin' of Deployment 'scrum-user-pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'scrum-user-pgadmin' of 'deployment' 'scrum-user-pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'scrum-user-pgadmin' of Deployment 'scrum-user-pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'scrum-user-pgadmin' of Deployment 'scrum-user-pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'scrum-user-pgadmin' of Deployment 'scrum-user-pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'scrum-user-pgadmin' of Deployment 'scrum-user-pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'scrum-user-pgadmin' of Deployment 'scrum-user-pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'scrum-user-pgadmin' of Deployment 'scrum-user-pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'scrum-user-pgadmin' of Deployment 'scrum-user-pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'scrum-user-pgadmin' of Deployment 'scrum-user-pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "scrum-user-pgadmin" of deployment "scrum-user-pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment scrum-user-pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes30_4.yaml:4
────────────────────────────────────────
   4 [   name: scrum-user-pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment scrum-user-pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container scrum-user-pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment scrum-user-pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes30_4.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 └         - name: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container scrum-user-pgadmin in deployment scrum-user-pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes30_4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: scrum-user-pgadmin
  17 │         image: sasabistrovic/scrum-user-pgadmin:1.0
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST_AUTH_METHOD
  22 │           value: trust
  23 │         - name: PGADMIN_DEFAULT_EMAIL
  24 └           value: sasa.bistrovic@gmail.com
  ..   
────────────────────────────────────────



kubernetes30_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'spring-boot-scrum' of Deployment 'spring-boot-scrum' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'spring-boot-scrum' of Deployment 'spring-boot-scrum' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'spring-boot-scrum' of 'deployment' 'spring-boot-scrum' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'spring-boot-scrum' of Deployment 'spring-boot-scrum' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'spring-boot-scrum' of Deployment 'spring-boot-scrum' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'spring-boot-scrum' of Deployment 'spring-boot-scrum' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'spring-boot-scrum' of Deployment 'spring-boot-scrum' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'spring-boot-scrum' of Deployment 'spring-boot-scrum' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'spring-boot-scrum' of Deployment 'spring-boot-scrum' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'spring-boot-scrum' of Deployment 'spring-boot-scrum' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'spring-boot-scrum' of Deployment 'spring-boot-scrum' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "spring-boot-scrum" of deployment "spring-boot-scrum" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment spring-boot-scrum in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes30_6.yaml:4
────────────────────────────────────────
   4 [   name: spring-boot-scrum
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container spring-boot-scrum in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment spring-boot-scrum in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes30_6.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 └         - name: POSTGRES_DB
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container spring-boot-scrum in deployment spring-boot-scrum (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes30_6.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-scrum
  17 │         image: sasabistrovic/spring-boot-scrum:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────



kubernetes30_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'spring-boot-user' of Deployment 'spring-boot-user' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'spring-boot-user' of Deployment 'spring-boot-user' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'spring-boot-user' of 'deployment' 'spring-boot-user' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'spring-boot-user' of Deployment 'spring-boot-user' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'spring-boot-user' of Deployment 'spring-boot-user' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'spring-boot-user' of Deployment 'spring-boot-user' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'spring-boot-user' of Deployment 'spring-boot-user' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'spring-boot-user' of Deployment 'spring-boot-user' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'spring-boot-user' of Deployment 'spring-boot-user' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'spring-boot-user' of Deployment 'spring-boot-user' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'spring-boot-user' of Deployment 'spring-boot-user' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "spring-boot-user" of deployment "spring-boot-user" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment spring-boot-user in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes30_8.yaml:4
────────────────────────────────────────
   4 [   name: spring-boot-user
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container spring-boot-user in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment spring-boot-user in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes30_8.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 └         - name: POSTGRES_DB
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container spring-boot-user in deployment spring-boot-user (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes30_8.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: spring-boot-user
  17 │         image: sasabistrovic/spring-boot-user:1.0
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         env:
  21 │         - name: DB_SERVER
  22 │           value: scrum-user-postgres
  23 │         - name: POSTGRES_DB
  24 └           value: postgres
  ..   
────────────────────────────────────────



kubernetes31.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'learn-kube-api-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'learn-kube-api-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'learn-kube-api-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'learn-kube-api-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'learn-kube-api-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'learn-kube-api-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'learn-kube-api-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'learn-kube-api-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'learn-kube-api-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'learn-kube-api-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'learn-kube-api-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "learn-kube-api-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment learn-kube-api-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes31.yaml:4-6
────────────────────────────────────────
   4 ┌   name: learn-kube-api-deployment
   5 │   labels:
   6 └     app: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container learn-kube-api-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes31.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment learn-kube-api-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes31.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: api
  19 │         image: learn-kube-api:1
  20 │         ports:
  21 │         - containerPort: 4000
  22 └           name: api-port
────────────────────────────────────────



kubernetes34.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-cloudbuild' of Deployment 'hello-cloudbuild' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-cloudbuild' of Deployment 'hello-cloudbuild' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-cloudbuild' of 'deployment' 'hello-cloudbuild' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-cloudbuild' of Deployment 'hello-cloudbuild' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-cloudbuild' of Deployment 'hello-cloudbuild' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-cloudbuild' of Deployment 'hello-cloudbuild' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-cloudbuild' of Deployment 'hello-cloudbuild' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-cloudbuild' of Deployment 'hello-cloudbuild' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-cloudbuild' of Deployment 'hello-cloudbuild' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-cloudbuild' of Deployment 'hello-cloudbuild' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-cloudbuild' of Deployment 'hello-cloudbuild' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-cloudbuild" of deployment "hello-cloudbuild" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello-cloudbuild in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes34.yaml:4-6
────────────────────────────────────────
   4 ┌   name: hello-cloudbuild
   5 │   labels:
   6 └     app: hello-cloudbuild
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-cloudbuild in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello-cloudbuild in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes34.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello-cloudbuild in deployment hello-cloudbuild (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes34.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: hello-cloudbuild
  19 │         image: us-east1-docker.pkg.dev/qwiklabs-gcp-00-32e0d5ef4400/my-repository/hello-cloudbuild:1f3ca2c
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



kubernetes35.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend-container' of 'deployment' 'frontend-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-container" of deployment "frontend-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes35.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend-deployment
   5 │   labels:
   6 └     app: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes35.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container frontend-container in deployment frontend-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes35.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────



kubernetes35_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc1-container' of 'deployment' 'uc1-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc1-container" of deployment "uc1-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc1-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes35_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc1-deployment
   5 │   labels:
   6 └     app: uc1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc1-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc1-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes35_1.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc1-container in deployment uc1-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes35_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5001
────────────────────────────────────────



kubernetes35_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc2-container' of 'deployment' 'uc2-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc2-container" of deployment "uc2-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc2-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes35_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc2-deployment
   5 │   labels:
   6 └     app: uc2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc2-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc2-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes35_2.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc2-container in deployment uc2-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes35_2.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5002
────────────────────────────────────────



kubernetes35_3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc3-container' of 'deployment' 'uc3-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc3-container" of deployment "uc3-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc3-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes35_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc3-deployment
   5 │   labels:
   6 └     app: uc3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc3-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc3-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes35_3.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc3-container in deployment uc3-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes35_3.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: mongodb-config
  22 │         ports:
  23 └         - containerPort: 5003
────────────────────────────────────────



kubernetes36.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend-container' of 'deployment' 'frontend-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-container" of deployment "frontend-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes36.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend-deployment
   5 │   labels:
   6 └     app: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes36.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container frontend-container in deployment frontend-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes36.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: abishekd/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────



kubernetes36_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc1-container' of 'deployment' 'uc1-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc1-container" of deployment "uc1-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc1-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes36_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc1-deployment
   5 │   labels:
   6 └     app: uc1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc1-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc1-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes36_1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc1-container in deployment uc1-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes36_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: akarshj21/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────



kubernetes36_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc2-container' of 'deployment' 'uc2-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc2-container" of deployment "uc2-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc2-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes36_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc2-deployment
   5 │   labels:
   6 └     app: uc2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc2-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc2-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes36_2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc2-container in deployment uc2-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes36_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: akarshj21/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────



kubernetes36_3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc3-container' of 'deployment' 'uc3-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc3-container" of deployment "uc3-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc3-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes36_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc3-deployment
   5 │   labels:
   6 └     app: uc3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc3-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc3-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes36_3.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc3-container in deployment uc3-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes36_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: akarshj21/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────



kubernetes39.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend-container' of 'deployment' 'frontend-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-container" of deployment "frontend-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes39.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend-deployment
   5 │   labels:
   6 └     app: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes39.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container frontend-container in deployment frontend-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes39.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: pes1ug21cs721/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────



kubernetes39_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc1-container' of 'deployment' 'uc1-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc1-container" of deployment "uc1-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc1-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes39_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc1-deployment
   5 │   labels:
   6 └     app: uc1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc1-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc1-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes39_1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc1-container in deployment uc1-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes39_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: pes1ug21cs721/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────



kubernetes39_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc2-container' of 'deployment' 'uc2-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc2-container" of deployment "uc2-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc2-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes39_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc2-deployment
   5 │   labels:
   6 └     app: uc2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc2-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc2-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes39_2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc2-container in deployment uc2-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes39_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: pes1ug21cs721/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────



kubernetes39_3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc3-container' of 'deployment' 'uc3-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc3-container" of deployment "uc3-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc3-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes39_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc3-deployment
   5 │   labels:
   6 └     app: uc3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc3-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc3-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes39_3.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc3-container in deployment uc3-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes39_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: pes1ug21cs721/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────



kubernetes40_2.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'web-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubernetes40_2.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



kubernetes40_4.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'example-client' of Deployment 'example-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'example-client' of Deployment 'example-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'example-client' of 'deployment' 'example-client' in 'web' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'example-client' of Deployment 'example-client' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'example-client' of Deployment 'example-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'example-client' of Deployment 'example-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'example-client' of Deployment 'example-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'example-client' of Deployment 'example-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'example-client' of Deployment 'example-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "example-client" of deployment "example-client" in "web" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes40_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: example-client
  25 │         image: example-client
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 200Mi
  30 │         ports:
  31 │         - containerPort: 8080
  32 └         readinessProbe:
  ..   
────────────────────────────────────────



kubernetes41_2.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'hydra-proxy-role' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubernetes41_2.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



kubernetes41_4.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hydra-proxy' of Deployment 'hydra-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hydra-proxy' of Deployment 'hydra-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hydra-proxy' of 'deployment' 'hydra-proxy' in 'hydra-proxy' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hydra-proxy' of Deployment 'hydra-proxy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hydra-proxy' of Deployment 'hydra-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hydra-proxy' of Deployment 'hydra-proxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hydra-proxy' of Deployment 'hydra-proxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hydra-proxy' of Deployment 'hydra-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hydra-proxy' of Deployment 'hydra-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hydra-proxy" of deployment "hydra-proxy" in "hydra-proxy" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes41_4.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: hydra-proxy
  25 │         image: hydra-proxy
  26 │         resources:
  27 │           limits:
  28 │             cpu: '0.5'
  29 │             memory: 300Mi
  30 │         ports:
  31 │         - containerPort: 9988
  32 └         readinessProbe:
  ..   
────────────────────────────────────────



kubernetes42.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend-container' of 'deployment' 'frontend-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-container' of Deployment 'frontend-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-container' of Deployment 'frontend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-container" of deployment "frontend-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes42.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend-deployment
   5 │   labels:
   6 └     app: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes42.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container frontend-container in deployment frontend-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes42.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: frontend-container
  18 │         image: username/frontend:latest
  19 │         ports:
  20 └         - containerPort: 3000
────────────────────────────────────────



kubernetes42_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc1-container' of 'deployment' 'uc1-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc1-container' of Deployment 'uc1-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc1-container' of Deployment 'uc1-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc1-container" of deployment "uc1-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc1-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes42_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc1-deployment
   5 │   labels:
   6 └     app: uc1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc1-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc1-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes42_1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc1-container in deployment uc1-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes42_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc1-container
  18 │         image: username/uc1:latest
  19 │         ports:
  20 └         - containerPort: 5001
────────────────────────────────────────



kubernetes42_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc2-container' of 'deployment' 'uc2-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc2-container' of Deployment 'uc2-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc2-container' of Deployment 'uc2-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc2-container" of deployment "uc2-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc2-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes42_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc2-deployment
   5 │   labels:
   6 └     app: uc2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc2-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc2-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes42_2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc2-container in deployment uc2-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes42_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc2-container
  18 │         image: username/uc2:latest
  19 │         ports:
  20 └         - containerPort: 5002
────────────────────────────────────────



kubernetes42_3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'uc3-container' of 'deployment' 'uc3-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'uc3-container' of Deployment 'uc3-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'uc3-container' of Deployment 'uc3-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "uc3-container" of deployment "uc3-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment uc3-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes42_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: uc3-deployment
   5 │   labels:
   6 └     app: uc3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container uc3-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment uc3-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes42_3.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container uc3-container in deployment uc3-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes42_3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: uc3-container
  18 │         image: username/uc3:latest
  19 │         ports:
  20 └         - containerPort: 5003
────────────────────────────────────────



kubernetes46.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'drill' of StatefulSet 'drill' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'drill' of StatefulSet 'drill' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'drill' of 'statefulset' 'drill' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'drill' of StatefulSet 'drill' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'drill' of StatefulSet 'drill' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'drill' of StatefulSet 'drill' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'drill' of StatefulSet 'drill' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'drill' of StatefulSet 'drill' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'drill' of StatefulSet 'drill' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'drill' of StatefulSet 'drill' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'drill' of StatefulSet 'drill' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'drill' of StatefulSet 'drill' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "drill" of statefulset "drill" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset drill in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes46.yaml:4
────────────────────────────────────────
   4 [   name: drill
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container drill in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset drill in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes46.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container drill in statefulset drill (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes46.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: drill
  17 │         image: donnercody/apache_drill:latest
  18 │         env:
  19 │         - name: ZOOKEEPER_HOST
  20 │           value: zk-service
  21 │         ports:
  22 │         - containerPort: 8047
  23 └         - containerPort: 31010
────────────────────────────────────────



kubernetes4_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mutating-webhook' of 'deployment' 'validating-webhooks' in 'webhooks' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mutating-webhook' of Deployment 'validating-webhooks' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mutating-webhook" of deployment "validating-webhooks" in "webhooks" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container validating-webhooks in webhooks namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 │         - name: webhook-certs
  25 │           mountPath: /usr/local/share/ca-certificates/
  26 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment validating-webhooks in webhooks namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes4_2.yaml:16-30
────────────────────────────────────────
  16 ┌       serviceAccountName: webhook-sa
  17 │       containers:
  18 │       - name: mutating-webhook
  19 │         image: namespace_update:v1
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         volumeMounts:
  24 └         - name: webhook-certs
  ..   
────────────────────────────────────────



kubernetes5.yaml (kubernetes)
=============================
Tests: 127 (SUCCESSES: 95, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 19, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dind' of Deployment 'github-runner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dind' of Deployment 'github-runner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'github-runner' of Deployment 'github-runner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dind' of 'deployment' 'github-runner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'github-runner' of 'deployment' 'github-runner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dind' of Deployment 'github-runner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dind' of Deployment 'github-runner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'dind' of Deployment 'github-runner' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dind' of Deployment 'github-runner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dind" of deployment "github-runner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "github-runner" of deployment "github-runner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes5.yaml:41-56
────────────────────────────────────────
  41 ┌         - name: dind
  42 │           image: docker:24.0.6-dind
  43 │           env:
  44 │             - name: DOCKER_TLS_CERTDIR
  45 │               value: ""
  46 │           resources:
  47 │             requests:
  48 │               cpu: 20m
  49 └               memory: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment github-runner in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: github-runner
   5 │   labels:
   6 └     app: github-runner
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container github-runner in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment github-runner in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes5.yaml:17-61
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 └                   key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container github-runner in deployment github-runner (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes5.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: github-runner
  19 │           image: elmazidi/github-runner:latest
  20 │           env:
  21 │             - name: GITHUB_OWNER
  22 │               valueFrom:
  23 │                 secretKeyRef:
  24 │                   name: github-secret
  25 │                   key: GITHUB_OWNER
  26 └             - name: GITHUB_REPOSITORY
  ..   
────────────────────────────────────────



kubernetes50_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'js-api' of Deployment 'js-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'js-api' of Deployment 'js-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'js-api' of 'deployment' 'js-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'js-api' of Deployment 'js-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'js-api' of Deployment 'js-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'js-api' of Deployment 'js-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'js-api' of Deployment 'js-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'js-api' of Deployment 'js-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "js-api" of deployment "js-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment js-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes50_1.yaml:4
────────────────────────────────────────
   4 [   name: js-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container js-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes50_1.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment js-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes50_1.yaml:15-33
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: js-api
  17 │         image: js-api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 └           requests:
  ..   
────────────────────────────────────────



kubernetes51_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-api' of Deployment 'python-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-api' of Deployment 'python-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-api' of 'deployment' 'python-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-api' of Deployment 'python-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'python-api' of Deployment 'python-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-api' of Deployment 'python-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-api' of Deployment 'python-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-api' of Deployment 'python-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-api" of deployment "python-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes51_1.yaml:4
────────────────────────────────────────
   4 [   name: python-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment python-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes51_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes51_1.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: python-api
  17 │         image: python_api:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 └           requests:
  ..   
────────────────────────────────────────



kubernetes52_3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongodb' of Deployment 'mongodb-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongodb' of Deployment 'mongodb-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongodb' of 'deployment' 'mongodb-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongodb' of Deployment 'mongodb-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongodb' of Deployment 'mongodb-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongodb' of Deployment 'mongodb-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongodb' of Deployment 'mongodb-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongodb' of Deployment 'mongodb-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongodb" of deployment "mongodb-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mongodb-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes52_3.yaml:4
────────────────────────────────────────
   4 [   name: mongodb-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongodb-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes52_3.yaml:15-28
────────────────────────────────────────
  15 ┌       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 │         resources:
  23 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongodb-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes52_3.yaml:14-32
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: mongodb
  16 │         image: mongo:latest
  17 │         ports:
  18 │         - containerPort: 8001
  19 │         volumeMounts:
  20 │         - mountPath: /data/db
  21 │           name: mongodb-storage
  22 └         resources:
  ..   
────────────────────────────────────────



kubernetes53_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Deployment 'mysql-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes53_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes53_1.yaml:15-41
────────────────────────────────────────
  15 ┌       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 │         - name: MYSQL_USER
  23 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes53_1.yaml:14-45
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: mysql
  16 │         image: mysql:latest
  17 │         ports:
  18 │         - containerPort: 3306
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: admin
  22 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────



kubernetes54_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend-app' of Deployment 'frontend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend-app' of Deployment 'frontend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend-app' of 'deployment' 'frontend-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend-app' of Deployment 'frontend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-app' of Deployment 'frontend-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend-app' of Deployment 'frontend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-app' of Deployment 'frontend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-app' of Deployment 'frontend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-app" of deployment "frontend-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes54_1.yaml:4
────────────────────────────────────────
   4 [   name: frontend-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes54_1.yaml:16-38
────────────────────────────────────────
  16 ┌       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 │           requests:
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes54_1.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: frontend-app
  17 │         image: frontend-app:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 512Mi
  22 │             cpu: '1'
  23 └           requests:
  ..   
────────────────────────────────────────



kubernetes7.yaml (kubernetes)
=============================
Tests: 127 (SUCCESSES: 96, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 19, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dind' of Deployment 'github-runner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dind' of Deployment 'github-runner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'github-runner' of Deployment 'github-runner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dind' of 'deployment' 'github-runner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'github-runner' of 'deployment' 'github-runner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dind' of Deployment 'github-runner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'github-runner' of Deployment 'github-runner' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dind' of Deployment 'github-runner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'dind' of Deployment 'github-runner' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dind' of Deployment 'github-runner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dind' of Deployment 'github-runner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'github-runner' of Deployment 'github-runner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dind" of deployment "github-runner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "github-runner" of deployment "github-runner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes7.yaml:42-57
────────────────────────────────────────
  42 ┌       - name: dind 
  43 │         image: docker:24.0.6-dind
  44 │         env:
  45 │         - name: DOCKER_TLS_CERTDIR
  46 │           value: ""
  47 │         resources: 
  48 │             requests: 
  49 │                 cpu: 20m 
  50 └                 memory: 512Mi 
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment github-runner in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: github-runner
   5 │   labels:
   6 └     app: github-runner
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container github-runner in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes7.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: github-secret
  26 └               key: GITHUB_OWNER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment github-runner in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes7.yaml:17-62
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: github-runner
  19 │         imagePullPolicy: Never #use local kind image
  20 │         image: github-runner:latest
  21 │         env:
  22 │         - name: GITHUB_OWNER
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: github-secret
  ..   
────────────────────────────────────────



kubernetes9.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counter' of Deployment 'counter-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counter' of Deployment 'counter-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counter' of 'deployment' 'counter-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counter' of Deployment 'counter-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counter' of Deployment 'counter-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counter' of Deployment 'counter-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counter' of Deployment 'counter-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counter" of deployment "counter-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment counter-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes9.yaml:4
────────────────────────────────────────
   4 [   name: counter-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes9.yaml:16-39
────────────────────────────────────────
  16 ┌       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 4
  24 └             memory: 50Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment counter-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes9.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: counter
  17 │         image: counter:v0.3
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 └             cpu: 4
  ..   
────────────────────────────────────────



kubernetesDeployment.yaml (kubernetes)
======================================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'another-app-container' of Deployment 'hello-world' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-image-container' of Deployment 'hello-world' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'another-app-container' of Deployment 'hello-world' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-image-container' of Deployment 'hello-world' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'another-app-container' of 'deployment' 'hello-world' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-image-container' of 'deployment' 'hello-world' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'another-app-container' of Deployment 'hello-world' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-image-container' of Deployment 'hello-world' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'another-app-container' of Deployment 'hello-world' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-image-container' of Deployment 'hello-world' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'another-app-container' of Deployment 'hello-world' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-image-container' of Deployment 'hello-world' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'another-app-container' of Deployment 'hello-world' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-image-container' of Deployment 'hello-world' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'another-app-container' of Deployment 'hello-world' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-image-container' of Deployment 'hello-world' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'another-app-container' of Deployment 'hello-world' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-image-container' of Deployment 'hello-world' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'another-app-container' of Deployment 'hello-world' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-image-container' of Deployment 'hello-world' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'another-app-container' of Deployment 'hello-world' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-image-container' of Deployment 'hello-world' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'another-app-container' of Deployment 'hello-world' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-image-container' of Deployment 'hello-world' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "another-app-container" of deployment "hello-world" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-image-container" of deployment "hello-world" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello-world in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetesDeployment.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: backendAndFrontend
   6 └   name: hello-world
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-world in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetesDeployment.yaml:23-27
────────────────────────────────────────
  23 ┌         - image: another_app
  24 │           name: another-app-container
  25 │           imagePullPolicy: Never
  26 │           ports:
  27 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-world in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetesDeployment.yaml:18-22
────────────────────────────────────────
  18 ┌         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 └             - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello-world in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetesDeployment.yaml:17-27
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: test-image
  19 │           name: test-image-container
  20 │           imagePullPolicy: Never
  21 │           ports:
  22 │             - containerPort: 8000
  23 │         - image: another_app
  24 │           name: another-app-container
  25 └           imagePullPolicy: Never
  ..   
────────────────────────────────────────



kubernetes_deployment.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comfyui' of Deployment 'comfyui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comfyui' of Deployment 'comfyui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comfyui' of 'deployment' 'comfyui' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comfyui' of Deployment 'comfyui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comfyui' of Deployment 'comfyui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comfyui' of Deployment 'comfyui' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comfyui' of Deployment 'comfyui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comfyui' of Deployment 'comfyui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comfyui' of Deployment 'comfyui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comfyui' of Deployment 'comfyui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comfyui' of Deployment 'comfyui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comfyui' of Deployment 'comfyui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'comfyui' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 kubernetes_deployment.yaml:6-36
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: comfyui
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: comfyui
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comfyui" of deployment "comfyui" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comfyui in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes_deployment.yaml:4
────────────────────────────────────────
   4 [   name: comfyui
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comfyui in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment.yaml:23-36
────────────────────────────────────────
  23 ┌       - name: comfyui
  24 │         image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/comfyui-images:latest
  25 │         ports:
  26 │         - containerPort: 8848
  27 │         volumeMounts:
  28 │         - mountPath: /app/ComfyUI/models
  29 │           name: stable-diffusion-models
  30 │         - mountPath: /app/ComfyUI/output
  31 └           name: comfyui-outputs
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comfyui in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment.yaml:15-36
────────────────────────────────────────
  15 ┌       volumes:
  16 │       - name: stable-diffusion-models
  17 │         hostPath:
  18 │           path: /comfyui-models # Need to sync all models in node's user-data
  19 │       - name: comfyui-outputs
  20 │         persistentVolumeClaim:
  21 │           claimName: comfyui-outputs-pvc # Need to apply sd-outputs-s3.yaml first
  22 │       containers:
  23 └       - name: comfyui
  ..   
────────────────────────────────────────



kubernetes_deployment11_2.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'wordpress-mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'wordpress-mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "wordpress-mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment wordpress-mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: wordpress-mysql
   5 │   labels:
   6 └     app: wordpress
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wordpress-mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:21-37
────────────────────────────────────────
  21 ┌       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 │               key: password
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wordpress-mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment11_2.yaml:20-41
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: mysql:5.6
  22 │         name: mysql
  23 │         env:
  24 │         - name: MYSQL_ROOT_PASSWORD
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: mysql-pass
  28 └               key: password
  ..   
────────────────────────────────────────



kubernetes_deployment11_5.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wordpress' of Deployment 'wordpress' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wordpress' of 'deployment' 'wordpress' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wordpress' of Deployment 'wordpress' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wordpress" of deployment "wordpress" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment wordpress in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: wordpress
   5 │   labels:
   6 └     app: wordpress
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment wordpress in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wordpress in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:21-36
────────────────────────────────────────
  21 ┌       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 └               name: mysql-pass
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wordpress in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment11_5.yaml:20-40
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: wordpress:4.8-apache
  22 │         name: wordpress
  23 │         env:
  24 │         - name: WORDPRESS_DB_HOST
  25 │           value: wordpress-mysql
  26 │         - name: WORDPRESS_DB_PASSWORD
  27 │           valueFrom:
  28 └             secretKeyRef:
  ..   
────────────────────────────────────────



kubernetes_deployment4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'jupyterlab' of Deployment 'jupyterlab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'jupyterlab' of Deployment 'jupyterlab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'jupyterlab' of 'deployment' 'jupyterlab' in 'jlab' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'jupyterlab' of Deployment 'jupyterlab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'jupyterlab' of Deployment 'jupyterlab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'jupyterlab' of Deployment 'jupyterlab' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'jupyterlab' of Deployment 'jupyterlab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'jupyterlab' of Deployment 'jupyterlab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'jupyterlab' of Deployment 'jupyterlab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'jupyterlab' of Deployment 'jupyterlab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "jupyterlab" of deployment "jupyterlab" in "jlab" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 kubernetes_deployment4.yaml:19-20
────────────────────────────────────────
  19 ┌         runAsUser: 0
  20 └         fsGroup: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────


AVD-KSV-0116 (LOW): deployment jupyterlab in jlab namespace should set spec.securityContext.runAsGroup, spec.securityContext.supplementalGroups[*] and spec.securityContext.fsGroup to integer greater than 0
════════════════════════════════════════
According to pod security standard 'Non-root groups', containers should be forbidden from running with a root primary or supplementary GID.

See https://avd.aquasec.com/misconfig/ksv116
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container jupyterlab in deployment jupyterlab (namespace: jlab) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes_deployment4.yaml:22-38
────────────────────────────────────────
  22 ┌         - name: jupyterlab
  23 │           image: jupyter/datascience-notebook:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           ports:
  26 │           - containerPort: 8888
  27 │           command:
  28 │             - /bin/bash
  29 │             - -c
  30 └             - |
  ..   
────────────────────────────────────────



kubernetes_deployment5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mattermost-operator' of 'deployment' 'mattermost-operator' in 'mattermost-operator' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mattermost-operator' of Deployment 'mattermost-operator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mattermost-operator" of deployment "mattermost-operator" in "mattermost-operator" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mattermost-operator in mattermost-operator namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mattermost-operator in mattermost-operator namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       containers:
  18 │       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 └           value: "20"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mattermost-operator in deployment mattermost-operator (namespace: mattermost-operator) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes_deployment5.yaml:18-35
────────────────────────────────────────
  18 ┌       - args:
  19 │         - --enable-leader-election
  20 │         - --metrics-addr=0.0.0.0:8383
  21 │         command:
  22 │         - /mattermost-operator
  23 │         env:
  24 │         - name: MAX_RECONCILING_INSTALLATIONS
  25 │           value: "20"
  26 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────



kubernetes_deployment6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'minio' of Deployment 'minio' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'minio' of Deployment 'minio' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'minio' of 'deployment' 'minio' in 'minio' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'minio' of Deployment 'minio' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "minio" of deployment "minio" in "minio" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container minio in minio namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment minio in minio namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment6.yaml:20-63
────────────────────────────────────────
  20 ┌       affinity:
  21 │         nodeAffinity:
  22 │           requiredDuringSchedulingIgnoredDuringExecution:
  23 │             nodeSelectorTerms:
  24 │               - matchExpressions:
  25 │                   - key: disktype
  26 │                     operator: In
  27 │                     values:
  28 └                       - hdd
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container minio in deployment minio (namespace: minio) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes_deployment6.yaml:30-59
────────────────────────────────────────
  30 ┌         - name: minio
  31 │           image: minio/minio:RELEASE.2022-07-29T19-40-48Z
  32 │           args: ['server', '/data', '--console-address', ':9001']
  33 │           ports:
  34 │             - name: minio
  35 │               containerPort: 9000
  36 │           volumeMounts:
  37 │             - name: s3-pv-storage
  38 └               mountPath: /data
  ..   
────────────────────────────────────────



kubernetes_deployment7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongo' of Deployment 'mongo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongo' of Deployment 'mongo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongo' of 'deployment' 'mongo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongo' of Deployment 'mongo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongo' of Deployment 'mongo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongo' of Deployment 'mongo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mongo' of Deployment 'mongo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mongo' of Deployment 'mongo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongo' of Deployment 'mongo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongo" of deployment "mongo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mongo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes_deployment7.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: mongo
   6 └   name: mongo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment7.yaml:19-57
────────────────────────────────────────
  19 ┌       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 │               - --eval
  27 └               - "db.adminCommand('ping')"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deployment7.yaml:18-61
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: mongo
  20 │         name: mongo
  21 │         args: ["--dbpath","/data/db"]
  22 │         livenessProbe:
  23 │           exec:
  24 │             command:
  25 │               - mongosh
  26 └               - --eval
  ..   
────────────────────────────────────────



kubernetes_deploymnet_1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           name: mysql
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_deploymnet_1.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: mysql:5.6
  18 │         name: mysql
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           value: password
  22 │         ports:
  23 │         - containerPort: 3306
  24 └           name: mysql
  ..   
────────────────────────────────────────



kubernetes_job_template.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container '{replaced with MLflow Project name}' of Job '{replaced with MLflow Project name}' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container '{replaced with MLflow Project name}' of Job '{replaced with MLflow Project name}' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container '{replaced with MLflow Project name}' of 'job' '{replaced with MLflow Project name}' in 'user-a' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container '{replaced with MLflow Project name}' of Job '{replaced with MLflow Project name}' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container '{replaced with MLflow Project name}' of Job '{replaced with MLflow Project name}' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container '{replaced with MLflow Project name}' of Job '{replaced with MLflow Project name}' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container '{replaced with MLflow Project name}' of Job '{replaced with MLflow Project name}' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container '{replaced with MLflow Project name}' of Job '{replaced with MLflow Project name}' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container '{replaced with MLflow Project name}' of Job '{replaced with MLflow Project name}' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container '{replaced with MLflow Project name}' of Job '{replaced with MLflow Project name}' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "{replaced with MLflow Project name}" of job "{replaced with MLflow Project name}" in "user-a" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container {replaced with MLflow Project name} in user-a namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_job_template.yaml:14-28
────────────────────────────────────────
  14 ┌         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 │           #   - name: KUBE_MLFLOW_TRACKING_URI
  22 └           #     value: "http://mlflow-tracking.mlflow.svc.cluster.local"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job {replaced with MLflow Project name} in user-a namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_job_template.yaml:13-29
────────────────────────────────────────
  13 ┌       containers:
  14 │         - name: "{replaced with MLflow Project name}"
  15 │           image: "{replaced with URI of Docker image created during Project execution}"
  16 │           env: 
  17 │             - name: MLFLOW_TRACKING_USERNAME
  18 │               value: user
  19 │             - name: MLFLOW_TRACKING_PASSWORD
  20 │               value: YxoSKTvuKk
  21 └           #   - name: KUBE_MLFLOW_TRACKING_URI
  ..   
────────────────────────────────────────



kubernetes_operator_4.yaml (kubernetes)
=======================================
Tests: 120 (SUCCESSES: 107, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 2, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'mattermost-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 kubernetes_operator_4.yaml:7-17
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - configmaps
  13 │   - secrets
  14 │   - serviceaccounts
  15 └   - persistentvolumeclaims
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 kubernetes_operator_4.yaml:7-17
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - configmaps
  13 │   - secrets
  14 │   - serviceaccounts
  15 └   - persistentvolumeclaims
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 kubernetes_operator_4.yaml:30-35
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - apps
  32 │   resources:
  33 │   - deployments
  34 │   verbs:
  35 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'mattermost-operator' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubernetes_operator_4.yaml:89-94
────────────────────────────────────────
  89 ┌ - apiGroups:
  90 │   - installation.mattermost.com
  91 │   resources:
  92 │   - '*'
  93 │   verbs:
  94 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'mattermost-operator' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubernetes_operator_4.yaml:83-88
────────────────────────────────────────
  83 ┌ - apiGroups:
  84 │   - mattermost.com
  85 │   resources:
  86 │   - '*'
  87 │   verbs:
  88 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'mattermost-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 kubernetes_operator_4.yaml:44-52
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - apps
  46 │   resources:
  47 │   - replicasets
  48 │   verbs:
  49 │   - get
  50 │   - list
  51 │   - watch
  52 └   - delete
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'mattermost-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 kubernetes_operator_4.yaml:53-63
────────────────────────────────────────
  53 ┌ - apiGroups:
  54 │   - batch
  55 │   resources:
  56 │   - jobs
  57 │   verbs:
  58 │   - get
  59 │   - create
  60 │   - list
  61 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'mattermost-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 kubernetes_operator_4.yaml:7-17
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - configmaps
  13 │   - secrets
  14 │   - serviceaccounts
  15 └   - persistentvolumeclaims
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'mattermost-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 kubernetes_operator_4.yaml:30-35
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - apps
  32 │   resources:
  33 │   - deployments
  34 │   verbs:
  35 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'mattermost-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubernetes_operator_4.yaml:7-17
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - configmaps
  13 │   - secrets
  14 │   - serviceaccounts
  15 └   - persistentvolumeclaims
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'mattermost-operator' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 kubernetes_operator_4.yaml:71-82
────────────────────────────────────────
  71 ┌ - apiGroups:
  72 │   - rbac.authorization.k8s.io
  73 │   resources:
  74 │   - rolebindings
  75 │   - roles
  76 │   verbs:
  77 │   - get
  78 │   - create
  79 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'mattermost-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 kubernetes_operator_4.yaml:64-70
────────────────────────────────────────
  64 ┌ - apiGroups:
  65 │   - networking.k8s.io
  66 │   resources:
  67 │   - ingresses
  68 │   - ingressclasses
  69 │   verbs:
  70 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'mattermost-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 kubernetes_operator_4.yaml:7-17
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - configmaps
  13 │   - secrets
  14 │   - serviceaccounts
  15 └   - persistentvolumeclaims
  ..   
────────────────────────────────────────



kubernetes_operator_7.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mattermost-operator' of 'deployment' 'mattermost-operator' in 'mattermost-operator' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mattermost-operator' of Deployment 'mattermost-operator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mattermost-operator' of Deployment 'mattermost-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mattermost-operator" of deployment "mattermost-operator" in "mattermost-operator" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mattermost-operator in mattermost-operator namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mattermost-operator in mattermost-operator namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubernetes_operator_7.yaml:16-35
────────────────────────────────────────
  16 ┌       containers:
  17 │       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 └           value: '20'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mattermost-operator in deployment mattermost-operator (namespace: mattermost-operator) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubernetes_operator_7.yaml:17-34
────────────────────────────────────────
  17 ┌       - args:
  18 │         - --enable-leader-election
  19 │         - --metrics-addr=0.0.0.0:8383
  20 │         command:
  21 │         - /mattermost-operator
  22 │         env:
  23 │         - name: MAX_RECONCILING_INSTALLATIONS
  24 │           value: '20'
  25 └         - name: REQUEUE_ON_LIMIT_DELAY
  ..   
────────────────────────────────────────



kuberouter_1.yaml (kubernetes)
==============================
Tests: 129 (SUCCESSES: 92, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 18, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'install-cni' of DaemonSet 'kube-router' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'kube-router' of DaemonSet 'kube-router' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'install-cni' of DaemonSet 'kube-router' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-router' of DaemonSet 'kube-router' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'install-cni' of 'daemonset' 'kube-router' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-router' of 'daemonset' 'kube-router' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'kube-router' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 kuberouter_1.yaml:10-114
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       k8s-app: kube-router
  13 │       tier: node
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         k8s-app: kube-router
  18 └         tier: node
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): DaemonSet 'kube-router' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 kuberouter_1.yaml:10-114
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       k8s-app: kube-router
  13 │       tier: node
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         k8s-app: kube-router
  18 └         tier: node
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'install-cni' of DaemonSet 'kube-router' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-router' of DaemonSet 'kube-router' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'install-cni' of DaemonSet 'kube-router' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-router' of DaemonSet 'kube-router' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'install-cni' of DaemonSet 'kube-router' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-router' of DaemonSet 'kube-router' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'install-cni' of DaemonSet 'kube-router' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-router' of DaemonSet 'kube-router' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'install-cni' of DaemonSet 'kube-router' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'install-cni' of DaemonSet 'kube-router' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'kube-router' of DaemonSet 'kube-router' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'install-cni' of DaemonSet 'kube-router' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-router' of DaemonSet 'kube-router' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'install-cni' of DaemonSet 'kube-router' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-router' of DaemonSet 'kube-router' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'install-cni' of DaemonSet 'kube-router' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-router' of DaemonSet 'kube-router' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'kube-router' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 kuberouter_1.yaml:10-114
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       k8s-app: kube-router
  13 │       tier: node
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         k8s-app: kube-router
  18 └         tier: node
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'kube-router' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 kuberouter_1.yaml:10-114
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       k8s-app: kube-router
  13 │       tier: node
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         k8s-app: kube-router
  18 └         tier: node
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "install-cni" of daemonset "kube-router" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-router" of daemonset "kube-router" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-router in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset kube-router in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kuberouter_1.yaml:20-114
────────────────────────────────────────
  20 ┌       priorityClassName: system-node-critical
  21 │       serviceAccountName: kube-router
  22 │       serviceAccount: kube-router
  23 │       containers:
  24 │       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 └         - --run-router=true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container install-cni in daemonset kube-router (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kuberouter_1.yaml:68-85
────────────────────────────────────────
  68 ┌       - name: install-cni
  69 │         image: docker.io/cloudnativelabs/kube-router
  70 │         imagePullPolicy: Always
  71 │         command:
  72 │         - /bin/sh
  73 │         - -c
  74 │         - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conflist ]; then if [
  75 │           -f /etc/cni/net.d/*.conf ]; then rm -f /etc/cni/net.d/*.conf; fi; TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
  76 └           cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conflist;
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-router in daemonset kube-router (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kuberouter_1.yaml:24-66
────────────────────────────────────────
  24 ┌       - name: kube-router
  25 │         image: docker.io/cloudnativelabs/kube-router
  26 │         imagePullPolicy: Always
  27 │         args:
  28 │         - --run-router=true
  29 │         - --run-firewall=true
  30 │         - --run-service-proxy=false
  31 │         - --bgp-graceful-restart=true
  32 └         env:
  ..   
────────────────────────────────────────



kubescape3_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubescape-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubescape3_1.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 │   - watch
  15 └   - create
  ..   
────────────────────────────────────────



kubescape3_2.yaml (kubernetes)
==============================
Tests: 119 (SUCCESSES: 113, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 6)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape3_2.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - admissionregistration.k8s.io
  51 │   resources:
  52 │   - '*'
  53 │   verbs:
  54 │   - get
  55 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape3_2.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - apps
  58 │   resources:
  59 │   - '*'
  60 │   verbs:
  61 │   - get
  62 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape3_2.yaml:63-69
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - batch
  65 │   resources:
  66 │   - '*'
  67 │   verbs:
  68 │   - get
  69 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape3_2.yaml:96-102
────────────────────────────────────────
  96 ┌ - apiGroups:
  97 │   - networking.k8s.io
  98 │   resources:
  99 │   - '*'
 100 │   verbs:
 101 │   - get
 102 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape3_2.yaml:103-109
────────────────────────────────────────
 103 ┌ - apiGroups:
 104 │   - policy
 105 │   resources:
 106 │   - '*'
 107 │   verbs:
 108 │   - get
 109 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape3_2.yaml:110-116
────────────────────────────────────────
 110 ┌ - apiGroups:
 111 │   - rbac.authorization.k8s.io
 112 │   resources:
 113 │   - '*'
 114 │   verbs:
 115 │   - get
 116 └   - list
────────────────────────────────────────



kubescape3_6.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubescape' of Deployment 'kubescape' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubescape3_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubescape' of 'deployment' 'kubescape' in 'kubeeye-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubescape3_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubescape' of Deployment 'kubescape' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubescape3_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubescape' of Deployment 'kubescape' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubescape3_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubescape' of Deployment 'kubescape' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubescape3_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubescape' of Deployment 'kubescape' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubescape3_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubescape3_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubescape" of deployment "kubescape" in "kubeeye-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubescape3_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubescape3_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubescape in deployment kubescape (namespace: kubeeye-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubescape3_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────



kubescape4_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubescape-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubescape4_1.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 │   - watch
  15 └   - create
  ..   
────────────────────────────────────────



kubescape4_2.yaml (kubernetes)
==============================
Tests: 119 (SUCCESSES: 113, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 6)

AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape4_2.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - admissionregistration.k8s.io
  51 │   resources:
  52 │   - '*'
  53 │   verbs:
  54 │   - get
  55 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape4_2.yaml:56-62
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - apps
  58 │   resources:
  59 │   - '*'
  60 │   verbs:
  61 │   - get
  62 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape4_2.yaml:63-69
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - batch
  65 │   resources:
  66 │   - '*'
  67 │   verbs:
  68 │   - get
  69 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape4_2.yaml:96-102
────────────────────────────────────────
  96 ┌ - apiGroups:
  97 │   - networking.k8s.io
  98 │   resources:
  99 │   - '*'
 100 │   verbs:
 101 │   - get
 102 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape4_2.yaml:103-109
────────────────────────────────────────
 103 ┌ - apiGroups:
 104 │   - policy
 105 │   resources:
 106 │   - '*'
 107 │   verbs:
 108 │   - get
 109 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'kubescape-clusterrole' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 kubescape4_2.yaml:110-116
────────────────────────────────────────
 110 ┌ - apiGroups:
 111 │   - rbac.authorization.k8s.io
 112 │   resources:
 113 │   - '*'
 114 │   verbs:
 115 │   - get
 116 └   - list
────────────────────────────────────────



kubescape4_6.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubescape' of Deployment 'kubescape' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubescape4_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubescape' of 'deployment' 'kubescape' in 'kubeeye-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubescape4_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubescape' of Deployment 'kubescape' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubescape4_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubescape' of Deployment 'kubescape' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubescape4_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubescape' of Deployment 'kubescape' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubescape4_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubescape' of Deployment 'kubescape' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubescape4_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubescape4_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubescape" of deployment "kubescape" in "kubeeye-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubescape4_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubescape4_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubescape in deployment kubescape (namespace: kubeeye-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubescape4_6.yaml:19-42
────────────────────────────────────────
  19 ┌       - image: kubesphere.io/kubescape:latest
  20 │         name: kubescape
  21 │         imagePullPolicy: IfNotPresent
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 80
  26 │           initialDelaySeconds: 15
  27 └           periodSeconds: 20
  ..   
────────────────────────────────────────



kubetail-clusterauth_1.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'kubetail' in 'kubetail' namespace stores secrets in key(s) or value(s) '{"  secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



kubetail-clusterauth_5.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'kubetail' of Deployment 'kubetail' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubetail-clusterauth_5.yaml:43-82
────────────────────────────────────────
  43 ┌       - name: kubetail
  44 │         image: docker.io/kubetail/kubetail:0.6.3
  45 │         securityContext:
  46 │           allowPrivilegeEscalation: false
  47 │           capabilities:
  48 │             drop:
  49 │             - ALL
  50 │           readOnlyRootFilesystem: true
  51 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubetail' of Deployment 'kubetail' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubetail-clusterauth_5.yaml:43-82
────────────────────────────────────────
  43 ┌       - name: kubetail
  44 │         image: docker.io/kubetail/kubetail:0.6.3
  45 │         securityContext:
  46 │           allowPrivilegeEscalation: false
  47 │           capabilities:
  48 │             drop:
  49 │             - ALL
  50 │           readOnlyRootFilesystem: true
  51 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubetail' of Deployment 'kubetail' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubetail-clusterauth_5.yaml:43-82
────────────────────────────────────────
  43 ┌       - name: kubetail
  44 │         image: docker.io/kubetail/kubetail:0.6.3
  45 │         securityContext:
  46 │           allowPrivilegeEscalation: false
  47 │           capabilities:
  48 │             drop:
  49 │             - ALL
  50 │           readOnlyRootFilesystem: true
  51 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubetail' of Deployment 'kubetail' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubetail-clusterauth_5.yaml:43-82
────────────────────────────────────────
  43 ┌       - name: kubetail
  44 │         image: docker.io/kubetail/kubetail:0.6.3
  45 │         securityContext:
  46 │           allowPrivilegeEscalation: false
  47 │           capabilities:
  48 │             drop:
  49 │             - ALL
  50 │           readOnlyRootFilesystem: true
  51 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubetail in deployment kubetail (namespace: kubetail) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubetail-clusterauth_5.yaml:43-82
────────────────────────────────────────
  43 ┌       - name: kubetail
  44 │         image: docker.io/kubetail/kubetail:0.6.3
  45 │         securityContext:
  46 │           allowPrivilegeEscalation: false
  47 │           capabilities:
  48 │             drop:
  49 │             - ALL
  50 │           readOnlyRootFilesystem: true
  51 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



kubetail1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kubetail' in 'kubetail-system' namespace stores sensitive contents in key(s) or value(s) '{"config.yaml"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'kubetail' in 'kubetail-system' namespace stores secrets in key(s) or value(s) '{"    secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



kubetail1_11.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubetail-cluster-api' of 'deployment' 'kubetail-cluster-api' in 'kubetail-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubetail-cluster-api' of Deployment 'kubetail-cluster-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubetail-cluster-api" of deployment "kubetail-cluster-api" in "kubetail-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubetail-cluster-api in kubetail-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubetail1_11.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubetail-cluster-api in kubetail-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubetail1_11.yaml:24-60
────────────────────────────────────────
  24 ┌       serviceAccountName: kubetail-cluster-api
  25 │       containers:
  26 │       - name: kubetail-cluster-api
  27 │         image: kubetail-cluster-api
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 └         args:
  ..   
────────────────────────────────────────



kubetail1_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubetail-cluster-agent' of 'daemonset' 'kubetail-cluster-agent' in 'kubetail-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubetail-cluster-agent' of DaemonSet 'kubetail-cluster-agent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'kubetail-cluster-agent' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 kubetail1_14.yaml:10-62
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: kubetail
  13 │       app.kubernetes.io/component: cluster-agent
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         app.kubernetes.io/name: kubetail
  18 └         app.kubernetes.io/component: cluster-agent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubetail-cluster-agent" of daemonset "kubetail-cluster-agent" in "kubetail-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubetail-cluster-agent in kubetail-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubetail1_14.yaml:22-55
────────────────────────────────────────
  22 ┌       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 │         env:
  29 │         - name: NODE_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset kubetail-cluster-agent in kubetail-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubetail1_14.yaml:20-62
────────────────────────────────────────
  20 ┌       serviceAccountName: kubetail-cluster-agent
  21 │       containers:
  22 │       - name: kubetail-cluster-agent
  23 │         image: kubetail-cluster-agent
  24 │         ports:
  25 │         - name: grpc
  26 │           protocol: TCP
  27 │           containerPort: 50051
  28 └         env:
  ..   
────────────────────────────────────────



kubetail1_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubetail-dashboard' of 'deployment' 'kubetail-dashboard' in 'kubetail-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubetail-dashboard' of Deployment 'kubetail-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubetail-dashboard" of deployment "kubetail-dashboard" in "kubetail-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubetail-dashboard in kubetail-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubetail1_6.yaml:26-56
────────────────────────────────────────
  26 ┌       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 │         args:
  33 │         - --config=/etc/kubetail/config.yaml
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubetail-dashboard in kubetail-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubetail1_6.yaml:24-60
────────────────────────────────────────
  24 ┌       serviceAccountName: kubetail-dashboard
  25 │       containers:
  26 │       - name: kubetail-dashboard
  27 │         image: kubetail-dashboard
  28 │         ports:
  29 │         - name: http
  30 │           protocol: TCP
  31 │           containerPort: 8080
  32 └         args:
  ..   
────────────────────────────────────────



kubetesting_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubetest' of Deployment 'kubetest' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubetest' of Deployment 'kubetest' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubetest' of 'deployment' 'kubetest' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubetest' of Deployment 'kubetest' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubetest' of Deployment 'kubetest' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubetest' of Deployment 'kubetest' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubetest' of Deployment 'kubetest' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubetest' of Deployment 'kubetest' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubetest' of Deployment 'kubetest' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubetest' of Deployment 'kubetest' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubetest' of Deployment 'kubetest' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubetest" of deployment "kubetest" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment kubetest in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubetesting_1.yaml:4
────────────────────────────────────────
   4 [   name: kubetest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kubetest in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubetest in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubetesting_1.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubetest in deployment kubetest (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubetesting_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: kubetest
  17 │         image: ioneluoooo/kubetest:1.0.0
  18 │         ports:
  19 │         - containerPort: 3000
  20 └         imagePullPolicy: Always
────────────────────────────────────────



kubevirt-kvm-ds.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubevirt-kvm-device-plugin' of 'daemonset' 'kubevirt-kvm-device-plugin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'kubevirt-kvm-device-plugin' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:8-28
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       name: kubevirt-kvm-device-plugin
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: kubevirt-kvm-device-plugin
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubevirt-kvm-device-plugin" of daemonset "kubevirt-kvm-device-plugin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset kubevirt-kvm-device-plugin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: kubevirt-kvm-device-plugin
   6 └   name: kubevirt-kvm-device-plugin
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset kubevirt-kvm-device-plugin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubevirt-kvm-device-plugin in daemonset kubevirt-kvm-device-plugin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubevirt-kvm-ds.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────



kubevirt-kvm-ds1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubevirt-kvm-device-plugin' of 'daemonset' 'kubevirt-kvm-device-plugin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'kubevirt-kvm-device-plugin' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:8-28
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       name: kubevirt-kvm-device-plugin
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: kubevirt-kvm-device-plugin
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubevirt-kvm-device-plugin" of daemonset "kubevirt-kvm-device-plugin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset kubevirt-kvm-device-plugin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: kubevirt-kvm-device-plugin
   6 └   name: kubevirt-kvm-device-plugin
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset kubevirt-kvm-device-plugin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubevirt-kvm-device-plugin in daemonset kubevirt-kvm-device-plugin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubevirt-kvm-ds1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────



kubevirt-kvm-ds2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubevirt-kvm-device-plugin' of 'daemonset' 'kubevirt-kvm-device-plugin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'kubevirt-kvm-device-plugin' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:8-28
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       name: kubevirt-kvm-device-plugin
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: kubevirt-kvm-device-plugin
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubevirt-kvm-device-plugin" of daemonset "kubevirt-kvm-device-plugin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset kubevirt-kvm-device-plugin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: kubevirt-kvm-device-plugin
   6 └   name: kubevirt-kvm-device-plugin
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset kubevirt-kvm-device-plugin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubevirt-kvm-device-plugin in daemonset kubevirt-kvm-device-plugin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubevirt-kvm-ds2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────



kubevirt-kvm-ds3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubevirt-kvm-device-plugin' of 'daemonset' 'kubevirt-kvm-device-plugin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubevirt-kvm-device-plugin' of DaemonSet 'kubevirt-kvm-device-plugin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'kubevirt-kvm-device-plugin' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:8-28
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       name: kubevirt-kvm-device-plugin
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: kubevirt-kvm-device-plugin
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubevirt-kvm-device-plugin" of daemonset "kubevirt-kvm-device-plugin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset kubevirt-kvm-device-plugin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: kubevirt-kvm-device-plugin
   6 └   name: kubevirt-kvm-device-plugin
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset kubevirt-kvm-device-plugin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubevirt-kvm-device-plugin in daemonset kubevirt-kvm-device-plugin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubevirt-kvm-ds3.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: kubevirt-kvm-device-plugin
  18 │         image: quay.io/kubevirt/device-plugin-kvm
  19 │         args: ["-v", "3", "-logtostderr"]
  20 │         securityContext:
  21 │           privileged: true
  22 │         volumeMounts:
  23 │           - name: device-plugin
  24 └             mountPath: /var/lib/kubelet/device-plugins
────────────────────────────────────────



kubevirt-operator-v1.3.1_5.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubevirt-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubevirt-operator-v1.3.1_5.yaml:29-39
────────────────────────────────────────
  29 ┌ - apiGroups:
  30 │   - ''
  31 │   resources:
  32 │   - configmaps
  33 │   verbs:
  34 │   - create
  35 │   - get
  36 │   - list
  37 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubevirt-operator' shouldn't have access to manage secrets in namespace 'kubevirt'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubevirt-operator-v1.3.1_5.yaml:9-28
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resourceNames:
  12 │   - kubevirt-ca
  13 │   - kubevirt-export-ca
  14 │   - kubevirt-virt-handler-certs
  15 │   - kubevirt-virt-handler-server-certs
  16 │   - kubevirt-operator-certs
  17 └   - kubevirt-virt-api-certs
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubevirt-operator' shouldn't have access to manage secrets in namespace 'kubevirt'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubevirt-operator-v1.3.1_5.yaml:85-92
────────────────────────────────────────
  85 ┌ - apiGroups:
  86 │   - ''
  87 │   resources:
  88 │   - secrets
  89 │   verbs:
  90 │   - list
  91 │   - get
  92 └   - watch
────────────────────────────────────────



kubevirt-operator-v1.3.1_9.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'virt-operator' of Deployment 'virt-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubevirt-operator-v1.3.1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'virt-operator' of Deployment 'virt-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubevirt-operator-v1.3.1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'virt-operator' of Deployment 'virt-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubevirt-operator-v1.3.1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'virt-operator' of Deployment 'virt-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubevirt-operator-v1.3.1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'virt-operator' of Deployment 'virt-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubevirt-operator-v1.3.1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container virt-operator in deployment virt-operator (namespace: kubevirt) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubevirt-operator-v1.3.1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────



kubevirt-operator1_5.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubevirt-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 kubevirt-operator1_5.yaml:29-39
────────────────────────────────────────
  29 ┌ - apiGroups:
  30 │   - ''
  31 │   resources:
  32 │   - configmaps
  33 │   verbs:
  34 │   - create
  35 │   - get
  36 │   - list
  37 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubevirt-operator' shouldn't have access to manage secrets in namespace 'kubevirt'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 kubevirt-operator1_5.yaml:9-28
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resourceNames:
  12 │   - kubevirt-ca
  13 │   - kubevirt-export-ca
  14 │   - kubevirt-virt-handler-certs
  15 │   - kubevirt-virt-handler-server-certs
  16 │   - kubevirt-operator-certs
  17 └   - kubevirt-virt-api-certs
  ..   
────────────────────────────────────────



kubevirt-operator1_9.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'virt-operator' of Deployment 'virt-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 kubevirt-operator1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'virt-operator' of Deployment 'virt-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 kubevirt-operator1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'virt-operator' of Deployment 'virt-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 kubevirt-operator1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'virt-operator' of Deployment 'virt-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 kubevirt-operator1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'virt-operator' of Deployment 'virt-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 kubevirt-operator1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container virt-operator in deployment virt-operator (namespace: kubevirt) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 kubevirt-operator1_9.yaml:36-85
────────────────────────────────────────
  36 ┌       - args:
  37 │         - --port
  38 │         - '8443'
  39 │         - -v
  40 │         - '2'
  41 │         command:
  42 │         - virt-operator
  43 │         env:
  44 └         - name: VIRT_OPERATOR_IMAGE
  ..   
────────────────────────────────────────


