
Report Summary

┌─────────────────────────────────────┬────────────┬───────────────────┐
│               Target                │    Type    │ Misconfigurations │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV145.yaml                          │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV145_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV2100.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV2103.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV248.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV249.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV250.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV251.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV252.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV253.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV254.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV255.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV256.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV257.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV258.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV259.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV260.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV261.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV262.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV263.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV264.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV265.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV266.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV267.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV268.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV269.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV270.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV271.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV272.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV273.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV282.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PV84.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ PVC-deployment.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv118_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv118_2.yaml                        │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv118_3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv118_4.yaml                        │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv118_5.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv119.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv120.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv121.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv122.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv123.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv1231.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv1231_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv1231_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv1232.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv1232_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv1232_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv123_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv123_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv124.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv124_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv124_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv124_3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv124_4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv125.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv126.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv127.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv128.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv129.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv130.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv132.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv133.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv134.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv135.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv136.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv137.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv138.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv139.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv140.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv141.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv142.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv143.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv144.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv146.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv147.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv148.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv149.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv150.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv151.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv152.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv153.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv155.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv156.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv157.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv157_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv157_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv158.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv159.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv16.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv160.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv161.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv161_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv161_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv162.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv164.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv164_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv165.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv166.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv167.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv168.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv169.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv17.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv170.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv171.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv172.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv173.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv174.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv175.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv176.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv177.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv178.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv179.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv18.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv180.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv181.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv182.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv183.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv184.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv186.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv187.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv188.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv189.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv189_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv19.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv190.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv190_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv191.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv192.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv193.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv194.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv195.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv197.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv198.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv199.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv1_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv2-nfs.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv20.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv21.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv210.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv2102.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv211.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv212.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv213.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv214.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv215.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv216.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv217.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv217_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv217_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv218.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv219.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv219_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv22.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv220.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv220_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv221.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv222.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv223.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv224.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv225.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv226.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv227.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv228.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv229.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv23.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv230.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv231.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv232.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv233.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv234.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv235.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv236.yaml                          │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv237.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv238.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv239.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv24.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv240.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv241.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv242.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv243.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv245.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv247.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv25.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv25_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv25_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv26.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv27.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv274.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv275.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv276.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv277.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv278.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv279.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv28.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv280.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv281.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv281_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv281_2.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv283.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv284.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv285.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv286.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv287.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv288.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv288_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv288_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv289.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv29.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv290.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv291.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv292.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv293.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv294.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv295.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv296.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv297.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv298.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv299.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv30.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv300.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv301.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv302.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv303.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv304.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv305.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv306.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv308.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv309.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv30_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv31.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv310.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv3100.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv3101.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv311.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv312.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv313.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv314.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv315.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv316.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv316_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv317.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv317_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv319.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv31_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv32.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv320.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv321.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv322.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv322_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv322_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv322_3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv322_4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv322_5.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv323.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv324.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv325.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv326.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv327.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv328.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv329.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv33.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv330.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv331.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv332.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv333.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv334.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv335.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv336.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv337.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv337_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv338.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv338_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv339.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv34.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv340.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv341.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv342.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv343.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv344.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv345.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv346.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv348.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv349.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv35.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv350.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv351.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv352.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv353.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv354.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv355.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv356.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv357.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv358.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv359.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv36.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv360.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv361.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv362.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv363.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv364.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv365.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv366.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv367.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv368.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv369.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv36_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv37.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv370.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv371.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv372.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv373.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv374.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv375.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv376.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv377.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv378.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv379.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv38.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv380.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv380_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv381.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv381_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv382.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv382_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv382_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv383.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv384.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv385.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv386.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv387.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv388.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv388_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv388_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv389.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv38_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv39.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv390.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv391.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv392.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv393.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv394.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv394_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv395.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv396.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv398.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv399.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv399_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv39_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv4.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv40.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv400.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv400_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv401.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv401_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv402.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv402_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv403.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv403_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv404.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv405.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv406.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv407.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv408.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv409.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv41.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv410.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv411.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv411_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv411_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv411_3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv412.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv413.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv414.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv415.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv416.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv417.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv418.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv419.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv41_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv42.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv420.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv420_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv421.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv421_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv422.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv422_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv423.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv423_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv424.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv424_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv425.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv426.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv427.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv428.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv429.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv429_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv42_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv43.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv430.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv431.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv432.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv433.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv434.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv435.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv436.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv437.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv438.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv439.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv44.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv440.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv441.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv442.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv443.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv444.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv445.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv446.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv447.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv449.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv45.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv450.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv451.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv452.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv453.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv454.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv455.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv456.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv457.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv458.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv459.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv46.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv460.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv461.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv462.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv463.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv464.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv465.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv466.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv466_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv467.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv468.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv469.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv47.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv470.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv471.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv472.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv473.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv474.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv475.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv476.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv477.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv478.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv479.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv48.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv480.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv481.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv482.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv483.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv484.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv485.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv486.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv489.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv49.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv490.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv492.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv493.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv494.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv495.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv496.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv497.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv498.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv499.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv5.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv500.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv501.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv502.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv503.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv504.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv505.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv506.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv507.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv510.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv55.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv56.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv57.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv58.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv59.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv6.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv60.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv61.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv62.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv63.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv63_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv63_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv64.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv65.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv66.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv67.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv68.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv68_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv69.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv69_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv7.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv70.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv71.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv72.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv73.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv73_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv74.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv75.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv76.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv76_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv77.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv77_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv78.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv79.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv8.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv80.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv81.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv82.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv83.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv88.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv89.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv9.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv90.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv91.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv92.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv93.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv94.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv95.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv97.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv97_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv98.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pv99.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-4k.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-4k1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-agent-host.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-app-silvestrini.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-app.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-autogain.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-autoresizer.yaml                │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-azure-disk.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bad.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bad1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bad2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bad3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bad4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bad5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bad6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bad7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bad8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bad9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-blobfuse.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-bookstack.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-claim.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-claim1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-coit-frontend.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-common.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-config.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-config1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-config2.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-config_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-configs.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dag.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-data1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-data2.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-data3.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-data4.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-data5.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-data6.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-data7.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-data8.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-database.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-database1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-db.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-db1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-db2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition10.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition11.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition2.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition3.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition4.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition5.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition6.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition7.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition8.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-definition9.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-demo.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-demo1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dep-replicas-24-preferred.yaml  │ kubernetes │        15         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dep-replicas-24-preferred1.yaml │ kubernetes │        15         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dep-replicas-6.yaml             │ kubernetes │        15         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dep-replicas-61.yaml            │ kubernetes │        15         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-disk-static.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-disk-static1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-django.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-django1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-docs.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-downloads.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-downloads1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-downloads2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic-file-1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic-file.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic-file1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic1_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic1_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic3_1.yaml                 │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-dynamic_2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-ebs-sc.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-ebs.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-ebs1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-ebs2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-ejemplo1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-ejemplo11.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-ejemplo2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-ejemplo21.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-etcd-backup.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-example.yaml                    │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-example1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-example2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-example2_1.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-files-dynamic.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-files-dynamic1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-files.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-files1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-for-wp-deployment.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-for-wp-statefulset.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-from-snap.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-from-snap1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-frontend.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-ghost.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-glusterfs.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-glusterfs1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good2.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good2_1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good3.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good4.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good4_1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good5.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good6.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good6_1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good7.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good8.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good8_1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good9.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-good_1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-hostpath.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-hostpath1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-hostpath2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-http.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-http1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-imagens.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-images.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-initdb.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-initdb1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-inspector1.yaml                 │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-keys.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-local-nfs.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-local.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-local1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-local2.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-local3.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-log.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-logs.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-longhorn.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-longhorn1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-man.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mariadb.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mariadb1.yaml                   │ kubernetes │        16         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mariadb1_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mariadb2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mariadb3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mariadb4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-marketplace.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-master-share-host.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-media.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-media1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-meu.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-meu1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-modules.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-modules1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-moodledata.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-movies.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-movies1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql10.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql11.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql12.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql13.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql14.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql15.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql2.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql3.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql4.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql5.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql6.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql8.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-mysql9.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs-mdw.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs-sdw1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs-sdw2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs-sdw3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs-sdw4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs-sdw5.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs11.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs13.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs14.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs15.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nfs9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nginx.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nginx1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nginx2.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-nginx3.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-ocr.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-account-hdd.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-account-hdd1.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-account-hdd2.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-dedicated-hdd.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-dedicated-hdd1.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-dedicated-hdd2.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-managed-hdd.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-managed-hdd1.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-managed-hdd2.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-managed-ssd.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-managed-ssd1.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-managed-ssd2.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-shared-hdd.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-shared-hdd1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-shared-hdd2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-shared-ssd.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-shared-ssd1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-on-shared-ssd2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-openebs.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-patch.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-patch1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-patch2.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-patch3.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-patch4.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-patch5.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-patch6.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-patch7.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-patch8.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-persistentvolumeclaim.yaml      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-phpmyadmin.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-plex.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-plugin.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-pod-web.yaml                    │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-pod-web1.yaml                   │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-pod-web2.yaml                   │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-pod.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-pod1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-pod1_1.yaml                     │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-pod2.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-pod3.yaml                       │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-pod_1.yaml                      │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgis.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgres.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgres1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgresql.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgresql1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgresql2.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgresql3.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgresql4.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgresql5.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgresql6.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-postgress.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-redis.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-redis1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-restore.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-restore1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-restore2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-rrd.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-rwx.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ pvc-sc-ex1-definition.yaml          │ kubernetes │         0         │
└─────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


PV145.yaml (kubernetes)
=======================
Tests: 96 (SUCCESSES: 94, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment deploy-vo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 PV145.yaml:4-6
────────────────────────────────────────
   4 ┌   name: deploy-vo
   5 │   labels:
   6 └     app: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deploy-vo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PV145.yaml:13-16
────────────────────────────────────────
  13 ┌     metadata:
  14 │       name: deploy-vo
  15 │       labels:
  16 └         app: web
────────────────────────────────────────



PVC-deployment.yaml (kubernetes)
================================
Tests: 97 (SUCCESSES: 78, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongodb' of Deployment 'mongo-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongodb' of Deployment 'mongo-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongodb' of 'deployment' 'mongo-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongodb' of Deployment 'mongo-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongodb' of Deployment 'mongo-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongodb' of Deployment 'mongo-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongodb' of Deployment 'mongo-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mongodb' of Deployment 'mongo-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mongodb' of Deployment 'mongo-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongodb' of Deployment 'mongo-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongodb' of Deployment 'mongo-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongodb' of Deployment 'mongo-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0028 (LOW): Deployment 'mongo-deployment' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 PVC-deployment.yaml:8-32
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mongodb
  12 │       name: mongodb
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: mongodb
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongodb" of deployment "mongo-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mongo-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 PVC-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mongo-deployment
   5 │   labels:
   6 └     app: mongodb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongo-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PVC-deployment.yaml:20-25
────────────────────────────────────────
  20 ┌       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 └           mountPath: /data/db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongo-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PVC-deployment.yaml:19-32
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: mongo
  21 │         name: mongodb
  22 │         imagePullPolicy: Always
  23 │         volumeMounts:
  24 │         - name: mongodb-data1
  25 │           mountPath: /data/db
  26 │       volumes:
  27 └       - name: mongodb-data1
  ..   
────────────────────────────────────────



pv118_2.yaml (kubernetes)
=========================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongodb-container' of 'deployment' 'mongo-db-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongodb-container' of Deployment 'mongo-db-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongodb-container" of deployment "mongo-db-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mongo-db-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv118_2.yaml:4
────────────────────────────────────────
   4 [   name: mongo-db-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongo-db-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv118_2.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_INITDB_ROOT_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongo-db-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv118_2.yaml:16-32
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: mongodb-container
  18 │         image: mongo
  19 │         ports:
  20 │         - containerPort: 27017
  21 │         env:
  22 │         - name: MONGO_INITDB_ROOT_USERNAME
  23 │           value: monika
  24 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────



pv118_4.yaml (kubernetes)
=========================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'spring-mongo-container' of 'deployment' 'mongo-spring-boot-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'spring-mongo-container' of Deployment 'mongo-spring-boot-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "spring-mongo-container" of deployment "mongo-spring-boot-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mongo-spring-boot-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv118_4.yaml:4
────────────────────────────────────────
   4 [   name: mongo-spring-boot-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongo-spring-boot-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongo-spring-boot-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv118_4.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 └         - name: MONGO_DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container spring-mongo-container in deployment mongo-spring-boot-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pv118_4.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: spring-mongo-container
  18 │         image: dockerhandson/spring-boot-mongo:1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: MONGO_DB_USERNAME
  23 │           value: monika
  24 │         - name: MONGO_DB_PASSWORD
  25 └           value: monika@567
  ..   
────────────────────────────────────────



pv160.yaml (kubernetes)
=======================
Tests: 97 (SUCCESSES: 78, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'aws-ebs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'aws-ebs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'aws-ebs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'aws-ebs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'aws-ebs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'aws-ebs' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'aws-ebs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'aws-ebs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'aws-ebs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'aws-ebs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'aws-ebs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'aws-ebs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0028 (LOW): Pod 'aws-ebs' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 pv160.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 │           name: test-volume
  12 │   volumes:
  13 │     - name: test-volume
  14 └       awsElasticBlockStore:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "aws-ebs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod aws-ebs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv160.yaml:4
────────────────────────────────────────
   4 [   name: aws-ebs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aws-ebs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv160.yaml:7-11
────────────────────────────────────────
   7 ┌     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 └           name: test-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod aws-ebs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv160.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: k8s.gcr.io/test-webserver
   8 │       name: test-container
   9 │       volumeMounts:
  10 │         - mountPath: /aws-ebs
  11 │           name: test-volume
  12 │   volumes:
  13 │     - name: test-volume
  14 └       awsElasticBlockStore:
  ..   
────────────────────────────────────────



pv236.yaml (kubernetes)
=======================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Pod 'app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Pod 'app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Pod 'app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Pod 'app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Pod 'app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv236.yaml:4
────────────────────────────────────────
   4 [   name: app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv236.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv236.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: app
   8 │     image: centos
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
  11 │     volumeMounts:
  12 │     - name: persistent-storage
  13 │       mountPath: /data
  14 └   volumes:
  ..   
────────────────────────────────────────



pv281_2.yaml (kubernetes)
=========================
Tests: 97 (SUCCESSES: 78, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'my-pod' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 pv281_2.yaml:6-15
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: vol
   8 │     hostPath:
   9 │       path: /mnt
  10 │   containers:
  11 │   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv281_2.yaml:4
────────────────────────────────────────
   4 [   name: my-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv281_2.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv281_2.yaml:6-15
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: vol
   8 │     hostPath:
   9 │       path: /mnt
  10 │   containers:
  11 │   - name: my-container
  12 │     image: nginx
  13 │     volumeMounts:
  14 │     - name: vol
  15 └       mountPath: /var/www/html
────────────────────────────────────────



pvc-autoresizer.yaml (kubernetes)
=================================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pvc-autoresizer' of Deployment 'hwameistor-pvc-autoresizer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pvc-autoresizer' of Deployment 'hwameistor-pvc-autoresizer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pvc-autoresizer' of 'deployment' 'hwameistor-pvc-autoresizer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pvc-autoresizer' of Deployment 'hwameistor-pvc-autoresizer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pvc-autoresizer' of Deployment 'hwameistor-pvc-autoresizer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pvc-autoresizer' of Deployment 'hwameistor-pvc-autoresizer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pvc-autoresizer' of Deployment 'hwameistor-pvc-autoresizer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pvc-autoresizer' of Deployment 'hwameistor-pvc-autoresizer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pvc-autoresizer' of Deployment 'hwameistor-pvc-autoresizer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pvc-autoresizer' of Deployment 'hwameistor-pvc-autoresizer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pvc-autoresizer' of Deployment 'hwameistor-pvc-autoresizer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pvc-autoresizer" of deployment "hwameistor-pvc-autoresizer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hwameistor-pvc-autoresizer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-autoresizer.yaml:5-8
────────────────────────────────────────
   5 ┌   name: hwameistor-pvc-autoresizer
   6 │   namespace: default
   7 │   labels:
   8 └     app: hwameistor-pvc-autoresizer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-pvc-autoresizer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hwameistor-pvc-autoresizer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-autoresizer.yaml:21-25
────────────────────────────────────────
  21 ┌       serviceAccountName: hwameistor-admin
  22 │       containers:
  23 │         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pvc-autoresizer in deployment hwameistor-pvc-autoresizer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pvc-autoresizer.yaml:23-25
────────────────────────────────────────
  23 ┌         - name: pvc-autoresizer
  24 │           image: ghcr.io/hwameistor/pvc-autoresizer:v0.14.1
  25 └           imagePullPolicy: IfNotPresent
────────────────────────────────────────



pvc-dep-replicas-24-preferred.yaml (kubernetes)
===============================================
Tests: 97 (SUCCESSES: 82, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'pvc-pod-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "pvc-pod-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pvc-pod-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:4
────────────────────────────────────────
   4 [   name: pvc-pod-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pvc-pod-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pvc-pod-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pvc-pod-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:17-50
────────────────────────────────────────
  17 ┌       nodeSelector:            
  18 │         kubernetes.io/os: linux  
  19 │       containers:
  20 │       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 └         resources: 
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment pvc-pod-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pvc-dep-replicas-24-preferred.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────



pvc-dep-replicas-24-preferred1.yaml (kubernetes)
================================================
Tests: 97 (SUCCESSES: 82, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'pvc-pod-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "pvc-pod-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pvc-pod-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:4
────────────────────────────────────────
   4 [   name: pvc-pod-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pvc-pod-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pvc-pod-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pvc-pod-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:17-50
────────────────────────────────────────
  17 ┌       nodeSelector:            
  18 │         kubernetes.io/os: linux  
  19 │       containers:
  20 │       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 └         resources: 
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment pvc-pod-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pvc-dep-replicas-24-preferred1.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────



pvc-dep-replicas-6.yaml (kubernetes)
====================================
Tests: 97 (SUCCESSES: 82, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'pvc-pod-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "pvc-pod-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pvc-pod-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:4
────────────────────────────────────────
   4 [   name: pvc-pod-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pvc-pod-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pvc-pod-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pvc-pod-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:17-48
────────────────────────────────────────
  17 ┌       nodeSelector:            
  18 │         kubernetes.io/os: linux  
  19 │       containers:
  20 │       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 └         resources: 
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment pvc-pod-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pvc-dep-replicas-6.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────



pvc-dep-replicas-61.yaml (kubernetes)
=====================================
Tests: 97 (SUCCESSES: 82, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'pvc-pod-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'pvc-pod-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "pvc-pod-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pvc-pod-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:4
────────────────────────────────────────
   4 [   name: pvc-pod-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pvc-pod-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pvc-pod-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pvc-pod-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:17-48
────────────────────────────────────────
  17 ┌       nodeSelector:            
  18 │         kubernetes.io/os: linux  
  19 │       containers:
  20 │       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 └         resources: 
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment pvc-pod-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pvc-dep-replicas-61.yaml:20-34
────────────────────────────────────────
  20 ┌       - name: nginx
  21 │         image: k8slab/nginx:1.0
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 │         resources: 
  26 │           requests:
  27 │             cpu: 80m
  28 └             memory: 128Mi
  ..   
────────────────────────────────────────



pvc-dynamic3_1.yaml (kubernetes)
================================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-dynamic-pvc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-dynamic-pvc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-dynamic-pvc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment deployment-dynamic-pvc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-dynamic3_1.yaml:4
────────────────────────────────────────
   4 [   name: deployment-dynamic-pvc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-dynamic-pvc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-dynamic3_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-dynamic-pvc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-dynamic3_1.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: data
  20 │           mountPath: /usr/share/nginx/html
  21 │       volumes:
  22 │       - name: data
  23 │         persistentVolumeClaim:
  24 └           claimName: pvc-dynamic-example
────────────────────────────────────────



pvc-example.yaml (kubernetes)
=============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myfrontend' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myfrontend' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myfrontend' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myfrontend' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myfrontend' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myfrontend' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myfrontend' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myfrontend' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myfrontend' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myfrontend' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myfrontend' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myfrontend' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myfrontend" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-example.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-example.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 └         name: mypd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-example.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: myfrontend
   8 │       image: nginx
   9 │       volumeMounts:
  10 │       - mountPath: "/var/www/html"
  11 │         name: mypd
  12 │   volumes:
  13 │     - name: mypd
  14 │       persistentVolumeClaim:
  15 └         claimName: myclaim
────────────────────────────────────────



pvc-example2_1.yaml (kubernetes)
================================
Tests: 97 (SUCCESSES: 78, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-example2_1.yaml:4
────────────────────────────────────────
   4 [   name: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-example2_1.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: my-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-example2_1.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: my-pv-storage
   8 │     persistentVolumeClaim:
   9 │       claimName: my-pv-claim
  10 │   containers:
  11 │   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 └     - containerPort: 80
  ..   
────────────────────────────────────────



pvc-inspector1.yaml (kubernetes)
================================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pvc-inspector' of Pod 'pvc-inspector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pvc-inspector' of Pod 'pvc-inspector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pvc-inspector' of 'pod' 'pvc-inspector' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pvc-inspector' of Pod 'pvc-inspector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pvc-inspector' of Pod 'pvc-inspector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pvc-inspector' of Pod 'pvc-inspector' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pvc-inspector' of Pod 'pvc-inspector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pvc-inspector' of Pod 'pvc-inspector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pvc-inspector' of Pod 'pvc-inspector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pvc-inspector' of Pod 'pvc-inspector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pvc-inspector' of Pod 'pvc-inspector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pvc-inspector' of Pod 'pvc-inspector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pvc-inspector" of pod "pvc-inspector" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pvc-inspector in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-inspector1.yaml:4
────────────────────────────────────────
   4 [   name: pvc-inspector
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pvc-inspector in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-inspector1.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 └       name: pvc-mount
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pvc-inspector in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-inspector1.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     name: pvc-inspector
   9 │     command: ["tail"]
  10 │     args: ["-f", "/dev/null"]
  11 │     volumeMounts:
  12 │     - mountPath: /storage
  13 │       name: pvc-mount
  14 └   volumes:
  ..   
────────────────────────────────────────



pvc-mariadb1.yaml (kubernetes)
==============================
Tests: 97 (SUCCESSES: 81, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mariadb-container' of Pod 'mariadb-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mariadb-container' of Pod 'mariadb-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mariadb-container' of 'pod' 'mariadb-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mariadb-container' of Pod 'mariadb-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mariadb-container' of Pod 'mariadb-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mariadb-container' of Pod 'mariadb-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mariadb-container' of Pod 'mariadb-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mariadb-container' of Pod 'mariadb-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mariadb-container' of Pod 'mariadb-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mariadb-container' of Pod 'mariadb-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mariadb-container" of pod "mariadb-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mariadb-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-mariadb1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mariadb-demo
   5 │   labels:
   6 └     app: mariadb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mariadb-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-mariadb1.yaml:9-20
────────────────────────────────────────
   9 ┌   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 │         cpu: 1
  17 └         memory: 4Gi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mariadb-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-mariadb1.yaml:8-24
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mariadb-container
  10 │     image: mariadb:latest
  11 │     volumeMounts:
  12 │     - mountPath: /var/lib/mysql
  13 │       name: mariadb-volume
  14 │     resources:
  15 │       requests:
  16 └         cpu: 1
  ..   
────────────────────────────────────────



pvc-pod-web.yaml (kubernetes)
=============================
Tests: 97 (SUCCESSES: 80, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-pod-web.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod-web.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod-web.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 │       mountPath: /usr/share/nginx/html
  12 │   volumes:
  13 │   - name: html
  14 │     persistentVolumeClaim:
  15 └       claimName: pvc-web
────────────────────────────────────────



pvc-pod-web1.yaml (kubernetes)
==============================
Tests: 97 (SUCCESSES: 80, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-pod-web1.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod-web1.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod-web1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 │       mountPath: /usr/share/nginx/html
  12 │   volumes:
  13 │   - name: html
  14 │     persistentVolumeClaim:
  15 └       claimName: pvc-web
────────────────────────────────────────



pvc-pod-web2.yaml (kubernetes)
==============================
Tests: 97 (SUCCESSES: 80, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-pod-web2.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod-web2.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod-web2.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: nginx:1.14
   8 │     name: nginx
   9 │     volumeMounts:
  10 │     - name: html
  11 │       mountPath: /usr/share/nginx/html
  12 │   volumes:
  13 │   - name: html
  14 │     persistentVolumeClaim:
  15 └       claimName: pvc-web
────────────────────────────────────────



pvc-pod1_1.yaml (kubernetes)
============================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'pod-using-dynamic-pv' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'pod-using-dynamic-pv' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "pod-using-dynamic-pv" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-using-dynamic-pv in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-pod1_1.yaml:4
────────────────────────────────────────
   4 [   name: pod-using-dynamic-pv
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-using-dynamic-pv in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-using-dynamic-pv in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod1_1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 │       name: storage
  12 │   volumes:
  13 │   - name: storage
  14 │     persistentVolumeClaim:
  15 └       claimName: dynamic-example-pvc
────────────────────────────────────────



pvc-pod2.yaml (kubernetes)
==========================
Tests: 97 (SUCCESSES: 78, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-nginx-pod' of 'pod' 'my-nginx-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-nginx-pod' of Pod 'my-nginx-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-nginx-pod" of pod "my-nginx-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-nginx-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-pod2.yaml:4
────────────────────────────────────────
   4 [   name: my-nginx-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod my-nginx-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-nginx-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod2.yaml:11-18
────────────────────────────────────────
  11 ┌     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 │         - containerPort: 80
  15 │           name: "http-server"
  16 │       volumeMounts:
  17 │         - mountPath: "/log"
  18 └           name: mypvlog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-nginx-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod2.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │     - name: mypvlog
   8 │       persistentVolumeClaim:
   9 │         claimName: pv-claim-log
  10 │   containers:
  11 │     - name: my-nginx-pod
  12 │       image: nginx
  13 │       ports:
  14 └         - containerPort: 80
  ..   
────────────────────────────────────────



pvc-pod3.yaml (kubernetes)
==========================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busyboxcont' of Pod 'pvcpod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busyboxcont' of Pod 'pvcpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busyboxcont' of 'pod' 'pvcpod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busyboxcont' of Pod 'pvcpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busyboxcont' of Pod 'pvcpod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busyboxcont' of Pod 'pvcpod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busyboxcont' of Pod 'pvcpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busyboxcont' of Pod 'pvcpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busyboxcont' of Pod 'pvcpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busyboxcont' of Pod 'pvcpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busyboxcont' of Pod 'pvcpod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busyboxcont' of Pod 'pvcpod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busyboxcont" of pod "pvcpod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pvcpod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-pod3.yaml:4
────────────────────────────────────────
   4 [   name: pvcpod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pvcpod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod3.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  15 │     volumeMounts:
  16 │     - mountPath: /data
  17 └       name: datavolume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pvcpod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod3.yaml:6-17
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: datavolume
   8 │     persistentVolumeClaim:
   9 │       claimName: my-pvc
  10 │   containers:
  11 │   - name: busyboxcont
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 └     args: ['-c','while true; do echo $(date) >> /data/dates.txt; sleep 10; done;']
  ..   
────────────────────────────────────────



pvc-pod_1.yaml (kubernetes)
===========================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'pod-using-dynamic-pv' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'pod-using-dynamic-pv' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'pod-using-dynamic-pv' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "pod-using-dynamic-pv" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-using-dynamic-pv in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc-pod_1.yaml:4
────────────────────────────────────────
   4 [   name: pod-using-dynamic-pv
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-using-dynamic-pv in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-using-dynamic-pv in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc-pod_1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 │       name: storage
  12 │   volumes:
  13 │   - name: storage
  14 │     persistentVolumeClaim:
  15 └       claimName: dynamic-example-pvc
────────────────────────────────────────


