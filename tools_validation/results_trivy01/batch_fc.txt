
Report Summary

┌────────────────────────────────────────┬────────────┬───────────────────┐
│                 Target                 │    Type    │ Misconfigurations │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ Metrics-server5.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ Metrics-server5_1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ Metrics-server5_2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ Metrics-server5_3.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ Metrics-server5_4.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ Metrics-server5_5.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ Metrics-server5_6.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ Metrics-server5_7.yaml                 │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ Metrics-server5_8.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server35_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server35_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server35_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server35_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server36.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server36_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server36_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server36_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server36_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server36_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server36_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server36_7.yaml                │ kubernetes │        14         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server36_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server37.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server37_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server37_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server37_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server37_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server37_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server37_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server37_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server37_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server38.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server38_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server38_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server38_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server38_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server38_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server38_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server38_7.yaml                │ kubernetes │        14         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server38_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server39.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server39_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server39_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server39_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server39_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server39_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server39_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server39_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server39_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server4.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server40.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server40_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server40_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server40_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server40_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server40_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server40_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server40_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server40_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server42.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server42_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server42_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server42_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server42_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server42_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server42_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server42_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server42_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server43.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server43_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server43_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server43_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server43_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server43_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server43_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server43_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server43_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server44.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server44_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server44_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server44_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server44_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server44_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server44_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server44_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server44_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server46.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server46_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server46_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server46_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server46_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server46_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server46_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server46_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server46_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server48.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server48_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server48_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server48_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server48_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server48_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server48_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server48_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server48_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server49.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server49_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server49_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server49_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server49_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server49_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server49_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server49_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server49_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server4_1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server4_2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server4_4.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server4_5.yaml                 │ kubernetes │        14         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server4_6.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server4_7.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server4_8.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server50.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server50_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server50_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server50_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server50_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server50_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server50_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server50_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server50_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server51.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server51_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server51_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server51_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server51_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server51_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server51_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server51_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server51_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server52.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server52_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server52_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server52_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server52_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server52_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server52_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server52_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server52_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server53.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server53_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server53_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server53_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server53_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server53_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server53_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server53_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server53_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server55.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server55_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server55_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server55_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server55_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server55_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server55_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server55_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server55_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server56.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server56_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server56_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server56_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server56_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server56_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server56_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server56_7.yaml                │ kubernetes │        14         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server56_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server57.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server57_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server57_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server57_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server57_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server57_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server57_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server57_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server57_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server58.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server58_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server58_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server58_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server58_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server58_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server58_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server58_7.yaml                │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server58_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server59.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server59_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server59_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server59_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server59_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server59_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server59_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server59_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server59_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server6.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server60.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server60_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server60_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server60_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server60_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server60_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server60_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server60_7.yaml                │ kubernetes │        10         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server60_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server61.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server61_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server61_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server61_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server61_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server61_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server61_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server61_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server61_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server69.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server6_1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server6_2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server6_3.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server6_4.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server6_5.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server6_6.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server6_7.yaml                 │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server6_8.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server7.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server70.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server70_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server70_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server70_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server70_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server70_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server70_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server70_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server70_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server77.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server77_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server77_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server77_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server77_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server77_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server77_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server77_7.yaml                │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server77_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server79.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server79_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server79_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server79_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server79_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server79_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server79_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server79_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server79_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server7_1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server7_2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server7_3.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server7_4.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server7_5.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server7_6.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server7_7.yaml                 │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server7_8.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server8.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server80.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server80_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server80_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server80_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server80_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server80_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server80_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server80_7.yaml                │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server80_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server82.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server82_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server82_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server82_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server82_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server82_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server82_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server82_7.yaml                │ kubernetes │        11         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server82_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server83.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server83_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server83_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server83_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server83_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server83_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server83_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server83_7.yaml                │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server83_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server85.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server85_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server85_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server85_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server85_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server85_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server85_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server85_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server85_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server86.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server86_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server86_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server86_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server86_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server86_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server86_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server86_7.yaml                │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server86_8.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server86_9.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server87.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server87_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server87_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server87_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server87_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server87_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server87_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server87_7.yaml                │ kubernetes │        13         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server87_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server88.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server88_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server88_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server88_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server88_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server88_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server88_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server88_7.yaml                │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server88_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server89.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server89_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server89_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server89_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server89_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server89_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server89_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server89_7.yaml                │ kubernetes │        10         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server89_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server8_1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server8_2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server8_3.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server8_4.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server8_5.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server8_6.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server8_7.yaml                 │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server8_8.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server9.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server90.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server90_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server90_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server90_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server90_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server90_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server90_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server90_7.yaml                │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server90_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server91.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server91_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server91_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server91_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server91_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server91_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server91_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server91_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server91_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server92.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server92_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server92_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server92_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server92_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server92_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server92_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server92_7.yaml                │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server92_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server93.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server93_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server93_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server93_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server93_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server93_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server93_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server93_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server93_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server94.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server94_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server94_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server94_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server94_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server94_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server94_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server94_7.yaml                │ kubernetes │         8         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server94_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server97.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server97_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server97_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server97_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server97_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server97_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server97_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server97_7.yaml                │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server97_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server98.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server98_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server98_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server98_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server98_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server98_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server98_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server98_7.yaml                │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server98_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server99.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server99_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server99_2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server99_3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server99_4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server99_5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server99_6.yaml                │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server99_7.yaml                │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server99_8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server9_1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server9_2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server9_3.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server9_4.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server9_5.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server9_6.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server9_7.yaml                 │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-server9_8.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-service30.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-serviceaccount.yaml            │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-serviceaccount1.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-serviceaccount2.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-serviceaccount3.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-serviceaccount4.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-statefulset.yaml               │ kubernetes │         9         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics-sv.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics15.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics15_1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics15_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics15_3.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics15_4.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics15_5.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics15_6.yaml                       │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics15_7.yaml                       │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics15_8.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics35.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics35_1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics35_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics35_3.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics35_4.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics35_5.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics35_6.yaml                       │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics35_7.yaml                       │ kubernetes │        14         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics35_8.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics36.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics36_1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics36_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics36_3.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics36_4.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics36_5.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics36_6.yaml                       │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics36_7.yaml                       │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics36_8.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics50.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics50_1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics50_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics50_3.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics50_4.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics50_5.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics50_6.yaml                       │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics50_7.yaml                       │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics50_8.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics53.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics53_1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics53_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics53_3.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics53_4.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics53_5.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics53_6.yaml                       │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics53_7.yaml                       │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics53_8.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics54.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics54_1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics54_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics54_3.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics54_4.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics54_5.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics54_6.yaml                       │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics54_7.yaml                       │ kubernetes │        14         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics54_8.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics55.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics55_1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics55_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics55_3.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics55_4.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics55_5.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics55_6.yaml                       │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics55_7.yaml                       │ kubernetes │        14         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics55_8.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics56.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics56_1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics56_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics56_3.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics56_4.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics56_5.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics56_6.yaml                       │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics56_7.yaml                       │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics56_8.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics63.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics63_1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics63_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics63_3.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics63_4.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics63_5.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics63_6.yaml                       │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics63_7.yaml                       │ kubernetes │        15         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics63_8.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_access_client_clusterrole.yaml │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_access_role.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_access_role_binding.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_access_service.yaml            │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role10.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role11.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role12.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role13.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role14.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role15.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role16.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role17.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role18.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role19.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role2.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role20.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role21.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role22.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role23.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role3.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role4.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role5.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role6.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role7.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role8.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role9.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding.yaml         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding1.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding10.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding11.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding12.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding13.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding14.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding15.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding16.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding17.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding18.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding19.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding2.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding20.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding21.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding22.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding23.yaml       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding3.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding4.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding5.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding6.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding7.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding8.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_auth_role_binding9.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_deployment.yaml                │ kubernetes │         8         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_deployment1.yaml               │ kubernetes │         8         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_ingress_final.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_ingress_final1.yaml            │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role10.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role11.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role12.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role13.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role14.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role15.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role16.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role17.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role18.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role19.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role2.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role20.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role21.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role22.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role23.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role3.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role4.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role5.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role6.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role7.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role8.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_reader_role9.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server1.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server1_1.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server1_2.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server1_3.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server1_4.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server1_5.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server1_6.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server1_7.yaml                 │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server1_8.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server_1.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server_2.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server_3.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server_4.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server_5.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server_6.yaml                  │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server_7.yaml                  │ kubernetes │        12         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_server_8.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service1.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service10.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service11.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service12.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service13.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service14.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service15.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service16.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service17.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service18.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service19.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service2.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service20.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service21.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service22.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service23.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service24.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service25.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service26.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service27.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service28.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service29.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service3.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service4.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service40.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service41.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service42.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service43.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service44.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service45.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service46.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service47.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service48.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service49.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service5.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service50.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service51.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service52.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service53.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service6.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service7.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service8.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metrics_service9.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.7.yaml                │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.71.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.71_1.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.71_2.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.71_4.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.71_5.yaml             │ kubernetes │        14         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.71_6.yaml             │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.71_7.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.71_8.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.7_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.7_2.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.7_4.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.7_5.yaml              │ kubernetes │        14         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.7_6.yaml              │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.7_7.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-0.3.7_8.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.29.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.291.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.291_1.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.291_2.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.291_3.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.291_4.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.291_5.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.291_6.yaml           │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.291_7.yaml           │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.291_8.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.29_1.yaml            │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.29_2.yaml            │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.29_3.yaml            │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.29_4.yaml            │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.29_5.yaml            │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.29_6.yaml            │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.29_7.yaml            │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver-k8s1.29_8.yaml            │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver_1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver_2.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver_3.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver_4.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver_5.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver_6.yaml                    │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver_7.yaml                    │ kubernetes │         7         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ metricserver_8.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-1.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-11.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-11_1.yaml                      │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-11_2.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-1_1.yaml                       │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-1_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-2.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-21.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-21_1.yaml                      │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-21_2.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-2_1.yaml                       │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-app-2_2.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-cronjob.yaml                       │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-nginx-daemonset.yaml               │ kubernetes │        22         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-nginx-daemonset1.yaml              │ kubernetes │        22         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-primeiro-deployment.yaml           │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-primeiro-pod.yaml                  │ kubernetes │        15         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-primeiro-pod1.yaml                 │ kubernetes │        15         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-primeiro-pod2.yaml                 │ kubernetes │         8         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-primeiro-pod3.yaml                 │ kubernetes │        15         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-primeiro-pod4.yaml                 │ kubernetes │        15         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-primeiro-pod6.yaml                 │ kubernetes │        15         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-primeiro-pod7.yaml                 │ kubernetes │        15         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-primiero-pod.yaml                  │ kubernetes │        15         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-rabbit-mq.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-rabbit-mq_1.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-rabbit-mq_2.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-rabbit-mq_3.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-rabbit-mq_4.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-rabbit-mq_5.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-rabbit-mq_6.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu-rabbit-mq_7.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu_primeiro_namespace.yaml            │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu_primeiro_namespace1.yaml           │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu_primeiro_pod.yaml                  │ kubernetes │        17         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu_primeiro_pod1.yaml                 │ kubernetes │        17         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu_segundo_pod.yaml                   │ kubernetes │        19         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meu_segundo_pod1.yaml                  │ kubernetes │        19         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meupode.yaml                           │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meuprimeiropod.yaml                    │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ meuprimeiropod1.yaml                   │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks.yaml                           │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks1.yaml                          │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks1_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks1_2.yaml                        │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks1_3.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks2.yaml                          │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks2_1.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks2_2.yaml                        │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks2_3.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks_1.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks_2.yaml                         │ kubernetes │        18         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ mhc-aks_3.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ miapp.yaml                             │ kubernetes │        17         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ miappservice.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ michinori-scheduler.yaml               │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ michinori-scheduler_1.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ michinori-scheduler_2.yaml             │ kubernetes │        19         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ micro-ingress.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microfrontend_editor_role.yaml         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microfrontend_editor_role1.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microfrontend_viewer_role.yaml         │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microfrontend_viewer_role1.yaml        │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microfrontendclass_editor_role.yaml    │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microfrontendclass_editor_role1.yaml   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microfrontendclass_viewer_role.yaml    │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microfrontendclass_viewer_role1.yaml   │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-config.yaml              │ kubernetes │         1         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo.yaml                │ kubernetes │         5         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_10.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_11.yaml             │ kubernetes │         5         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_12.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_13.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_14.yaml             │ kubernetes │         5         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_15.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_16.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_17.yaml             │ kubernetes │         5         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_18.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_19.yaml             │ kubernetes │         5         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_2.yaml              │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_20.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_21.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_22.yaml             │ kubernetes │         5         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_23.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_24.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_25.yaml             │ kubernetes │         5         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_26.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_27.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_28.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_29.yaml             │ kubernetes │         5         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_3.yaml              │ kubernetes │        14         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_30.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_31.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_32.yaml             │ kubernetes │         5         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_33.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_34.yaml             │ kubernetes │         0         │
├────────────────────────────────────────┼────────────┼───────────────────┤
│ microservices-demo_4.yaml              │ kubernetes │         0         │
└────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Metrics-server5_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 Metrics-server5_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



Metrics-server5_7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Metrics-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Metrics-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Metrics-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Metrics-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Metrics-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Metrics-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Metrics-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 Metrics-server5_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Metrics-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Metrics-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Metrics-server5_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metrics-server35_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server35_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server35_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server35_7.yaml:21-62
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server35_7.yaml:21-62
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server35_7.yaml:21-62
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server35_7.yaml:21-62
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server35_7.yaml:21-62
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server35_7.yaml:21-62
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server35_7.yaml:21-62
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server35_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server35_7.yaml:21-62
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server35_7.yaml:21-62
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server35_7.yaml:20-69
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 └         - --kubelet-preferred-address-types=InternalIP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server35_7.yaml:21-62
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────



metrics-server36_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server36_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server36_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server36_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server36_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server36_7.yaml:20-61
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server37_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server37_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server37_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server37_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server37_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server38_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server38_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server38_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server38_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server38_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server38_7.yaml:20-61
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server39_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server39_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server39_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server39_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server39_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metrics-server39_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server39_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server39_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server39_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server39_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server39_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server39_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server39_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server39_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server39_7.yaml:20-69
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 └         - --metric-resolution=15s
  ..   
────────────────────────────────────────



metrics-server40_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server40_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server40_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server40_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server40_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server42_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server42_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server42_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server42_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server42_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server42_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server42_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server42_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server42_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server42_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server42_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server42_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server42_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server42_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server42_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



metrics-server43_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server43_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server43_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server43_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server43_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server43_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server43_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server43_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server43_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server43_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server43_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server43_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server43_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server43_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server43_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server44_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server44_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server44_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server44_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server44_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server44_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server44_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server44_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server44_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server44_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server44_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server44_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server44_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server44_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server44_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server46_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server46_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server46_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server46_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server46_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server46_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server46_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server46_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server46_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server46_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server46_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server46_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server46_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server46_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  ..   
────────────────────────────────────────



metrics-server48_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server48_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server48_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server48_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server48_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server48_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server48_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server48_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server48_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server48_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server48_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server48_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server48_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server48_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server48_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server49_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server49_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server49_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server49_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server49_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metrics-server4_5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server4_5.yaml:9-44
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server4_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 │         - --kubelet-insecure-tls
  27 │         - --kubelet-preferred-address-types=InternalIP
  28 │         - --cert-dir=/tmp
  29 │         - --secure-port=4443
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server4_5.yaml:18-44
────────────────────────────────────────
  18 ┌       serviceAccountName: metrics-server
  19 │       volumes:
  20 │       - name: tmp-dir
  21 │         emptyDir: {}
  22 │       containers:
  23 │       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         args:
  26 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────



metrics-server4_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server4_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────



metrics-server50_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server50_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server50_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server50_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server50_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metrics-server51_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server51_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server51_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server51_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server51_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server51_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server51_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server51_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server51_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server51_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server51_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server51_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server51_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server51_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metrics-server52_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server52_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server52_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server52_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server52_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server52_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server52_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server52_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server52_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server52_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server52_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server52_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server52_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server52_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metrics-server53_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server53_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server53_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server53_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server53_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server53_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server53_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server53_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server53_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server53_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server53_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server53_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server53_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server53_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metrics-server55_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server55_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server55_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server55_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server55_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server55_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server55_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server55_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server55_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server55_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server55_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server55_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server55_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server55_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metrics-server56_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server56_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server56_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server56_7.yaml:9-60
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server56_7.yaml:21-53
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server56_7.yaml:20-60
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-insecure-tls
  26 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  27 │         imagePullPolicy: IfNotPresent
  28 └         livenessProbe:
  ..   
────────────────────────────────────────



metrics-server57_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server57_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server57_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server57_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server57_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metrics-server58_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server58_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server58_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server58_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server58_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server58_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server58_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server58_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server58_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server58_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server59_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server59_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server59_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server59_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server59_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server59_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server59_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server59_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server59_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server59_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server59_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server59_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server59_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server59_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server59_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server60_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server60_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server60_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server60_7.yaml:21-63
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server60_7.yaml:21-63
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server60_7.yaml:21-63
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server60_7.yaml:21-63
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server60_7.yaml:21-63
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server60_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server60_7.yaml:21-63
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server60_7.yaml:21-63
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server60_7.yaml:20-70
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server60_7.yaml:21-63
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



metrics-server61_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server61_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server61_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server61_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server61_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server61_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server61_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server61_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server61_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server61_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server61_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server61_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server61_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server61_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server6_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server6_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server6_7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server6_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server6_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server6_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server6_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server6_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server6_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server6_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server6_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server6_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server6_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server6_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server6_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server70_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server70_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server70_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server70_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server70_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server70_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server70_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server70_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server70_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server70_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server70_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server70_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server70_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server70_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  ..   
────────────────────────────────────────



metrics-server77_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server77_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server77_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server77_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server77_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server77_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server77_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server77_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server77_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server77_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server79_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server79_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server79_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server79_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server79_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server79_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server79_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server79_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server79_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server79_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server79_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server79_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server79_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server79_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metrics-server7_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server7_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server7_7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server7_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server7_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server7_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server7_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server7_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server7_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server7_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server7_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server7_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server7_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server7_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server7_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server80_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server80_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server80_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server80_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server80_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server80_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server80_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server80_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server80_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server80_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server82_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server82_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server82_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server82_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server82_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server82_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server82_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server82_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server82_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server82_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server82_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server82_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server82_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server82_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metrics-server83_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server83_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server83_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server83_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server83_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server83_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server83_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server83_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server83_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server83_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server85_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server85_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server85_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server85_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server85_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metrics-server85_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server85_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server85_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server85_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server85_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server85_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server85_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server85_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server85_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server85_7.yaml:20-69
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 └         - --metric-resolution=15s
  ..   
────────────────────────────────────────



metrics-server86_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server86_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server86_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server86_7.yaml:31-76
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=10250
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls
  38 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server86_7.yaml:31-76
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=10250
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls
  38 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server86_7.yaml:31-76
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=10250
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls
  38 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server86_7.yaml:31-76
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=10250
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls
  38 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server86_7.yaml:9-83
────────────────────────────────────────
   9 ┌   replicas: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: metrics-server
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server86_7.yaml:21-83
────────────────────────────────────────
  21 ┌       affinity:
  22 │         podAntiAffinity:
  23 │           requiredDuringSchedulingIgnoredDuringExecution:
  24 │           - labelSelector:
  25 │               matchLabels:
  26 │                 k8s-app: metrics-server
  27 │             namespaces:
  28 │             - kube-system
  29 └             topologyKey: kubernetes.io/hostname
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server86_7.yaml:31-76
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=10250
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls
  38 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server86_8.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PodDisruptionBudget 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server86_8.yaml:9-12
────────────────────────────────────────
   9 ┌   minAvailable: 1
  10 │   selector:
  11 │     matchLabels:
  12 └       k8s-app: metrics-server
────────────────────────────────────────



metrics-server87_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server87_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server87_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metrics-server87_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server87_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server87_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server87_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server87_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server87_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server87_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server87_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server87_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server87_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server87_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment metrics-server in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server87_7.yaml:20-66
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server88_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server88_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server88_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server88_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server88_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server88_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server88_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server88_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server88_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server88_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server89_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server89_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server89_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server89_7.yaml:22-65
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server89_7.yaml:22-65
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metrics-server89_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server89_7.yaml:22-65
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server89_7.yaml:22-65
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server89_7.yaml:22-65
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server89_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server89_7.yaml:22-65
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server89_7.yaml:22-65
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server89_7.yaml:20-72
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 └         - --metric-resolution=15s
  ..   
────────────────────────────────────────



metrics-server8_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server8_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server8_7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server8_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server8_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server90_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server90_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server90_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server90_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server90_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server90_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server90_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server90_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server90_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server90_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server91_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server91_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server91_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server91_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server91_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server91_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server91_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server91_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server91_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server91_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server91_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server91_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server91_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server91_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server91_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server92_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server92_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server92_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server92_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server92_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server92_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server92_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server92_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server92_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server92_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server93_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server93_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server93_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server93_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server93_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metrics-server93_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server93_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server93_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server93_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server93_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server93_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server93_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server93_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server93_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server93_7.yaml:20-69
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 └         - --metric-resolution=15s
  ..   
────────────────────────────────────────



metrics-server94_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server94_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server94_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metrics-server94_7.yaml:9-75
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server94_7.yaml:22-68
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /metrics-server
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         - --kubelet-insecure-tls
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server94_7.yaml:22-68
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /metrics-server
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         - --kubelet-insecure-tls
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server94_7.yaml:22-68
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /metrics-server
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         - --kubelet-insecure-tls
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server94_7.yaml:22-68
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /metrics-server
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         - --kubelet-insecure-tls
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server94_7.yaml:9-75
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server94_7.yaml:20-75
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - command:
  23 │         - /metrics-server
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 └         - --metric-resolution=15s
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server94_7.yaml:22-68
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /metrics-server
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         - --kubelet-insecure-tls
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  ..   
────────────────────────────────────────



metrics-server97_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server97_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server97_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server97_7.yaml:21-69
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server97_7.yaml:21-69
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server97_7.yaml:21-69
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server97_7.yaml:21-69
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server97_7.yaml:9-76
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server97_7.yaml:20-76
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 └         - /metrics-server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server97_7.yaml:21-69
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────



metrics-server98_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server98_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server98_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server98_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server98_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server98_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server98_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server98_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server98_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server98_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-server99_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server99_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server99_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server99_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server99_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metrics-server99_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server99_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server99_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server99_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server99_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server99_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server99_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server99_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server99_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server99_7.yaml:20-69
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls=true
  26 │         - --kubelet-preferred-address-types=InternalIP
  27 │         - --kubelet-use-node-status-port
  28 └         - --metric-resolution=15s
  ..   
────────────────────────────────────────



metrics-server9_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server9_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics-server9_7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics-server9_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics-server9_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics-statefulset.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'ctp-metrics' of StatefulSet 'ctp-metrics' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics-statefulset.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ctp-metrics
  19 │         securityContext:
  20 │           allowPrivilegeEscalation: false
  21 │           capabilities:
  22 │             drop: [ "ALL" ]
  23 │           seccompProfile:
  24 │             type: RuntimeDefault
  25 │         image: ctp-metrics:latest
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ctp-metrics' of StatefulSet 'ctp-metrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metrics-statefulset.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ctp-metrics
  19 │         securityContext:
  20 │           allowPrivilegeEscalation: false
  21 │           capabilities:
  22 │             drop: [ "ALL" ]
  23 │           seccompProfile:
  24 │             type: RuntimeDefault
  25 │         image: ctp-metrics:latest
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ctp-metrics' of StatefulSet 'ctp-metrics' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metrics-statefulset.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ctp-metrics
  19 │         securityContext:
  20 │           allowPrivilegeEscalation: false
  21 │           capabilities:
  22 │             drop: [ "ALL" ]
  23 │           seccompProfile:
  24 │             type: RuntimeDefault
  25 │         image: ctp-metrics:latest
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ctp-metrics' of StatefulSet 'ctp-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metrics-statefulset.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ctp-metrics
  19 │         securityContext:
  20 │           allowPrivilegeEscalation: false
  21 │           capabilities:
  22 │             drop: [ "ALL" ]
  23 │           seccompProfile:
  24 │             type: RuntimeDefault
  25 │         image: ctp-metrics:latest
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ctp-metrics' of StatefulSet 'ctp-metrics' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics-statefulset.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ctp-metrics
  19 │         securityContext:
  20 │           allowPrivilegeEscalation: false
  21 │           capabilities:
  22 │             drop: [ "ALL" ]
  23 │           seccompProfile:
  24 │             type: RuntimeDefault
  25 │         image: ctp-metrics:latest
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ctp-metrics' of StatefulSet 'ctp-metrics' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics-statefulset.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ctp-metrics
  19 │         securityContext:
  20 │           allowPrivilegeEscalation: false
  21 │           capabilities:
  22 │             drop: [ "ALL" ]
  23 │           seccompProfile:
  24 │             type: RuntimeDefault
  25 │         image: ctp-metrics:latest
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ctp-metrics' of StatefulSet 'ctp-metrics' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics-statefulset.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ctp-metrics
  19 │         securityContext:
  20 │           allowPrivilegeEscalation: false
  21 │           capabilities:
  22 │             drop: [ "ALL" ]
  23 │           seccompProfile:
  24 │             type: RuntimeDefault
  25 │         image: ctp-metrics:latest
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ctp-metrics' of StatefulSet 'ctp-metrics' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics-statefulset.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ctp-metrics
  19 │         securityContext:
  20 │           allowPrivilegeEscalation: false
  21 │           capabilities:
  22 │             drop: [ "ALL" ]
  23 │           seccompProfile:
  24 │             type: RuntimeDefault
  25 │         image: ctp-metrics:latest
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ctp-metrics' of StatefulSet 'ctp-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics-statefulset.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ctp-metrics
  19 │         securityContext:
  20 │           allowPrivilegeEscalation: false
  21 │           capabilities:
  22 │             drop: [ "ALL" ]
  23 │           seccompProfile:
  24 │             type: RuntimeDefault
  25 │         image: ctp-metrics:latest
  26 └         env:
  ..   
────────────────────────────────────────



metrics15_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics15_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics15_7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics15_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics15_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics15_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics15_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics15_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics15_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics15_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics35_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics35_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics35_7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics35_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics35_7.yaml:20-61
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics36_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics36_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics36_7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics36_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics36_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics36_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics36_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics36_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics36_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics36_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics50_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics50_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics50_7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics50_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics50_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics50_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics53_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics53_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics53_7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics53_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics53_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics53_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics53_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics53_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics53_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics53_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics54_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics54_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics54_7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics54_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics54_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics54_7.yaml:20-61
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics55_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics55_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics55_7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics55_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics55_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics55_7.yaml:20-61
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metrics56_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics56_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics56_7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics56_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics56_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics56_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics56_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics56_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics56_7.yaml:20-72
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics56_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



metrics63_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics63_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics63_7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 99, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics63_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics63_7.yaml:20-61
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics63_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



metrics_deployment.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics_deployment.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metrics_deployment.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metrics_deployment.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics_deployment.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics_deployment.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics_deployment.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics_deployment.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment metrics-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metrics_deployment.yaml:5
────────────────────────────────────────
   5 [   name: metrics-server
────────────────────────────────────────



metrics_deployment1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics_deployment1.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metrics_deployment1.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metrics_deployment1.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metrics_deployment1.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metrics_deployment1.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics_deployment1.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics_deployment1.yaml:21-66
────────────────────────────────────────
  21 ┌       - name: metrics-server
  22 │         imagePullPolicy: IfNotPresent
  23 │         image: cloud-metrics_server_image
  24 │         ports:
  25 │         - containerPort: 50800
  26 │           name: http2
  27 │         - containerPort: 50801
  28 │           name: metrics-http
  29 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment metrics-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metrics_deployment1.yaml:5
────────────────────────────────────────
   5 [   name: metrics-server
────────────────────────────────────────



metrics_server1_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics_server1_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics_server1_7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics_server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics_server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics_server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics_server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics_server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics_server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics_server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics_server1_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics_server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics_server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics_server1_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics_server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



metrics_server_6.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics_server_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metrics_server_7.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metrics_server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metrics_server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metrics_server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metrics_server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metrics_server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metrics_server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metrics_server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metrics_server_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metrics_server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metrics_server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metrics_server_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metrics_server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metricserver-0.3.71_5.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:9-44
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricserver-0.3.71_5.yaml:18-44
────────────────────────────────────────
  18 ┌       serviceAccountName: metrics-server
  19 │       volumes:
  20 │       - name: tmp-dir
  21 │         emptyDir: {}
  22 │       containers:
  23 │       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 └         args:
  ..   
────────────────────────────────────────



metricserver-0.3.71_6.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricserver-0.3.71_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────



metricserver-0.3.7_5.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:9-44
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types="InternalIP"
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricserver-0.3.7_5.yaml:18-44
────────────────────────────────────────
  18 ┌       serviceAccountName: metrics-server
  19 │       volumes:
  20 │       - name: tmp-dir
  21 │         emptyDir: {}
  22 │       containers:
  23 │       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 └         args:
  ..   
────────────────────────────────────────



metricserver-0.3.7_6.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricserver-0.3.7_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────



metricserver-k8s1.291_6.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricserver-k8s1.291_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metricserver-k8s1.291_7.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricserver-k8s1.291_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metricserver-k8s1.291_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricserver-k8s1.291_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricserver-k8s1.291_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricserver-k8s1.291_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricserver-k8s1.291_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricserver-k8s1.291_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metricserver-k8s1.29_6.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricserver-k8s1.29_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metricserver-k8s1.29_7.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricserver-k8s1.29_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metricserver-k8s1.29_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricserver-k8s1.29_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricserver-k8s1.29_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricserver-k8s1.29_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricserver-k8s1.29_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricserver-k8s1.29_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metricserver_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricserver_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metricserver_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricserver_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metricserver_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricserver_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricserver_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricserver_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricserver_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricserver_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



meu-app-11_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'meu-app-1' of 'deployment' 'meu-app-1' in 'finance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'meu-app-1' of Deployment 'meu-app-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "meu-app-1" of deployment "meu-app-1" in "finance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment meu-app-1 in finance namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container meu-app-1 in finance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-app-11_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment meu-app-1 in finance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-app-11_1.yaml:19-34
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 └         resources: {}
  ..   
────────────────────────────────────────



meu-app-1_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'meu-app-1' of 'deployment' 'meu-app-1' in 'credit' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'meu-app-1' of Deployment 'meu-app-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'meu-app-1' of Deployment 'meu-app-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "meu-app-1" of deployment "meu-app-1" in "credit" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment meu-app-1 in credit namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container meu-app-1 in credit namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-app-1_1.yaml:20-30
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources: {}
  28 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment meu-app-1 in credit namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-app-1_1.yaml:19-34
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: nginx:latest
  21 │         name: meu-app-1
  22 │         envFrom:
  23 │         - configMapRef:
  24 │             name: meu-app-1-config
  25 │         ports:
  26 │         - containerPort: 80
  27 └         resources: {}
  ..   
────────────────────────────────────────



meu-app-21_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'meu-app-2' of 'deployment' 'meu-app-2' in 'finance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'meu-app-2' of Deployment 'meu-app-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "meu-app-2" of deployment "meu-app-2" in "finance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment meu-app-2 in finance namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container meu-app-2 in finance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-app-21_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment meu-app-2 in finance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-app-21_1.yaml:19-31
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
  ..   
────────────────────────────────────────



meu-app-2_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'meu-app-2' of 'deployment' 'meu-app-2' in 'credit' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'meu-app-2' of Deployment 'meu-app-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'meu-app-2' of Deployment 'meu-app-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "meu-app-2" of deployment "meu-app-2" in "credit" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment meu-app-2 in credit namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container meu-app-2 in credit namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-app-2_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment meu-app-2 in credit namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-app-2_1.yaml:19-31
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: nginx:latest
  21 │         name: meu-app-2
  22 │         ports:
  23 │         - containerPort: 80
  24 │         resources: {}
  25 │         volumeMounts:
  26 │         - mountPath: /usr/share/nginx/html
  27 └           name: conteudo-do-site-volume
  ..   
────────────────────────────────────────



meu-cronjob.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'meu-cronjob' of CronJob 'meu-cronjob' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'meu-cronjob' of CronJob 'meu-cronjob' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'meu-cronjob' of 'cronjob' 'meu-cronjob' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'meu-cronjob' of CronJob 'meu-cronjob' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'meu-cronjob' of CronJob 'meu-cronjob' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'meu-cronjob' of CronJob 'meu-cronjob' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'meu-cronjob' of CronJob 'meu-cronjob' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'meu-cronjob' of CronJob 'meu-cronjob' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'meu-cronjob' of CronJob 'meu-cronjob' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'meu-cronjob' of CronJob 'meu-cronjob' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'meu-cronjob' of CronJob 'meu-cronjob' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "meu-cronjob" of cronjob "meu-cronjob" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob meu-cronjob in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-cronjob.yaml:4-6
────────────────────────────────────────
   4 ┌   name: meu-cronjob
   5 │   labels:
   6 └     app: meu-cronjob
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container meu-cronjob in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob meu-cronjob in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-cronjob.yaml:22-26
────────────────────────────────────────
  22 ┌           containers:
  23 │             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 │               name: meu-cronjob
  25 │               resources:
  26 └           restartPolicy: OnFailure
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container meu-cronjob in cronjob meu-cronjob (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 meu-cronjob.yaml:23-24
────────────────────────────────────────
  23 ┌             - image: schwendler/orquestracao_ada_aula_6_cpu:v0
  24 └               name: meu-cronjob
────────────────────────────────────────



meu-nginx-daemonset.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 93, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'node-exporter' of 'daemonset' 'meu-nginx-daemonset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'meu-nginx-daemonset' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 meu-nginx-daemonset.yaml:8-36
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: nginx-daemonset
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: nginx-daemonset
  15 │     spec:
  16 └       hostNetwork: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'meu-nginx-daemonset' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 meu-nginx-daemonset.yaml:8-36
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: nginx-daemonset
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: nginx-daemonset
  15 │     spec:
  16 └       hostNetwork: true
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "node-exporter" of daemonset "meu-nginx-daemonset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset meu-nginx-daemonset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-nginx-daemonset.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-daemonset
   6 └   name: meu-nginx-daemonset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container meu-nginx-daemonset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset meu-nginx-daemonset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-nginx-daemonset.yaml:16-36
────────────────────────────────────────
  16 ┌       hostNetwork: true
  17 │       containers:
  18 │       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 └         - name: proc
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset meu-nginx-daemonset in default namespace shouldn't have volumes set to {"/proc", "/sys"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 meu-nginx-daemonset.yaml:8-36
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: nginx-daemonset
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: nginx-daemonset
  15 │     spec:
  16 └       hostNetwork: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container node-exporter in daemonset meu-nginx-daemonset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 meu-nginx-daemonset.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────



meu-nginx-daemonset1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 93, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'node-exporter' of 'daemonset' 'meu-nginx-daemonset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'meu-nginx-daemonset' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:8-36
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: nginx-daemonset
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: nginx-daemonset
  15 │     spec:
  16 └       hostNetwork: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'meu-nginx-daemonset' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:8-36
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: nginx-daemonset
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: nginx-daemonset
  15 │     spec:
  16 └       hostNetwork: true
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'node-exporter' of DaemonSet 'meu-nginx-daemonset' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "node-exporter" of daemonset "meu-nginx-daemonset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset meu-nginx-daemonset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-daemonset
   6 └   name: meu-nginx-daemonset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container meu-nginx-daemonset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset meu-nginx-daemonset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:16-36
────────────────────────────────────────
  16 ┌       hostNetwork: true
  17 │       containers:
  18 │       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 └         - name: proc
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset meu-nginx-daemonset in default namespace shouldn't have volumes set to {"/proc", "/sys"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:8-36
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: nginx-daemonset
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: nginx-daemonset
  15 │     spec:
  16 └       hostNetwork: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container node-exporter in daemonset meu-nginx-daemonset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 meu-nginx-daemonset1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: node-exporter
  19 │         image: prom/node-exporter:v1.4.1
  20 │         ports:
  21 │         - containerPort: 9100
  22 │           hostPort: 9100
  23 │         volumeMounts:
  24 │         - name: proc
  25 │           mountPath: /host/proc
  26 └           readOnly: true
  ..   
────────────────────────────────────────



meu-primeiro-deployment.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-primeiro-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-deployment.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



meu-primeiro-pod.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-giropops' of 'pod' 'nginx-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-giropops" of pod "nginx-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-primeiro-pod.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: nginx-giropops
   6 │     app: giropops-strigus
   7 └   name: nginx-giropops
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-giropops in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod.yaml:9-22
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 └         cpu: "500m"
  ..   
────────────────────────────────────────



meu-primeiro-pod1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-giropops' of 'pod' 'nginx-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-giropops" of pod "nginx-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-primeiro-pod1.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: nginx-giropops
   6 │     app: giropops-strigus
   7 └   name: nginx-giropops
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-giropops in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod1.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod1.yaml:9-22
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "450Mi"
  17 └         cpu: "500m"
  ..   
────────────────────────────────────────



meu-primeiro-pod2.yaml (kubernetes)
===================================
Tests: 120 (SUCCESSES: 112, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 8, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-pod2.yaml:13
────────────────────────────────────────
  13 [       containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-pod2.yaml:15-17
────────────────────────────────────────
  15 ┌       limits: 
  16 │         memory:
  17 └         cpu: "0.5"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌     image: nginx
  11 │     name: nginx_giropops
  12 │     ports:
  13 │       containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory:
  17 │         cpu: "0.5"
  18 └     requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-pod2.yaml:19-20
────────────────────────────────────────
  19 ┌       memory: "4400MB"
  20 └       cpu: "0,3"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-pod2.yaml:13
────────────────────────────────────────
  13 [       containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-pod2.yaml:15-17
────────────────────────────────────────
  15 ┌       limits: 
  16 │         memory:
  17 └         cpu: "0.5"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-pod2.yaml:10-20
────────────────────────────────────────
  10 ┌     image: nginx
  11 │     name: nginx_giropops
  12 │     ports:
  13 │       containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory:
  17 │         cpu: "0.5"
  18 └     requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-pod2.yaml:19-20
────────────────────────────────────────
  19 ┌       memory: "4400MB"
  20 └       cpu: "0,3"
────────────────────────────────────────



meu-primeiro-pod3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-giropops' of 'pod' 'nginx-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-giropops" of pod "nginx-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-primeiro-pod3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: giropops-strigus
   6 └   name: nginx-giropops
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-giropops in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod3.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 │         cpu: "500m"       # Usando milicores para a CPU (0.5)
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod3.yaml:8-21
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-giropops
  10 │     image: nginx
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources:
  14 │       limits:
  15 │         memory: "8800Mi"  # Usando "Mi" para mebibytes
  16 └         cpu: "500m"       # Usando milicores para a CPU (0.5)
  ..   
────────────────────────────────────────



meu-primeiro-pod4.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-giropops' of 'pod' 'nginx-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-giropops" of pod "nginx-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-primeiro-pod4.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: nginx-giropops
   6 │     app: giropops-strigus
   7 └   name: nginx-giropops
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-giropops in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod4.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 │         cpu: "500m"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod4.yaml:9-22
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: "4400Mi"
  17 └         cpu: "500m"
  ..   
────────────────────────────────────────



meu-primeiro-pod6.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-giropops' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-giropops' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-giropops' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-giropops' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-giropops' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-giropops" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-primeiro-pod6.yaml:4-7
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 │     run: nginx-giropops
   7 └     app: giropops-strigus
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod6.yaml:10-20
────────────────────────────────────────
  10 ┌   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 │         cpu: "250m"
  18 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod6.yaml:9-22
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: nginx-giropops
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       requests:
  16 │         memory: "64Mi"
  17 └         cpu: "250m"
  ..   
────────────────────────────────────────



meu-primeiro-pod7.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-giropops' of 'pod' 'nginx-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-giropops" of pod "nginx-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-primeiro-pod7.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: nginx-giropops
   6 │     app: giropops-strigus
   7 └   name: nginx-giropops
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-giropops in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod7.yaml:10-20
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 │         cpu: "0.5"
  18 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primeiro-pod7.yaml:9-22
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: nginx-giropops
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: 
  15 │       limits: 
  16 │         memory: 524Mi
  17 └         cpu: "0.5"
  ..   
────────────────────────────────────────



meu-primiero-pod.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-giropops' of 'pod' 'nginx-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-giropops' of Pod 'nginx-giropops' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-giropops' of Pod 'nginx-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-giropops" of pod "nginx-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu-primiero-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: nginx-giropops
   6 └   name: nginx-giropops
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-giropops in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primiero-pod.yaml:9-19
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 │         cpu: "0.5"
  17 └       requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu-primiero-pod.yaml:8-21
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx
  10 │     name: nginx-giropops
  11 │     ports:
  12 │     - containerPort: 80
  13 │     resources: 
  14 │       limits: 
  15 │         memory: "128Mi"
  16 └         cpu: "0.5"
  ..   
────────────────────────────────────────



meu_primeiro_pod.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'giropops' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "giropops" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in giropops namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu_primeiro_pod.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in giropops namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu_primeiro_pod.yaml:9-17
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 │     name: nginx
  14 │     # define a política de DNS do contêiner.
  15 │   dnsPolicy: ClusterFirst
  16 │     # define a política de reinicialização do contêiner.
  17 └   restartPolicy: Always
────────────────────────────────────────



meu_primeiro_pod1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'giropops' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "giropops" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in giropops namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu_primeiro_pod1.yaml:10-13
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 └     name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in giropops namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu_primeiro_pod1.yaml:9-17
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │   # definir a política de pull da imagem do contêiner.
  12 │     imagePullPolicy: Always
  13 │     name: nginx
  14 │     # define a política de DNS do contêiner.
  15 │   dnsPolicy: ClusterFirst
  16 │     # define a política de reinicialização do contêiner.
  17 └   restartPolicy: Always
────────────────────────────────────────



meu_segundo_pod.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx2' of Pod 'nginx2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx2' of Pod 'nginx2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx2' of 'pod' 'nginx2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx2' of Pod 'nginx2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx2' of Pod 'nginx2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx2' of Pod 'nginx2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx2" of pod "nginx2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu_segundo_pod.yaml:5-7
────────────────────────────────────────
   5 ┌   labels:
   6 │     run: nginx
   7 └   name: nginx2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu_segundo_pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu_segundo_pod.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 │       - containerPort: 80
  15 │   dnsPolicy: ClusterFirst
  16 └   restartPolicy: Always
────────────────────────────────────────



meu_segundo_pod1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx2' of Pod 'nginx2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx2' of Pod 'nginx2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx2' of 'pod' 'nginx2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx2' of Pod 'nginx2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx2' of Pod 'nginx2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx2' of Pod 'nginx2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx2' of Pod 'nginx2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx2" of pod "nginx2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meu_segundo_pod1.yaml:5-7
────────────────────────────────────────
   5 ┌   labels:
   6 │     run: nginx
   7 └   name: nginx2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu_segundo_pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meu_segundo_pod1.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: nginx2
  12 │     resources: {}
  13 │     ports:
  14 │       - containerPort: 80
  15 │   dnsPolicy: ClusterFirst
  16 └   restartPolicy: Always
────────────────────────────────────────



meupode.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'nginx-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "nginx-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meupode.yaml:4
────────────────────────────────────────
   4 [   name: nginx-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meupode.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meupode.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: nginx-container
   8 └       image: nginx
────────────────────────────────────────



meuprimeiropod.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'meucontainer' of 'pod' 'meuprimeiropod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "meucontainer" of pod "meuprimeiropod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod meuprimeiropod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meuprimeiropod.yaml:4
────────────────────────────────────────
   4 [   name: meuprimeiropod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container meuprimeiropod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod meuprimeiropod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meuprimeiropod.yaml:6-8
────────────────────────────────────────
   6 ┌  containers:
   7 │     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container meucontainer in pod meuprimeiropod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 meuprimeiropod.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────



meuprimeiropod1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'meucontainer' of 'pod' 'meuprimeiropod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'meucontainer' of Pod 'meuprimeiropod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "meucontainer" of pod "meuprimeiropod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod meuprimeiropod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meuprimeiropod1.yaml:4
────────────────────────────────────────
   4 [   name: meuprimeiropod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container meuprimeiropod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod meuprimeiropod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meuprimeiropod1.yaml:6-8
────────────────────────────────────────
   6 ┌  containers:
   7 │     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container meucontainer in pod meuprimeiropod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 meuprimeiropod1.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: meucontainer
   8 └       image: kubedevio/nginx-color:blue
────────────────────────────────────────



mhc-aks.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mhc-back' of 'deployment' 'mhc-back' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mhc-back' of Deployment 'mhc-back' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mhc-back" of deployment "mhc-back" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mhc-back in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mhc-aks.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mhc-back
   5 │   labels:
   6 └     app: mhc-back
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mhc-back in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mhc-back in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────



mhc-aks1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mhc-back' of 'deployment' 'mhc-back' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mhc-back' of Deployment 'mhc-back' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mhc-back" of deployment "mhc-back" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mhc-back in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mhc-aks1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mhc-back
   5 │   labels:
   6 └     app: mhc-back
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mhc-back in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mhc-back in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks1.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────



mhc-aks1_2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mhc-front' of 'deployment' 'mhc-front' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mhc-front' of Deployment 'mhc-front' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mhc-front" of deployment "mhc-front" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mhc-front in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mhc-aks1_2.yaml:4
────────────────────────────────────────
   4 [   name: mhc-front
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mhc-front in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mhc-front in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mhc-front in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks1_2.yaml:21-34
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mhc-front in deployment mhc-front (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mhc-aks1_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────



mhc-aks2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mhc-back' of 'deployment' 'mhc-back' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mhc-back' of Deployment 'mhc-back' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mhc-back' of Deployment 'mhc-back' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mhc-back" of deployment "mhc-back" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mhc-back in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mhc-aks2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mhc-back
   5 │   labels:
   6 └     app: mhc-back
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mhc-back in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks2.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mhc-back in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks2.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mhc-back
  19 │         image: redis
  20 │         ports:
  21 │         - containerPort: 6379
  22 └           name: redis
────────────────────────────────────────



mhc-aks2_2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mhc-front' of 'deployment' 'mhc-front' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mhc-front' of Deployment 'mhc-front' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mhc-front" of deployment "mhc-front" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mhc-front in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mhc-aks2_2.yaml:4
────────────────────────────────────────
   4 [   name: mhc-front
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mhc-front in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mhc-front in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mhc-front in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks2_2.yaml:21-34
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mhc-front in deployment mhc-front (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mhc-aks2_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────



mhc-aks_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mhc-front' of 'deployment' 'mhc-front' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mhc-front' of Deployment 'mhc-front' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mhc-front' of Deployment 'mhc-front' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mhc-front" of deployment "mhc-front" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mhc-front in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mhc-aks_2.yaml:4
────────────────────────────────────────
   4 [   name: mhc-front
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mhc-front in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mhc-front in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mhc-front in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mhc-aks_2.yaml:21-34
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mhc-front in deployment mhc-front (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mhc-aks_2.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: mhc-front
  23 │         image: __ACR__/myhealth.web:latest
  24 │         imagePullPolicy: Always
  25 │         ports:
  26 │         - containerPort: 80
  27 │         resources:
  28 │           requests:
  29 │             cpu: 250m
  30 └           limits:
  ..   
────────────────────────────────────────



miapp.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app-prueba' of Deployment 'mi-aplicacion' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app-prueba' of Deployment 'mi-aplicacion' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app-prueba' of 'deployment' 'mi-aplicacion' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app-prueba' of Deployment 'mi-aplicacion' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app-prueba' of Deployment 'mi-aplicacion' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app-prueba' of Deployment 'mi-aplicacion' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app-prueba' of Deployment 'mi-aplicacion' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app-prueba' of Deployment 'mi-aplicacion' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app-prueba' of Deployment 'mi-aplicacion' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app-prueba' of Deployment 'mi-aplicacion' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app-prueba' of Deployment 'mi-aplicacion' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app-prueba" of deployment "mi-aplicacion" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mi-aplicacion in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 miapp.yaml:4
────────────────────────────────────────
   4 [   name: mi-aplicacion
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mi-aplicacion in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 miapp.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mi-aplicacion in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 miapp.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: app-prueba
  17 │           image: mi-aplicacion:1
  18 │           ports:
  19 └             - containerPort: 3000
────────────────────────────────────────



michinori-scheduler_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'michinori-scheduler' of 'deployment' 'michinori-scheduler' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'michinori-scheduler' of Deployment 'michinori-scheduler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "michinori-scheduler" of deployment "michinori-scheduler" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment michinori-scheduler in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 michinori-scheduler_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: michinori-scheduler
   5 │   labels:
   6 └     app: michinori-scheduler
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container michinori-scheduler in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment michinori-scheduler in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 michinori-scheduler_2.yaml:17-23
────────────────────────────────────────
  17 ┌       serviceAccount: michinori-scheduler
  18 │       nodeSelector:
  19 │         kubernetes.io/hostname: node1
  20 │       containers:
  21 │       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container michinori-scheduler in deployment michinori-scheduler (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 michinori-scheduler_2.yaml:21-23
────────────────────────────────────────
  21 ┌       - name: michinori-scheduler
  22 │         image: docker.io/bonavadeur/michinori-scheduler:latest
  23 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



microservices-config.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'microservices-config' in 'microservices' namespace stores sensitive contents in key(s) or value(s) '{"    \"ConnectionString\""}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 microservices-config.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



microservices-demo.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 microservices-demo.yaml:4-6
────────────────────────────────────────
   4 ┌   name: currencyservice
   5 │   labels:
   6 └     app: currencyservice
────────────────────────────────────────



microservices-demo_11.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo_11.yaml:23-52
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo_11.yaml:23-52
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo_11.yaml:23-52
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo_11.yaml:23-52
────────────────────────────────────────
  23 ┌       - name: server
  24 │         securityContext:
  25 │           allowPrivilegeEscalation: false
  26 │           capabilities:
  27 │             drop:
  28 │             - ALL
  29 │           privileged: false
  30 │           readOnlyRootFilesystem: true
  31 └         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 microservices-demo_11.yaml:4-6
────────────────────────────────────────
   4 ┌   name: shippingservice
   5 │   labels:
   6 └     app: shippingservice
────────────────────────────────────────



microservices-demo_14.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo_14.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo_14.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo_14.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo_14.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 microservices-demo_14.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



microservices-demo_17.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo_17.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:debian
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo_17.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:debian
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo_17.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:debian
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo_17.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:debian
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 microservices-demo_17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: redis-cart
   5 │   labels:
   6 └     app: redis-cart
────────────────────────────────────────



microservices-demo_19.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo_19.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo_19.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo_19.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo_19.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 microservices-demo_19.yaml:4-6
────────────────────────────────────────
   4 ┌   name: emailservice
   5 │   labels:
   6 └     app: emailservice
────────────────────────────────────────



microservices-demo_22.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo_22.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo_22.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo_22.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo_22.yaml:24-52
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 microservices-demo_22.yaml:4-6
────────────────────────────────────────
   4 ┌   name: paymentservice
   5 │   labels:
   6 └     app: paymentservice
────────────────────────────────────────



microservices-demo_25.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo_25.yaml:25-79
────────────────────────────────────────
  25 ┌       - name: server
  26 │         securityContext:
  27 │           allowPrivilegeEscalation: false
  28 │           capabilities:
  29 │             drop:
  30 │             - ALL
  31 │           privileged: false
  32 │           readOnlyRootFilesystem: true
  33 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo_25.yaml:25-79
────────────────────────────────────────
  25 ┌       - name: server
  26 │         securityContext:
  27 │           allowPrivilegeEscalation: false
  28 │           capabilities:
  29 │             drop:
  30 │             - ALL
  31 │           privileged: false
  32 │           readOnlyRootFilesystem: true
  33 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo_25.yaml:25-79
────────────────────────────────────────
  25 ┌       - name: server
  26 │         securityContext:
  27 │           allowPrivilegeEscalation: false
  28 │           capabilities:
  29 │             drop:
  30 │             - ALL
  31 │           privileged: false
  32 │           readOnlyRootFilesystem: true
  33 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo_25.yaml:25-79
────────────────────────────────────────
  25 ┌       - name: server
  26 │         securityContext:
  27 │           allowPrivilegeEscalation: false
  28 │           capabilities:
  29 │             drop:
  30 │             - ALL
  31 │           privileged: false
  32 │           readOnlyRootFilesystem: true
  33 └         image: gcr.io/google-samples/microservices-demo/frontend:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 microservices-demo_25.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 └     app: frontend
────────────────────────────────────────



microservices-demo_29.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo_29.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo_29.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo_29.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo_29.yaml:24-56
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 microservices-demo_29.yaml:4-6
────────────────────────────────────────
   4 ┌   name: recommendationservice
   5 │   labels:
   6 └     app: recommendationservice
────────────────────────────────────────



microservices-demo_3.yaml (kubernetes)
======================================
Tests: 118 (SUCCESSES: 104, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 microservices-demo_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'frontend-check' of Deployment 'loadgenerator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 microservices-demo_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 microservices-demo_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 microservices-demo_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 microservices-demo_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo_3.yaml:51-71
────────────────────────────────────────
  51 ┌       - name: main
  52 │         securityContext:
  53 │           allowPrivilegeEscalation: false
  54 │           capabilities:
  55 │             drop:
  56 │             - ALL
  57 │           privileged: false
  58 │           readOnlyRootFilesystem: true
  59 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend-check' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'loadgenerator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo_3.yaml:51-71
────────────────────────────────────────
  51 ┌       - name: main
  52 │         securityContext:
  53 │           allowPrivilegeEscalation: false
  54 │           capabilities:
  55 │             drop:
  56 │             - ALL
  57 │           privileged: false
  58 │           readOnlyRootFilesystem: true
  59 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo_3.yaml:51-71
────────────────────────────────────────
  51 ┌       - name: main
  52 │         securityContext:
  53 │           allowPrivilegeEscalation: false
  54 │           capabilities:
  55 │             drop:
  56 │             - ALL
  57 │           privileged: false
  58 │           readOnlyRootFilesystem: true
  59 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend-check" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo_3.yaml:28-49
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /bin/sh
  30 │         - -exc
  31 │         - "MAX_RETRIES=12\nRETRY_INTERVAL=10\nfor i in $(seq 1 $MAX_RETRIES); do\n\
  32 │           \  echo \"Attempt $i: Pinging frontend: ${FRONTEND_ADDR}...\"\n  STATUSCODE=$(wget\
  33 │           \ --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print\
  34 │           \ $2}')\n  if [ $STATUSCODE -eq 200 ]; then\n      echo \"Frontend is reachable.\"\
  35 │           \n      exit 0\n  fi\n  echo \"Error: Could not reach frontend - Status\
  36 └           \ code: ${STATUSCODE}\"\n  sleep $RETRY_INTERVAL\ndone\necho \"Failed to\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "loadgenerator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo_3.yaml:51-71
────────────────────────────────────────
  51 ┌       - name: main
  52 │         securityContext:
  53 │           allowPrivilegeEscalation: false
  54 │           capabilities:
  55 │             drop:
  56 │             - ALL
  57 │           privileged: false
  58 │           readOnlyRootFilesystem: true
  59 └         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loadgenerator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 microservices-demo_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: loadgenerator
   5 │   labels:
   6 └     app: loadgenerator
────────────────────────────────────────



microservices-demo_32.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 microservices-demo_32.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 microservices-demo_32.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 microservices-demo_32.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 microservices-demo_32.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 microservices-demo_32.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────


