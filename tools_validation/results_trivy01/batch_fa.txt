
Report Summary

┌─────────────────────────────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                                     Target                                      │    Type    │ Misconfigurations │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ MetaData5.yaml                                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ MetaData5_1.yaml                                                                │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media1.yaml                                                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media11_1.yaml                                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media1_1.yaml                                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media21_1.yaml                                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media3.yaml                                                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media3_1.yaml                                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media4.yaml                                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media5.yaml                                                                     │ kubernetes │        54         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media5_1.yaml                                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media7.yaml                                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ media8.yaml                                                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mediawiki-deployment.yaml                                                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mediawiki-deployment1.yaml                                                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ medium-multi-node.yaml                                                          │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ medium-multi-node1.yaml                                                         │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ medium-singlenode.yaml                                                          │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ medium-singlenode1.yaml                                                         │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ medium-stress.yaml                                                              │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ medusa-bucket-key.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ meilisearch-claim0-persistentvolumeclaim.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ meilisearch-service.yaml                                                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ melody-pod.yaml                                                                 │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ melody-pod1.yaml                                                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ melody-service.yaml                                                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ melody-service1.yaml                                                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mem-deployment.yaml                                                             │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mem-limit.yaml                                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mem-min-max.yaml                                                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mem-service.yaml                                                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mem-service1.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mem-service2.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mem-svc.yaml                                                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ member-secret.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ member_cluster_role.yaml                                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ member_cluster_role1.yaml                                                       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ member_cluster_rolebinding.yaml                                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ member_cluster_rolebinding1.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ member_cluster_serviceaccount.yaml                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ member_cluster_serviceaccount1.yaml                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memberclusterannounce_editor_role.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memberclusterannounce_viewer_role.yaml                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memc-dep.yaml                                                                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memc-svc.yaml                                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcache-dep.yaml                                                               │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcache-t1-cpuset.yaml                                                         │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcache-t1-cpuset1.yaml                                                        │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached-operator-controller-manager-metrics-service_v1_service.yaml           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached-operator-webhook-service_v1_service.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached.yaml                                                                  │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached1.yaml                                                                 │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached1_1.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached_1.yaml                                                                │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached_editor_role.yaml                                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached_editor_role1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached_editor_role2.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached_editor_role3.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached_viewer_role.yaml                                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached_viewer_role1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached_viewer_role2.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcached_viewer_role3.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcacheddepl.yaml                                                              │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcachedservice.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcd-sw-app.yaml                                                               │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcd-sw-app_1.yaml                                                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcd-sw-app_2.yaml                                                             │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcd-sw-app_3.yaml                                                             │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memcd-sw-app_4.yaml                                                             │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memdefault.yaml                                                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memdep.yaml                                                                     │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memdep1.yaml                                                                    │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memdep2.yaml                                                                    │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-allocator-with-limit.yaml                                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-allocator-with-limit1.yaml                                               │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-allocator-with-limit2.yaml                                               │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-allocator-with-limit3.yaml                                               │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-allocator.yaml                                                           │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-allocator1.yaml                                                          │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-allocator2.yaml                                                          │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-allocator3.yaml                                                          │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-default-limitrange.yaml                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-hog.yaml                                                                 │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-hog1.yaml                                                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-pod1.yaml                                                                │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-pod2.yaml                                                                │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-pod3.yaml                                                                │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-request-limit.yaml                                                       │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-sample.yaml                                                              │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory-sample1.yaml                                                             │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory.yaml                                                                     │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory1.yaml                                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory1_1.yaml                                                                  │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory_limit.yaml                                                               │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memory_limit1.yaml                                                              │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memoryhog.yaml                                                                  │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memoryhog1.yaml                                                                 │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memos-claim0-persistentvolumeclaim.yaml                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memos-deployment.yaml                                                           │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memos-ingress.yaml                                                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memos-namespace.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ memos-service.yaml                                                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempod.yaml                                                                     │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempod2.yaml                                                                    │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempod3.yaml                                                                    │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempod4.yaml                                                                    │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempool.yaml                                                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempool_1.yaml                                                                  │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempool_2.yaml                                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempool_3.yaml                                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempool_4.yaml                                                                  │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempool_5.yaml                                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempool_6.yaml                                                                  │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mempool_7.yaml                                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu-config-mongodb.yaml                                                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu-config-mongodb_2.yaml                                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu-config-mongodb_3.yaml                                                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu-config_1.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu-config_2.yaml                                                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu-config_3.yaml                                                              │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu-deployment.yaml                                                            │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu-deployment1.yaml                                                           │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu-service.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu-service1.yaml                                                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu1_1.yaml                                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu1_2.yaml                                                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ menu1_3.yaml                                                                    │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged-deployment.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged-deployment1.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged-deployment1_1.yaml                                                       │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged-deployment_1.yaml                                                        │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged-services-dep.yaml                                                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged-services-dep_1.yaml                                                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged.yaml                                                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_1.yaml                                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_2.yaml                                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment - bck.yaml                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment - bck_1.yaml                                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment - bck_2.yaml                                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment - bck_3.yaml                                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment - bck_4.yaml                                             │ kubernetes │        32         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment - bck_5.yaml                                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment_1.yaml                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment_2.yaml                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment_3.yaml                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment_4.yaml                                                   │ kubernetes │        30         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ merged_pgql_deployment_5.yaml                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mesh12.yaml                                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mesh12_1.yaml                                                                   │ kubernetes │         3         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mesh12_2.yaml                                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ mesh12_3.yaml                                                                   │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ meshed-namespace.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ message-broker-depl.yaml                                                        │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ message-broker-depl_1.yaml                                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ message-broker.yaml                                                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ message-broker_1.yaml                                                           │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ message-broker_2.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ message_editor_role.yaml                                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ message_viewer_role.yaml                                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ messages-service.yaml                                                           │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ messages-service_1.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ messages-service_2.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ messaging-service.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ messaging-service_1.yaml                                                        │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ messaging_app.yaml                                                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ messaging_app_1.yaml                                                            │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ messaging_app_2.yaml                                                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ meta115.yaml                                                                    │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ meta115_1.yaml                                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metabase-deployment.yaml                                                        │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metabase-ingress.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metabase-ingress1.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metabase-service.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metabase.yaml                                                                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metabase_1.yaml                                                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-psp-binding.yaml                                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-psp-binding1.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-psp-binding2.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-psp-binding3.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-psp-binding4.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-psp-binding5.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-psp-binding6.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac.yaml                                                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac1.yaml                                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac10.yaml                                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac10_1.yaml                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac11.yaml                                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac11_1.yaml                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac13.yaml                                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac13_1.yaml                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac14.yaml                                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac14_1.yaml                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac15.yaml                                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac15_1.yaml                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac16.yaml                                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac16_1.yaml                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac17.yaml                                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac17_1.yaml                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac18.yaml                                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac18_1.yaml                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac1_1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac2.yaml                                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac2_1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac3.yaml                                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac3_1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac4.yaml                                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac4_1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac5.yaml                                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac5_1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac6.yaml                                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac6_1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac7.yaml                                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac7_1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac8.yaml                                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac8_1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac9.yaml                                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac9_1.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-agent-rbac_1.yaml                                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-deployment.yaml                                                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-deployment_1.yaml                                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-editor-service.yaml                                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-editor.yaml                                                            │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-proxy-psp-binding.yaml                                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-proxy-psp-binding1.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-proxy-psp-binding2.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-proxy-psp-binding3.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-proxy-psp-binding4.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-proxy-psp-binding5.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata-proxy-psp-binding6.yaml                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_claim.yaml                                                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_claim1.yaml                                                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_deployment.yaml                                                        │ kubernetes │        49         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_deployment1.yaml                                                       │ kubernetes │        49         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role1.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role1_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role1_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role1_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role1_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role1_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role1_6.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role_1.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role_2.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role_3.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role_4.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role_5.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_role_6.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_service.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_service1.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_statefulset.yaml                                                       │ kubernetes │        13         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metadata_statefulset1.yaml                                                      │ kubernetes │        13         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metal-lb-config.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metal-lb-configmap.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metalLB-mainfest.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-cfg.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-config-buf.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-config-nyc.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-config12.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-config16.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-config7.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-config9.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-configmap1.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-configmap2.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-l2config.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-l2config2.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8.yaml                                                     │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_10.yaml                                                  │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_11.yaml                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_12.yaml                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_13.yaml                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_14.yaml                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_15.yaml                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_16.yaml                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_17.yaml                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_18.yaml                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_19.yaml                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_20.yaml                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_21.yaml                                                  │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_22.yaml                                                  │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_23.yaml                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_8.yaml                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native-v0.14.8_9.yaml                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3.yaml                                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_10.yaml                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_11.yaml                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_12.yaml                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_13.yaml                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_14.yaml                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_15.yaml                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_16.yaml                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_17.yaml                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_18.yaml                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_19.yaml                                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_20.yaml                                                   │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_21.yaml                                                   │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_22.yaml                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_7.yaml                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_8.yaml                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.0.14.3_9.yaml                                                    │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_10.yaml                                                         │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_11.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_12.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_13.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_14.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_15.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_16.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_17.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_18.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_19.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_20.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_21.yaml                                                         │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_22.yaml                                                         │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_23.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_8.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native1_9.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_10.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_11.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_12.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_13.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_14.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_15.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_16.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_17.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_18.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_19.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_20.yaml                                                         │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_21.yaml                                                         │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_22.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_7.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_8.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native2_9.yaml                                                          │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_10.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_11.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_12.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_13.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_14.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_15.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_16.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_17.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_18.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_19.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_20.yaml                                                         │ kubernetes │         8         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_21.yaml                                                         │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_22.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_7.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_8.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native3_9.yaml                                                          │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_10.yaml                                                         │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_11.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_12.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_13.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_14.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_15.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_16.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_17.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_18.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_19.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_20.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_21.yaml                                                         │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_22.yaml                                                         │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_23.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_8.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native4_9.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_10.yaml                                                         │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_11.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_12.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_13.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_14.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_15.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_16.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_17.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_18.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_19.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_20.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_21.yaml                                                         │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_22.yaml                                                         │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_23.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_8.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native6_9.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_10.yaml                                                         │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_11.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_12.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_13.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_14.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_15.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_16.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_17.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_18.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_19.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_20.yaml                                                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_21.yaml                                                         │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_22.yaml                                                         │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_23.yaml                                                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_8.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native8_9.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_10.yaml                                                          │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_11.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_12.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_13.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_14.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_15.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_16.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_17.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_18.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_19.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_20.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_21.yaml                                                          │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_22.yaml                                                          │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_23.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_8.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-native_9.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-nginx.yaml                                                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-nginx_1.yaml                                                            │ kubernetes │        18         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-patch.yaml                                                              │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-secret.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb-secret1.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_10.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_11.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_12.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_13.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_14.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_15.yaml                                                               │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_16.yaml                                                               │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_3.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_4.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_5.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_6.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_7.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_8.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb11_9.yaml                                                                │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_10.yaml                                                               │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_11.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_12.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_13.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_14.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_15.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_16.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_17.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_18.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_19.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_20.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_21.yaml                                                               │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_22.yaml                                                               │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_23.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_8.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb13_9.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_10.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_11.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_12.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_13.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_14.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_15.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_16.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_17.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_18.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_19.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_20.yaml                                                               │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_21.yaml                                                               │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_22.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_7.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_8.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb24_9.yaml                                                                │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_10.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_11.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_12.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_13.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_14.yaml                                                               │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_15.yaml                                                               │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_2.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_3.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_4.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_5.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_6.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_7.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_8.yaml                                                                │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb28_9.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb31.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_10.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_11.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_12.yaml                                                               │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_13.yaml                                                               │ kubernetes │         7         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_2.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_3.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_4.yaml                                                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_5.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_6.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_7.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_8.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb36_9.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_10.yaml                                                               │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_11.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_12.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_13.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_14.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_15.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_16.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_17.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_18.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_19.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_20.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_21.yaml                                                               │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_22.yaml                                                               │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_23.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_8.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb38_9.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_10.yaml                                                               │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_11.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_12.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_13.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_14.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_15.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_16.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_17.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_18.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_19.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_20.yaml                                                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_21.yaml                                                               │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_22.yaml                                                               │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_23.yaml                                                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_8.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb44_9.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb46.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9.yaml                                                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_10.yaml                                                                │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_11.yaml                                                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_12.yaml                                                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_13.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_14.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_15.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_16.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_17.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_18.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_19.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_20.yaml                                                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_21.yaml                                                                │ kubernetes │         9         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_22.yaml                                                                │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_23.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_8.yaml                                                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metallb9_9.yaml                                                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metaprotocol-sample.yaml                                                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metaprotocol-sample_1.yaml                                                      │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metaprotocol-sample_2.yaml                                                      │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metaprotocol-sample_3.yaml                                                      │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metaprotocol-sample_4.yaml                                                      │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metis.yaml                                                                      │ kubernetes │        21         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metis_1.yaml                                                                    │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server1.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server12.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server12_1.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server12_2.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server12_3.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server12_4.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server12_5.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server12_6.yaml                                                          │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server12_7.yaml                                                          │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server12_9.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server13.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server13_1.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server13_2.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server13_3.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server13_4.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server13_5.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server13_6.yaml                                                          │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server13_7.yaml                                                          │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server13_8.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server15.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server15_1.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server15_2.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server15_3.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server15_4.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server15_5.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server15_6.yaml                                                          │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server15_7.yaml                                                          │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server15_8.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server16.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server16_1.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server16_2.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server16_3.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server16_4.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server16_5.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server16_6.yaml                                                          │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server16_7.yaml                                                          │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server16_8.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server17.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server17_1.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server17_2.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server17_3.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server17_4.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server17_5.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server17_6.yaml                                                          │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server17_7.yaml                                                          │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server17_9.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server18.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server18_1.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server18_2.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server18_3.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server18_4.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server18_5.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server18_6.yaml                                                          │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server18_7.yaml                                                          │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server18_8.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server19.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server19_1.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server19_2.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server19_3.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server19_4.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server19_5.yaml                                                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server19_6.yaml                                                          │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server19_7.yaml                                                          │ kubernetes │        14         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server19_8.yaml                                                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server1_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server1_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server1_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server1_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server1_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server1_6.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server1_7.yaml                                                           │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server1_8.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server2.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server2_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server2_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server2_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server2_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server2_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server2_6.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server2_7.yaml                                                           │ kubernetes │        13         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server2_8.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server3.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server3_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server3_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server3_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server3_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server3_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server3_6.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server3_7.yaml                                                           │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server3_8.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server4.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server4_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server4_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server4_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server4_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server4_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server4_6.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server4_7.yaml                                                           │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server4_8.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server5.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server5_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server5_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server5_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server5_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server5_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server5_6.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server5_7.yaml                                                           │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server5_8.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server6.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server6_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server6_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server6_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server6_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server6_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server6_6.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server6_7.yaml                                                           │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server6_9.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server7.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server7_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server7_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server7_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server7_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server7_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server7_6.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server7_7.yaml                                                           │ kubernetes │         6         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server7_8.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server8.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server8_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server8_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server8_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server8_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server8_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server8_6.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server8_7.yaml                                                           │ kubernetes │        15         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server8_8.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server9.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server9_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server9_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server9_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server9_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server9_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server9_6.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server9_7.yaml                                                           │ kubernetes │        12         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server9_8.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server_1.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server_2.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server_3.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server_4.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server_5.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server_6.yaml                                                            │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server_7.yaml                                                            │ kubernetes │        13         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-server_8.yaml                                                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-service.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-service_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-service_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-service_3.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-service_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-service_5.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-service_6.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-service_7.yaml                                                           │ kubernetes │         8         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-service_8.yaml                                                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-test.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-test_1.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-test_2.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-test_3.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-test_4.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-test_5.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-test_6.yaml                                                              │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-test_7.yaml                                                              │ kubernetes │         8         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric-test_8.yaml                                                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric1.yaml                                                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric1_1.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric1_2.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric1_3.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric1_4.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric1_5.yaml                                                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric1_6.yaml                                                                  │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric1_7.yaml                                                                  │ kubernetes │         8         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metric1_8.yaml                                                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds1.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds1_3.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds1_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds1_5.yaml                                                           │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds1_6.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds1_7.yaml                                                           │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds2.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds2_3.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds2_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds2_5.yaml                                                           │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds2_6.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds2_7.yaml                                                           │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds3.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds3_1.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds3_2.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds3_3.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds3_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds3_5.yaml                                                           │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds3_6.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds3_7.yaml                                                           │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds4.yaml                                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds4_3.yaml                                                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds4_4.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds4_5.yaml                                                           │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds4_6.yaml                                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds4_7.yaml                                                           │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds_3.yaml                                                            │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds_4.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds_5.yaml                                                            │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds_6.yaml                                                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-ds_7.yaml                                                            │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-logstash-deployment.yaml                                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-logstash-deployment_1.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-logstash-deployment_2.yaml                                           │ kubernetes │        19         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-logstash-deployment_3.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-logstash-deployment_4.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-logstash-deployment_5.yaml                                           │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat-logstash-deployment_8.yaml                                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat1.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat1_1.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat1_2.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat1_3.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat1_4.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat1_5.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat1_6.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat1_7.yaml                                                              │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat1_8.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat1_9.yaml                                                              │ kubernetes │        17         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat2.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat2_1.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat2_2.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat2_3.yaml                                                              │ kubernetes │         2         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat2_4.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat2_5.yaml                                                              │ kubernetes │        20         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat2_6.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat2_7.yaml                                                              │ kubernetes │        16         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat3.yaml                                                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat3_1.yaml                                                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ metricbeat3_2.yaml                                                              │ kubernetes │         0         │
└─────────────────────────────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


MetaData5.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 MetaData5.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: metadata
   9 │   ports:
  10 │   - port: 8300
  11 │     targetPort: 8300
  12 └     name: foxden
────────────────────────────────────────



MetaData5_1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metadata' of Deployment 'metadata' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metadata' of Deployment 'metadata' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metadata' of 'deployment' 'metadata' in 'foxden' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metadata' of Deployment 'metadata' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metadata' of Deployment 'metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metadata' of Deployment 'metadata' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metadata' of Deployment 'metadata' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 MetaData5_1.yaml:9-65
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: metadata
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: metadata
  17 └         env: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metadata" of deployment "metadata" in "foxden" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container metadata in foxden namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metadata in foxden namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 MetaData5_1.yaml:23-65
────────────────────────────────────────
  23 ┌       containers:
  24 │       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 └         - /data/srv
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metadata in deployment metadata (namespace: foxden) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 MetaData5_1.yaml:24-58
────────────────────────────────────────
  24 ┌       - image: ghcr.io/chesscomputing/metadata:v0.0.3-test2
  25 │         name: metadata
  26 │         imagePullPolicy: Always
  27 │         env:
  28 │         - name: FOXDEN_CONFIG
  29 │           value: /etc/secrets/.foxden.yaml
  30 │         command:
  31 │         - /data/srv
  32 └         resources:
  ..   
────────────────────────────────────────



media1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 media1.yaml:8-27
────────────────────────────────────────
   8 ┌   storageClassName: freenas-nfs-manual-csi
   9 │   capacity:
  10 │     storage: 500Gi
  11 │   accessModes:
  12 │   - ReadWriteMany
  13 │   persistentVolumeReclaimPolicy: Retain
  14 │   mountOptions:
  15 │   - nfsvers=4
  16 └   - nolock
  ..   
────────────────────────────────────────



media11_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 media11_1.yaml:6-27
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteMany
   8 │   capacity:
   9 │     storage: 50Ti
  10 │   csi:
  11 │     driver: zfs.csi.openebs.io
  12 │     fsType: zfs
  13 │     volumeAttributes:
  14 └       openebs.io/cas-type: localpv-zfs
  ..   
────────────────────────────────────────



media1_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 media1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   storageClassName: freenas-nfs-manual-csi
  10 │   accessModes:
  11 │   - ReadWriteMany
  12 │   resources:
  13 │     requests:
  14 │       storage: 500Gi
  15 └   volumeName: pv-nfs-media
────────────────────────────────────────



media21_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 media21_1.yaml:6-27
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteMany
   8 │   capacity:
   9 │     storage: 160Ti
  10 │   csi:
  11 │     driver: zfs.csi.openebs.io
  12 │     fsType: zfs
  13 │     volumeAttributes:
  14 └       openebs.io/cas-type: localpv-zfs
  ..   
────────────────────────────────────────



media3.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 media3.yaml:8-27
────────────────────────────────────────
   8 ┌   storageClassName: freenas-nfs-manual-csi
   9 │   capacity:
  10 │     storage: 500Gi
  11 │   accessModes:
  12 │   - ReadWriteMany
  13 │   persistentVolumeReclaimPolicy: Retain
  14 │   mountOptions:
  15 │   - nfsvers=4
  16 └   - nolock
  ..   
────────────────────────────────────────



media3_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 media3_1.yaml:9-15
────────────────────────────────────────
   9 ┌   storageClassName: freenas-nfs-manual-csi
  10 │   accessModes:
  11 │   - ReadWriteMany
  12 │   resources:
  13 │     requests:
  14 │       storage: 500Gi
  15 └   volumeName: pv-nfs-media
────────────────────────────────────────



media5.yaml (kubernetes)
========================
Tests: 150 (SUCCESSES: 96, FAILURES: 54)
Failures: 54 (UNKNOWN: 0, LOW: 32, MEDIUM: 15, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'collectstatic' of Deployment 'media-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'consumer' of Deployment 'media-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'media-service' of Deployment 'media-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'collectstatic' of Deployment 'media-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'consumer' of Deployment 'media-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'media-service' of Deployment 'media-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'collectstatic' of 'deployment' 'media-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'consumer' of 'deployment' 'media-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'media-service' of 'deployment' 'media-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'collectstatic' of Deployment 'media-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'consumer' of Deployment 'media-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'media-service' of Deployment 'media-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'collectstatic' of Deployment 'media-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'consumer' of Deployment 'media-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'media-service' of Deployment 'media-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'collectstatic' of Deployment 'media-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'consumer' of Deployment 'media-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'media-service' of Deployment 'media-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'collectstatic' of Deployment 'media-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'consumer' of Deployment 'media-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'media-service' of Deployment 'media-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'collectstatic' of Deployment 'media-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'consumer' of Deployment 'media-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'media-service' of Deployment 'media-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'collectstatic' of Deployment 'media-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'consumer' of Deployment 'media-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'media-service' of Deployment 'media-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'collectstatic' of Deployment 'media-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'consumer' of Deployment 'media-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'media-service' of Deployment 'media-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'collectstatic' of Deployment 'media-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'consumer' of Deployment 'media-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'media-service' of Deployment 'media-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'collectstatic' of Deployment 'media-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'consumer' of Deployment 'media-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'media-service' of Deployment 'media-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 media5.yaml:6-93
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: media-service
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: media-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "collectstatic" of deployment "media-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "consumer" of deployment "media-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "media-service" of deployment "media-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment media-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 media5.yaml:4
────────────────────────────────────────
   4 [   name: media-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container media-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container media-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container media-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment media-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 media5.yaml:15-93
────────────────────────────────────────
  15 ┌       volumes:
  16 │       - name: media-static-volume
  17 │         emptyDir: {}
  18 │       initContainers:
  19 │       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 └         - manage.py
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container collectstatic in deployment media-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 media5.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container consumer in deployment media-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 media5.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container media-service in deployment media-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 media5.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: media-service
  46 │         image: ghcr.io/tomdieu/wikiculture/media_service:latest
  47 │         ports:
  48 │         - containerPort: 8003
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8003
  ..   
────────────────────────────────────────



media5_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 media5_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: media-service
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 8003
  11 └     targetPort: 8003
────────────────────────────────────────



media8.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 media8.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 10Gi
────────────────────────────────────────



mediawiki-deployment.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'contenedor-mediawiki' of 'deployment' 'mediawiki' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mediawiki-deployment.yaml:8-21
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mediawiki
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mediawiki
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "contenedor-mediawiki" of deployment "mediawiki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mediawiki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mediawiki-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mediawiki
   5 │   labels:
   6 └     app: mediawiki
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mediawiki in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mediawiki in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mediawiki-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mediawiki in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mediawiki-deployment.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



mediawiki-deployment1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'contenedor-mediawiki' of 'deployment' 'mediawiki' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'contenedor-mediawiki' of Deployment 'mediawiki' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mediawiki-deployment1.yaml:8-21
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: mediawiki
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: mediawiki
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "contenedor-mediawiki" of deployment "mediawiki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mediawiki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mediawiki-deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mediawiki
   5 │   labels:
   6 └     app: mediawiki
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mediawiki in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mediawiki in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mediawiki-deployment1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mediawiki in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mediawiki-deployment1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: contenedor-mediawiki
  19 │         image: mediawiki:1.38.5
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



medium-multi-node.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress-ng-container' of Job 'medium-multi-node' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress-ng-container' of Job 'medium-multi-node' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress-ng-container' of 'job' 'medium-multi-node' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress-ng-container' of Job 'medium-multi-node' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress-ng-container' of Job 'medium-multi-node' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress-ng-container' of Job 'medium-multi-node' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress-ng-container' of Job 'medium-multi-node' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress-ng-container' of Job 'medium-multi-node' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 medium-multi-node.yaml:6-29
────────────────────────────────────────
   6 ┌   completions: 16
   7 │   parallelism: 16
   8 │   completionMode: Indexed
   9 │   template:
  10 │     metadata:
  11 │       name: stress-ng-pod
  12 │       labels:
  13 │         job: medium-multi-node
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress-ng-container" of job "medium-multi-node" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job medium-multi-node in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 medium-multi-node.yaml:4
────────────────────────────────────────
   4 [   name: medium-multi-node
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container medium-multi-node in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 medium-multi-node.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job medium-multi-node in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 medium-multi-node.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 └             cpu: "0.5" # Adjust CPU request as needed
  ..   
────────────────────────────────────────



medium-multi-node1.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress-ng-container' of Job 'medium-multi-node' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress-ng-container' of Job 'medium-multi-node' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress-ng-container' of 'job' 'medium-multi-node' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress-ng-container' of Job 'medium-multi-node' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress-ng-container' of Job 'medium-multi-node' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress-ng-container' of Job 'medium-multi-node' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress-ng-container' of Job 'medium-multi-node' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress-ng-container' of Job 'medium-multi-node' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 medium-multi-node1.yaml:6-29
────────────────────────────────────────
   6 ┌   completions: 16
   7 │   parallelism: 16
   8 │   completionMode: Indexed
   9 │   template:
  10 │     metadata:
  11 │       name: stress-ng-pod
  12 │       labels:
  13 │         job: medium-multi-node
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress-ng-container" of job "medium-multi-node" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job medium-multi-node in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 medium-multi-node1.yaml:4
────────────────────────────────────────
   4 [   name: medium-multi-node
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container medium-multi-node in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 medium-multi-node1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job medium-multi-node in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 medium-multi-node1.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 120s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 └             cpu: "0.5" # Adjust CPU request as needed
  ..   
────────────────────────────────────────



medium-singlenode.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress-ng-container' of Job 'medium-single-node' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress-ng-container' of Job 'medium-single-node' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress-ng-container' of 'job' 'medium-single-node' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress-ng-container' of Job 'medium-single-node' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress-ng-container' of Job 'medium-single-node' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress-ng-container' of Job 'medium-single-node' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress-ng-container' of Job 'medium-single-node' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress-ng-container' of Job 'medium-single-node' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 medium-singlenode.yaml:6-30
────────────────────────────────────────
   6 ┌   completions: 16
   7 │   parallelism: 16
   8 │   completionMode: Indexed
   9 │   template:
  10 │     metadata:
  11 │       name: stress-ng-pod
  12 │       labels:
  13 │         job: high-stress
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress-ng-container" of job "medium-single-node" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job medium-single-node in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 medium-singlenode.yaml:4
────────────────────────────────────────
   4 [   name: medium-single-node
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container medium-single-node in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 medium-singlenode.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job medium-single-node in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 medium-singlenode.yaml:15-29
────────────────────────────────────────
  15 ┌       nodeName: kind-worker
  16 │       containers:
  17 │       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────



medium-singlenode1.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress-ng-container' of Job 'medium-single-node' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress-ng-container' of Job 'medium-single-node' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress-ng-container' of 'job' 'medium-single-node' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress-ng-container' of Job 'medium-single-node' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress-ng-container' of Job 'medium-single-node' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress-ng-container' of Job 'medium-single-node' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress-ng-container' of Job 'medium-single-node' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress-ng-container' of Job 'medium-single-node' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 medium-singlenode1.yaml:6-30
────────────────────────────────────────
   6 ┌   completions: 16
   7 │   parallelism: 16
   8 │   completionMode: Indexed
   9 │   template:
  10 │     metadata:
  11 │       name: stress-ng-pod
  12 │       labels:
  13 │         job: high-stress
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress-ng-container" of job "medium-single-node" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job medium-single-node in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 medium-singlenode1.yaml:4
────────────────────────────────────────
   4 [   name: medium-single-node
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container medium-single-node in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 medium-singlenode1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job medium-single-node in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 medium-singlenode1.yaml:15-29
────────────────────────────────────────
  15 ┌       nodeName: kind-worker
  16 │       containers:
  17 │       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────



medium-stress.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress-ng-container' of Job 'medium-stress' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress-ng-container' of Job 'medium-stress' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress-ng-container' of 'job' 'medium-stress' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress-ng-container' of Job 'medium-stress' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress-ng-container' of Job 'medium-stress' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress-ng-container' of Job 'medium-stress' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress-ng-container' of Job 'medium-stress' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress-ng-container' of Job 'medium-stress' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 medium-stress.yaml:6-30
────────────────────────────────────────
   6 ┌   completions: 10
   7 │   parallelism: 10
   8 │   completionMode: Indexed
   9 │   template:
  10 │     metadata:
  11 │       name: stress-ng-pod
  12 │       labels:
  13 │         job: medium-stress
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress-ng-container" of job "medium-stress" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job medium-stress in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 medium-stress.yaml:4
────────────────────────────────────────
   4 [   name: medium-stress
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container medium-stress in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 medium-stress.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 │           requests:
  24 │             cpu: "0.5" # Adjust CPU request as needed
  25 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job medium-stress in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 medium-stress.yaml:15-29
────────────────────────────────────────
  15 ┌       nodeName: kind-worker2
  16 │       containers:
  17 │       - name: stress-ng-container
  18 │         image: ubuntu:latest
  19 │         command: ["/bin/bash", "-c"]
  20 │         args:
  21 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────



meilisearch-claim0-persistentvolumeclaim.yaml (kubernetes)
==========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 meilisearch-claim0-persistentvolumeclaim.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │     - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



meilisearch-service.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 meilisearch-service.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   ports:
  10 │     - port: 7700
  11 │       targetPort: 7700
  12 │       protocol: TCP
  13 │   selector:
  14 └     io.kompose.service: meilisearch
────────────────────────────────────────



melody-pod.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'melody-pod' of Pod 'melody-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'melody-pod' of Pod 'melody-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'melody-pod' of 'pod' 'melody-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'melody-pod' of Pod 'melody-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'melody-pod' of Pod 'melody-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 melody-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "melody-pod" of pod "melody-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod melody-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 melody-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: melody-pod
   5 │   labels:
   6 └     app: melody-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container melody-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod melody-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 melody-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container melody-pod in pod melody-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 melody-pod.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────



melody-pod1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'melody-pod' of Pod 'melody-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'melody-pod' of Pod 'melody-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'melody-pod' of 'pod' 'melody-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'melody-pod' of Pod 'melody-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'melody-pod' of Pod 'melody-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'melody-pod' of Pod 'melody-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 melody-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "melody-pod" of pod "melody-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod melody-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 melody-pod1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: melody-pod
   5 │   labels:
   6 └     app: melody-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container melody-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod melody-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 melody-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container melody-pod in pod melody-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 melody-pod1.yaml:10-14
────────────────────────────────────────
  10 ┌   - name: melody-pod
  11 │     image: docker-registry:5000/melody-server # local only
  12 │     ports:
  13 │     - name: melody-port
  14 └       containerPort: 5000
────────────────────────────────────────



melody-service.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 melody-service.yaml:7-13
────────────────────────────────────────
   7 ┌   type: NodePort
   8 │   selector:
   9 │     app: melody-server
  10 │   ports:
  11 │   - name: melody-port
  12 │     port: 5000
  13 └     targetPort: 5000
────────────────────────────────────────



melody-service1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 melody-service1.yaml:7-13
────────────────────────────────────────
   7 ┌   type: NodePort
   8 │   selector:
   9 │     app: melody-server
  10 │   ports:
  11 │   - name: melody-port
  12 │     port: 5000
  13 └     targetPort: 5000
────────────────────────────────────────



mem-deployment.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vpromc' of Deployment 'vpromc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vpromc' of Deployment 'vpromc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vpromc' of 'deployment' 'vpromc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vpromc' of Deployment 'vpromc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vpromc' of Deployment 'vpromc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vpromc' of Deployment 'vpromc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mem-deployment.yaml:8-22
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: vpromc
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: vpromc
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vpromc" of deployment "vpromc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vpromc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mem-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vpromc
   5 │   labels:
   6 └     app: vpromc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vpromc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mem-deployment.yaml:18-22
────────────────────────────────────────
  18 ┌        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vpromc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mem-deployment.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │        - name: vpromc
  19 │          image: memcached
  20 │          ports:
  21 │           - name: vpromc-port
  22 └             containerPort: 11211
────────────────────────────────────────



mem-limit.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mem-limit.yaml:8-13
────────────────────────────────────────
   8 ┌   limits:
   9 │   - default:
  10 │       memory: 512Mi
  11 │     defaultRequest:
  12 │       memory: 256Mi
  13 └     type: Container
────────────────────────────────────────



mem-min-max.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mem-min-max.yaml:8-13
────────────────────────────────────────
   8 ┌   limits:
   9 │     - max:
  10 │         memory: 1Gi
  11 │       min:
  12 │         memory: 500Mi
  13 └       type: Container
────────────────────────────────────────



mem-service.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mem-service.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │     - port: 11211
   8 │       targetPort: 11211
   9 │       protocol: TCP
  10 │   selector:
  11 └     app: memdep
────────────────────────────────────────



mem-service1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mem-service1.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │     - port: 11211
   8 │       targetPort: 11211
   9 │       protocol: TCP
  10 │   selector:
  11 └     app: memdep
────────────────────────────────────────



mem-service2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mem-service2.yaml:6-12
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 11211
   8 │     targetPort: vpromc-port
   9 │     protocol: TCP
  10 │   selector:
  11 │     app: vpromc 
  12 └   type: ClusterIP
────────────────────────────────────────



mem-svc.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mem-svc.yaml:6-12
────────────────────────────────────────
   6 ┌   ports:
   7 │     - port: 11211
   8 │       targetPort: vpromc-port
   9 │       protocol: TCP
  10 │   selector:
  11 │     app: vpromc
  12 └   type: ClusterIP
────────────────────────────────────────



memc-dep.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vpromc' of Deployment 'memc-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vpromc' of Deployment 'memc-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vpromc' of 'deployment' 'memc-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vpromc' of Deployment 'memc-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vpromc' of Deployment 'memc-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vpromc' of Deployment 'memc-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vpromc' of Deployment 'memc-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vpromc' of Deployment 'memc-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vpromc' of Deployment 'memc-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vpromc' of Deployment 'memc-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vpromc' of Deployment 'memc-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vpromc' of Deployment 'memc-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memc-dep.yaml:8-22
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: vpromc
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: vpromc
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vpromc" of deployment "memc-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memc-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memc-dep.yaml:4-6
────────────────────────────────────────
   4 ┌   name: memc-dep
   5 │   labels:
   6 └     app: vpromc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memc-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memc-dep.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memc-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memc-dep.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - name: vpromc-port
  22 └               containerPort: 11211
────────────────────────────────────────



memc-svc.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memc-svc.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │     - port: 11211
   8 │       targetPort: vpromc-port
   9 │   selector:
  10 │     app: vpromc
  11 └   type: ClusterIP
────────────────────────────────────────



memcache-dep.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vpro-mc' of Deployment 'vpro-mc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vpro-mc' of Deployment 'vpro-mc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vpro-mc' of 'deployment' 'vpro-mc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vpro-mc' of Deployment 'vpro-mc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vpro-mc' of Deployment 'vpro-mc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vpro-mc' of Deployment 'vpro-mc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vpro-mc' of Deployment 'vpro-mc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vpro-mc' of Deployment 'vpro-mc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vpro-mc' of Deployment 'vpro-mc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vpro-mc' of Deployment 'vpro-mc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vpro-mc' of Deployment 'vpro-mc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vpro-mc' of Deployment 'vpro-mc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcache-dep.yaml:8-21
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: vpro-mc
  11 │   replicas: 1    
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: vpro-mc
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vpro-mc" of deployment "vpro-mc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vpro-mc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcache-dep.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vpro-mc
   5 │   labels:
   6 └     app: vpro-mc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vpro-mc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcache-dep.yaml:18-21
────────────────────────────────────────
  18 ┌         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vpro-mc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcache-dep.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: vpro-mc
  19 │           image: memcached
  20 │           ports:
  21 └             - containerPort: 11211    
────────────────────────────────────────



memcache-t1-cpuset.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memcached' of Pod 'some-memcached' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memcached' of Pod 'some-memcached' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memcached' of 'pod' 'some-memcached' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memcached' of Pod 'some-memcached' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memcached' of Pod 'some-memcached' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcache-t1-cpuset.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 │       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
  14 │   nodeSelector:
  15 └     cca-project-nodetype: "memcached"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memcached" of pod "some-memcached" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod some-memcached in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcache-t1-cpuset.yaml:4-6
────────────────────────────────────────
   4 ┌   name: some-memcached
   5 │   labels:
   6 └     name: some-memcached
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container some-memcached in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod some-memcached in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcache-t1-cpuset.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 │       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
  14 │   nodeSelector:
  15 └     cca-project-nodetype: "memcached"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container memcached in pod some-memcached (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memcache-t1-cpuset.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────



memcache-t1-cpuset1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memcached' of Pod 'some-memcached' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memcached' of Pod 'some-memcached' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memcached' of 'pod' 'some-memcached' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memcached' of Pod 'some-memcached' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memcached' of Pod 'some-memcached' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memcached' of Pod 'some-memcached' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 │       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
  14 │   nodeSelector:
  15 └     cca-project-nodetype: "node-a-2core"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memcached" of pod "some-memcached" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod some-memcached in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: some-memcached
   5 │   labels:
   6 └     name: some-memcached
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container some-memcached in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod some-memcached in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 │       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
  14 │   nodeSelector:
  15 └     cca-project-nodetype: "node-a-2core"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container memcached in pod some-memcached (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memcache-t1-cpuset1.yaml:9-13
────────────────────────────────────────
   9 ┌     - image: anakli/memcached:t1
  10 │       name: memcached
  11 │       imagePullPolicy: Always
  12 │       command: ["/bin/sh"]
  13 └       args: ["-c", "taskset -c 0 ./memcached -t 1 -u memcache"]
────────────────────────────────────────



memcached-operator-controller-manager-metrics-service_v1_service.yaml (kubernetes)
==================================================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcached-operator-controller-manager-metrics-service_v1_service.yaml:15-21
────────────────────────────────────────
  15 ┌   ports:
  16 │   - name: https
  17 │     port: 8443
  18 │     protocol: TCP
  19 │     targetPort: https
  20 │   selector:
  21 └     control-plane: controller-manager
────────────────────────────────────────



memcached-operator-webhook-service_v1_service.yaml (kubernetes)
===============================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcached-operator-webhook-service_v1_service.yaml:14-19
────────────────────────────────────────
  14 ┌   ports:
  15 │   - port: 443
  16 │     protocol: TCP
  17 │     targetPort: 9443
  18 │   selector:
  19 └     control-plane: controller-manager
────────────────────────────────────────



memcached.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memcached1' of Deployment 'memcached1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memcached1' of Deployment 'memcached1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memcached1' of 'deployment' 'memcached1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memcached1' of Deployment 'memcached1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memcached1' of Deployment 'memcached1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memcached1' of Deployment 'memcached1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memcached1' of Deployment 'memcached1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memcached1' of Deployment 'memcached1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcached.yaml:8-30
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: memcached1
  12 │   strategy: {}
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: memcached1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memcached1" of deployment "memcached1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memcached1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcached.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: memcached1
   6 └   name: memcached1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memcached1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcached.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memcached1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcached.yaml:18-30
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached1
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 └             memory: 64Mi
  ..   
────────────────────────────────────────



memcached1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vprocache01' of Deployment 'vprocache01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vprocache01' of Deployment 'vprocache01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vprocache01' of 'deployment' 'vprocache01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vprocache01' of Deployment 'vprocache01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vprocache01' of Deployment 'vprocache01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vprocache01' of Deployment 'vprocache01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vprocache01' of Deployment 'vprocache01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vprocache01' of Deployment 'vprocache01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vprocache01' of Deployment 'vprocache01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vprocache01' of Deployment 'vprocache01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vprocache01' of Deployment 'vprocache01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vprocache01' of Deployment 'vprocache01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcached1.yaml:8-21
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: vprocache01
  11 │   template:
  12 │     metadata:
  13 │       name: vprocache01
  14 │       labels:
  15 │         app: vprocache01
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vprocache01" of deployment "vprocache01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vprocache01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcached1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vprocache01
   5 │   labels:
   6 └     app: vprocache01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vprocache01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcached1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vprocache01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcached1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: vprocache01
  19 │         image: memcached
  20 │         ports:
  21 └         - containerPort: 11211
────────────────────────────────────────



memcached1_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcached1_1.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: vprocache01
   8 │   ports:
   9 │   - port: 11211
  10 └     targetPort: 11211
────────────────────────────────────────



memcached_1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memcached2' of Deployment 'memcached2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memcached2' of Deployment 'memcached2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memcached2' of 'deployment' 'memcached2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memcached2' of Deployment 'memcached2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memcached2' of Deployment 'memcached2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memcached2' of Deployment 'memcached2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memcached2' of Deployment 'memcached2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memcached2' of Deployment 'memcached2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcached_1.yaml:8-30
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: memcached2
  12 │   strategy: {}
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: memcached2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memcached2" of deployment "memcached2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memcached2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcached_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: memcached2
   6 └   name: memcached2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memcached2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcached_1.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 │             memory: 64Mi
  27 └             cpu: '0.1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memcached2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcached_1.yaml:18-30
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: memcached:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: memcached2
  22 │         ports:
  23 │         - containerPort: 11211
  24 │         resources:
  25 │           requests:
  26 └             memory: 64Mi
  ..   
────────────────────────────────────────



memcacheddepl.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memcached' of Deployment 'memcached-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memcached' of Deployment 'memcached-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memcached' of 'deployment' 'memcached-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memcached' of Deployment 'memcached-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memcached' of Deployment 'memcached-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memcached' of Deployment 'memcached-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memcached' of Deployment 'memcached-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memcached' of Deployment 'memcached-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memcached' of Deployment 'memcached-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'memcached' of Deployment 'memcached-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memcached' of Deployment 'memcached-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memcached' of Deployment 'memcached-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcacheddepl.yaml:8-22
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: vprocache
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: vprocache
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memcached" of deployment "memcached-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memcached-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcacheddepl.yaml:4-6
────────────────────────────────────────
   4 ┌   name: memcached-deployment
   5 │   labels:
   6 └     app: vprocache
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memcached-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcacheddepl.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memcached-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcacheddepl.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: memcached
  19 │         image: memcached
  20 │         ports:
  21 │         - name: mc-port
  22 └           containerPort: 11211
────────────────────────────────────────



memcachedservice.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcachedservice.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: vprocache
   9 │   ports:
  10 │     - protocol: TCP
  11 │       port: 11211
  12 └       targetPort: mc-port
────────────────────────────────────────



memcd-sw-app.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memcached' of Deployment 'memcached-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memcached' of Deployment 'memcached-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memcached' of 'deployment' 'memcached-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memcached' of Deployment 'memcached-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memcached' of Deployment 'memcached-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memcached' of Deployment 'memcached-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memcached' of Deployment 'memcached-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memcached' of Deployment 'memcached-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memcached' of Deployment 'memcached-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'memcached' of Deployment 'memcached-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memcached' of Deployment 'memcached-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memcached' of Deployment 'memcached-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcd-sw-app.yaml:6-19
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: memcd-server
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: memcd-server
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memcached" of deployment "memcached-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memcached-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcd-sw-app.yaml:4
────────────────────────────────────────
   4 [   name: memcached-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memcached-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcd-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memcached-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcd-sw-app.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: memcached
  17 │         image: memcached
  18 │         ports:
  19 └         - containerPort: 11211
────────────────────────────────────────



memcd-sw-app_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcd-sw-app_1.yaml:8-15
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 11211
  10 │     name: memcached-port
  11 │     targetPort: 11211
  12 │     protocol: TCP
  13 │   selector:
  14 │     app: memcd-server
  15 └   clusterIP: None
────────────────────────────────────────



memcd-sw-app_2.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'starfighter' of Deployment 'a-wing' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'starfighter' of Deployment 'a-wing' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'starfighter' of 'deployment' 'a-wing' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'starfighter' of Deployment 'a-wing' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'starfighter' of Deployment 'a-wing' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'starfighter' of Deployment 'a-wing' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'starfighter' of Deployment 'a-wing' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'starfighter' of Deployment 'a-wing' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'starfighter' of Deployment 'a-wing' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'starfighter' of Deployment 'a-wing' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'starfighter' of Deployment 'a-wing' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcd-sw-app_2.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: a-wing
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: a-wing
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "starfighter" of deployment "a-wing" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment a-wing in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcd-sw-app_2.yaml:4
────────────────────────────────────────
   4 [   name: a-wing
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container a-wing in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment a-wing in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcd-sw-app_2.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container starfighter in deployment a-wing (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memcd-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfighter
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────



memcd-sw-app_3.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'starfigher' of Deployment 'x-wing' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'starfigher' of Deployment 'x-wing' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'starfigher' of 'deployment' 'x-wing' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'starfigher' of Deployment 'x-wing' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'starfigher' of Deployment 'x-wing' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'starfigher' of Deployment 'x-wing' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'starfigher' of Deployment 'x-wing' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'starfigher' of Deployment 'x-wing' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'starfigher' of Deployment 'x-wing' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'starfigher' of Deployment 'x-wing' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'starfigher' of Deployment 'x-wing' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcd-sw-app_3.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: x-wing
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: x-wing
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "starfigher" of deployment "x-wing" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment x-wing in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcd-sw-app_3.yaml:4
────────────────────────────────────────
   4 [   name: x-wing
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container x-wing in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment x-wing in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcd-sw-app_3.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container starfigher in deployment x-wing (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memcd-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/library/alpine:3.12.7@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────



memcd-sw-app_4.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'starfigher' of Deployment 'alliance-tracker' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'starfigher' of Deployment 'alliance-tracker' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'starfigher' of 'deployment' 'alliance-tracker' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'starfigher' of Deployment 'alliance-tracker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'starfigher' of Deployment 'alliance-tracker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'starfigher' of Deployment 'alliance-tracker' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'starfigher' of Deployment 'alliance-tracker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'starfigher' of Deployment 'alliance-tracker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'starfigher' of Deployment 'alliance-tracker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'starfigher' of Deployment 'alliance-tracker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'starfigher' of Deployment 'alliance-tracker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memcd-sw-app_4.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       name: fleet-tracker
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: fleet-tracker
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "starfigher" of deployment "alliance-tracker" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment alliance-tracker in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memcd-sw-app_4.yaml:4
────────────────────────────────────────
   4 [   name: alliance-tracker
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alliance-tracker in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alliance-tracker in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memcd-sw-app_4.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container starfigher in deployment alliance-tracker (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memcd-sw-app_4.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: starfigher
  17 │         image: docker.io/cilium/python-bmemcached:v0.0.2
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────



memdefault.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memdefault.yaml:6-11
────────────────────────────────────────
   6 ┌   limits:
   7 │   - max:
   8 │       memory: 1Gi
   9 │     min:
  10 │       memory: 500Mi
  11 └     type: Container
────────────────────────────────────────



memdep.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memcontainer' of Deployment 'memdep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memcontainer' of Deployment 'memdep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memcontainer' of 'deployment' 'memdep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memcontainer' of Deployment 'memdep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memcontainer' of Deployment 'memdep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memcontainer' of Deployment 'memdep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memdep.yaml:6-19
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: memdep
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: memdep
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memcontainer" of deployment "memdep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memdep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memdep.yaml:4
────────────────────────────────────────
   4 [   name: memdep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memdep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memdep.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memdep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memdep.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────



memdep1.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memcontainer' of Deployment 'memdep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memcontainer' of Deployment 'memdep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memcontainer' of 'deployment' 'memdep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memcontainer' of Deployment 'memdep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memcontainer' of Deployment 'memdep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memcontainer' of Deployment 'memdep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memcontainer' of Deployment 'memdep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memdep1.yaml:6-19
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: memdep
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: memdep
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memcontainer" of deployment "memdep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memdep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memdep1.yaml:4
────────────────────────────────────────
   4 [   name: memdep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memdep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memdep1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memdep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memdep1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: memcontainer
  17 │           image: memcached
  18 │           ports:
  19 └             - containerPort: 11211
────────────────────────────────────────



memdep2.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vpromc' of Deployment 'vpromc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vpromc' of Deployment 'vpromc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vpromc' of 'deployment' 'vpromc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vpromc' of Deployment 'vpromc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vpromc' of Deployment 'vpromc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vpromc' of Deployment 'vpromc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vpromc' of Deployment 'vpromc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memdep2.yaml:8-22
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: vpromc
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: vpromc
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vpromc" of deployment "vpromc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vpromc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memdep2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vpromc
   5 │   labels:
   6 └     app: vpromc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vpromc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memdep2.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vpromc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memdep2.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: vpromc
  19 │           image: memcached
  20 │           ports:
  21 │             - containerPort: 11211
  22 └               name: vpromc-port
────────────────────────────────────────



memory-allocator-with-limit.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'memory-allocator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'memory-allocator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-allocator-with-limit.yaml:8-21
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: memory-allocator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: memory-allocator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "memory-allocator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memory-allocator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-allocator-with-limit.yaml:4-6
────────────────────────────────────────
   4 ┌   name: memory-allocator
   5 │   labels:
   6 └     kiamol: ch12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-allocator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memory-allocator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator-with-limit.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment memory-allocator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-allocator-with-limit.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────



memory-allocator-with-limit1.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'memory-allocator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'memory-allocator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:8-21
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: memory-allocator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: memory-allocator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "memory-allocator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memory-allocator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: memory-allocator
   5 │   labels:
   6 └     kiamol: ch12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-allocator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memory-allocator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment memory-allocator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-allocator-with-limit1.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────



memory-allocator-with-limit2.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'memory-allocator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'memory-allocator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:8-21
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: memory-allocator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: memory-allocator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "memory-allocator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memory-allocator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: memory-allocator
   5 │   labels:
   6 └     kiamol: ch12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-allocator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memory-allocator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment memory-allocator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-allocator-with-limit2.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────



memory-allocator-with-limit3.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'memory-allocator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'memory-allocator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:8-21
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: memory-allocator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: memory-allocator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "memory-allocator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memory-allocator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: memory-allocator
   5 │   labels:
   6 └     kiamol: ch12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-allocator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memory-allocator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment memory-allocator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-allocator-with-limit3.yaml:17-21
────────────────────────────────────────
  17 ┌         - name: api
  18 │           image: kiamol/ch12-memory-allocator
  19 │           resources:
  20 │             limits:
  21 └               memory: 50Mi
────────────────────────────────────────



memory-allocator.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'memory-allocator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'memory-allocator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-allocator.yaml:8-18
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: memory-allocator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: memory-allocator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "memory-allocator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memory-allocator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-allocator.yaml:4-6
────────────────────────────────────────
   4 ┌   name: memory-allocator
   5 │   labels:
   6 └     kiamol: ch12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-allocator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memory-allocator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment memory-allocator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-allocator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────



memory-allocator1.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'memory-allocator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'memory-allocator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-allocator1.yaml:8-18
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: memory-allocator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: memory-allocator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "memory-allocator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memory-allocator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-allocator1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: memory-allocator
   5 │   labels:
   6 └     kiamol: ch12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-allocator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memory-allocator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator1.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment memory-allocator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-allocator1.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────



memory-allocator2.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'memory-allocator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'memory-allocator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-allocator2.yaml:8-18
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: memory-allocator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: memory-allocator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "memory-allocator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memory-allocator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-allocator2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: memory-allocator
   5 │   labels:
   6 └     kiamol: ch12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-allocator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memory-allocator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator2.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment memory-allocator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-allocator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────



memory-allocator3.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'memory-allocator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'memory-allocator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'memory-allocator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'memory-allocator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-allocator3.yaml:8-18
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: memory-allocator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: memory-allocator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "memory-allocator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment memory-allocator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-allocator3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: memory-allocator
   5 │   labels:
   6 └     kiamol: ch12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-allocator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memory-allocator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-allocator3.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment memory-allocator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-allocator3.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: api
  18 └           image: kiamol/ch12-memory-allocator
────────────────────────────────────────



memory-hog.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress' of Pod 'memory-hog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress' of Pod 'memory-hog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress' of 'pod' 'memory-hog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stress' of Pod 'memory-hog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress' of Pod 'memory-hog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress' of Pod 'memory-hog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress' of Pod 'memory-hog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stress' of Pod 'memory-hog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress' of Pod 'memory-hog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress' of Pod 'memory-hog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-hog.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress" of pod "memory-hog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod memory-hog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-hog.yaml:4
────────────────────────────────────────
   4 [   name: memory-hog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-hog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod memory-hog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-hog.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stress in pod memory-hog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────



memory-hog1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress' of Pod 'memory-hog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress' of Pod 'memory-hog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress' of 'pod' 'memory-hog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stress' of Pod 'memory-hog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress' of Pod 'memory-hog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress' of Pod 'memory-hog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress' of Pod 'memory-hog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stress' of Pod 'memory-hog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress' of Pod 'memory-hog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress' of Pod 'memory-hog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-hog1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress" of pod "memory-hog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod memory-hog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-hog1.yaml:4
────────────────────────────────────────
   4 [   name: memory-hog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-hog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod memory-hog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-hog1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stress in pod memory-hog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "1000Gi"
  12 │         requests:
  13 │           memory: "1000Gi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]
────────────────────────────────────────



memory-pod1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memlimit' of Pod 'mem-limit-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memlimit' of Pod 'mem-limit-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memlimit' of 'pod' 'mem-limit-1' in 'quota-demo-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memlimit' of Pod 'mem-limit-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memlimit' of Pod 'mem-limit-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memlimit' of Pod 'mem-limit-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memlimit' of Pod 'mem-limit-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memlimit' of Pod 'mem-limit-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memlimit' of Pod 'mem-limit-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memlimit' of Pod 'mem-limit-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memlimit' of Pod 'mem-limit-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-pod1.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memlimit" of pod "mem-limit-1" in "quota-demo-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mem-limit-1 in quota-demo-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-pod1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mem-limit-1 in quota-demo-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-pod1.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────



memory-pod2.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memlimit' of Pod 'mem-limit-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memlimit' of Pod 'mem-limit-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memlimit' of 'pod' 'mem-limit-2' in 'quota-demo-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memlimit' of Pod 'mem-limit-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memlimit' of Pod 'mem-limit-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memlimit' of Pod 'mem-limit-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memlimit' of Pod 'mem-limit-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memlimit' of Pod 'mem-limit-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memlimit' of Pod 'mem-limit-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memlimit' of Pod 'mem-limit-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memlimit' of Pod 'mem-limit-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-pod2.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memlimit" of pod "mem-limit-2" in "quota-demo-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mem-limit-2 in quota-demo-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-pod2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mem-limit-2 in quota-demo-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-pod2.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────



memory-pod3.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memlimit' of Pod 'mem-limit-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memlimit' of Pod 'mem-limit-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memlimit' of 'pod' 'mem-limit-3' in 'quota-demo-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memlimit' of Pod 'mem-limit-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memlimit' of Pod 'mem-limit-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memlimit' of Pod 'mem-limit-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memlimit' of Pod 'mem-limit-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memlimit' of Pod 'mem-limit-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memlimit' of Pod 'mem-limit-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memlimit' of Pod 'mem-limit-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memlimit' of Pod 'mem-limit-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-pod3.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memlimit" of pod "mem-limit-3" in "quota-demo-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mem-limit-3 in quota-demo-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-pod3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mem-limit-3 in quota-demo-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-pod3.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: memlimit 
   9 │     image: nginx
  10 │     resources:
  11 │       limits:
  12 └         memory: "200Mi"
────────────────────────────────────────



memory-request-limit.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memory-request-limit-container' of Pod 'memory-request-limit-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memory-request-limit-container' of Pod 'memory-request-limit-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memory-request-limit-container' of 'pod' 'memory-request-limit-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memory-request-limit-container' of Pod 'memory-request-limit-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memory-request-limit-container' of Pod 'memory-request-limit-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memory-request-limit-container' of Pod 'memory-request-limit-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memory-request-limit-container' of Pod 'memory-request-limit-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memory-request-limit-container' of Pod 'memory-request-limit-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memory-request-limit-container' of Pod 'memory-request-limit-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memory-request-limit-container' of Pod 'memory-request-limit-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-request-limit.yaml:7-15
────────────────────────────────────────
   7 ┌   containers:
   8 │     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memory-request-limit-container" of pod "memory-request-limit-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod memory-request-limit-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-request-limit.yaml:5
────────────────────────────────────────
   5 [   name: memory-request-limit-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-request-limit-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-request-limit.yaml:8-15
────────────────────────────────────────
   8 ┌     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod memory-request-limit-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-request-limit.yaml:7-15
────────────────────────────────────────
   7 ┌   containers:
   8 │     - command: ["sleep", "3600"]
   9 │       image: busybox
  10 │       name: memory-request-limit-container
  11 │       resources:
  12 │         limits:
  13 │           memory: "200Mi"
  14 │         requests:
  15 └           memory: "100Mi"
────────────────────────────────────────



memory-sample.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress' of Pod 'memory-sample' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress' of Pod 'memory-sample' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress' of 'pod' 'memory-sample' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stress' of Pod 'memory-sample' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress' of Pod 'memory-sample' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress' of Pod 'memory-sample' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress' of Pod 'memory-sample' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stress' of Pod 'memory-sample' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress' of Pod 'memory-sample' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress' of Pod 'memory-sample' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-sample.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress" of pod "memory-sample" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod memory-sample in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-sample.yaml:4
────────────────────────────────────────
   4 [   name: memory-sample
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-sample in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod memory-sample in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-sample.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stress in pod memory-sample (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-sample.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────



memory-sample1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress' of Pod 'memory-sample' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress' of Pod 'memory-sample' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress' of 'pod' 'memory-sample' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stress' of Pod 'memory-sample' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress' of Pod 'memory-sample' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress' of Pod 'memory-sample' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress' of Pod 'memory-sample' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stress' of Pod 'memory-sample' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress' of Pod 'memory-sample' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress' of Pod 'memory-sample' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory-sample1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress" of pod "memory-sample" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod memory-sample in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory-sample1.yaml:4
────────────────────────────────────────
   4 [   name: memory-sample
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memory-sample in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod memory-sample in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory-sample1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stress in pod memory-sample (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory-sample1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           memory: "200Mi"
  12 │         requests:
  13 │           memory: "100Mi"
  14 │       command: ["stress"]
  15 └       args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]
────────────────────────────────────────



memory.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'pod2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'pod2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'pod2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'pod2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'pod2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'pod2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'pod2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'pod2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'pod2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory.yaml:7-19
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "pod2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory.yaml:5
────────────────────────────────────────
   5 [   name: pod2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 │       limits:
  16 │         memory: "768Mi"
  17 └         cpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory.yaml:7-19
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:1.28
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     resources:
  15 └       limits:
  ..   
────────────────────────────────────────



memory1_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-memory' of Pod 'pod-memory' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-memory' of Pod 'pod-memory' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-memory' of 'pod' 'pod-memory' in '0-eldada' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-memory' of Pod 'pod-memory' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-memory' of Pod 'pod-memory' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-memory' of Pod 'pod-memory' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-memory' of Pod 'pod-memory' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-memory' of Pod 'pod-memory' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-memory' of Pod 'pod-memory' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-memory' of Pod 'pod-memory' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-memory' of Pod 'pod-memory' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory1_1.yaml:7-31
────────────────────────────────────────
   7 ┌   securityContext:
   8 │     runAsUser: 1000
   9 │     fsGroup: 1000
  10 │   containers:
  11 │   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 └     - -c
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-memory" of pod "pod-memory" in "0-eldada" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container-memory in pod pod-memory (namespace: 0-eldada) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memory1_1.yaml:11-31
────────────────────────────────────────
  11 ┌   - name: container-memory
  12 │     image: eldada.jfrog.io/docker/ubuntu-with-tools:22.10
  13 │     command:
  14 │     - bash
  15 │     - -c
  16 │     - 'echo "#######################################"; echo "### Downloading memory.sh";
  17 │       curl -f -s -o ./memory.sh https://raw.githubusercontent.com/eldada/command-examples/master/scripts/memory.sh;
  18 │       echo "### Running memory.sh"; bash ./memory.sh --mb ${MEMORY_TO_USE_MB} --wait
  19 └       ${TIME_TO_HOLD} --restart ${RESTART} --gap ${GAP} || exit 1; echo "Sleeping
  ..   
────────────────────────────────────────



memory_limit.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myapp' of Deployment 'myapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory_limit.yaml:6-14
────────────────────────────────────────
   6 ┌   template:
   7 │     spec:
   8 │       containers:
   9 │         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory_limit.yaml:4
────────────────────────────────────────
   4 [   name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory_limit.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory_limit.yaml:8-14
────────────────────────────────────────
   8 ┌       containers:
   9 │         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "512Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────



memory_limit1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myapp' of Deployment 'myapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memory_limit1.yaml:6-14
────────────────────────────────────────
   6 ┌   template:
   7 │     spec:
   8 │       containers:
   9 │         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memory_limit1.yaml:4
────────────────────────────────────────
   4 [   name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory_limit1.yaml:9-14
────────────────────────────────────────
   9 ┌         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memory_limit1.yaml:8-14
────────────────────────────────────────
   8 ┌       containers:
   9 │         - name: myapp
  10 │           resources:
  11 │             limits:
  12 │               memory: "256Mi"
  13 │             requests:
  14 └               memory: "128Mi"
────────────────────────────────────────



memoryhog.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'memoryhog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'memoryhog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'memoryhog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'memoryhog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'memoryhog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'memoryhog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'memoryhog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'memoryhog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memoryhog.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "memoryhog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod memoryhog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memoryhog.yaml:4
────────────────────────────────────────
   4 [   name: memoryhog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memoryhog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod memoryhog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memoryhog.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container main in pod memoryhog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memoryhog.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────



memoryhog1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'memoryhog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'memoryhog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'memoryhog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'memoryhog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'memoryhog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'memoryhog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'memoryhog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'memoryhog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memoryhog1.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "memoryhog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod memoryhog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 memoryhog1.yaml:4
────────────────────────────────────────
   4 [   name: memoryhog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memoryhog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod memoryhog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memoryhog1.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 └       limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container main in pod memoryhog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memoryhog1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: docker.io/luksa/memoryhog
   8 │     args: ["1500000000"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 0
  13 │         memory: 0
  14 │       limits:
  15 │         cpu: 500m
  16 └         memory: 10Mi
────────────────────────────────────────



memos-claim0-persistentvolumeclaim.yaml (kubernetes)
====================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memos-claim0-persistentvolumeclaim.yaml:11-15
────────────────────────────────────────
  11 ┌   accessModes:
  12 │     - ReadWriteOnce
  13 │   resources:
  14 │     requests:
  15 └       storage: 100Mi
────────────────────────────────────────



memos-deployment.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memos' of Deployment 'memos' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memos' of Deployment 'memos' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memos' of 'deployment' 'memos' in 'memos' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memos' of Deployment 'memos' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memos' of Deployment 'memos' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memos' of Deployment 'memos' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memos' of Deployment 'memos' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memos' of Deployment 'memos' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'memos' of Deployment 'memos' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memos' of Deployment 'memos' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memos' of Deployment 'memos' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'memos' of Deployment 'memos' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memos-deployment.yaml:12-53
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       io.kompose.service: memos
  16 │   strategy:
  17 │     type: Recreate
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memos" of deployment "memos" in "memos" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container memos in memos namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment memos in memos namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 memos-deployment.yaml:27-53
────────────────────────────────────────
  27 ┌       containers:
  28 │         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 └             - mountPath: /var/opt/memos
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container memos in deployment memos (namespace: memos) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 memos-deployment.yaml:28-44
────────────────────────────────────────
  28 ┌         - image: neosmemo/memos:0.24.0
  29 │           name: memos
  30 │           ports:
  31 │             - containerPort: &port 5230
  32 │               hostPort: *port
  33 │               protocol: TCP
  34 │           volumeMounts:
  35 │             - mountPath: /var/opt/memos
  36 └               name: memos-claim0
  ..   
────────────────────────────────────────



memos-ingress.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memos-ingress.yaml:18-32
────────────────────────────────────────
  18 ┌   rules:
  19 │     - host: memos.k3s.pro
  20 │       http:
  21 │         paths:
  22 │           - path: /
  23 │             pathType: Prefix
  24 │             backend:
  25 │               service:
  26 └                 name: memos-service
  ..   
────────────────────────────────────────



memos-service.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 memos-service.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │     - name: '5230'
  14 │       port: 5230
  15 │       targetPort: 5230
  16 │   selector:
  17 └     io.kompose.service: memos
────────────────────────────────────────



mempod.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'constraints-mem-demo-ctr' of Pod 'constraints-mem-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'constraints-mem-demo-ctr' of Pod 'constraints-mem-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'constraints-mem-demo-ctr' of 'pod' 'constraints-mem-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'constraints-mem-demo-ctr' of Pod 'constraints-mem-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'constraints-mem-demo-ctr' of Pod 'constraints-mem-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'constraints-mem-demo-ctr' of Pod 'constraints-mem-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'constraints-mem-demo-ctr' of Pod 'constraints-mem-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'constraints-mem-demo-ctr' of Pod 'constraints-mem-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'constraints-mem-demo-ctr' of Pod 'constraints-mem-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'constraints-mem-demo-ctr' of Pod 'constraints-mem-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempod.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "constraints-mem-demo-ctr" of pod "constraints-mem-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod constraints-mem-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mempod.yaml:4
────────────────────────────────────────
   4 [   name: constraints-mem-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container constraints-mem-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod constraints-mem-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempod.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: constraints-mem-demo-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "600Mi"
────────────────────────────────────────



mempod2.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'constraints-mem-demo-2-ctr' of Pod 'constraints-mem-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'constraints-mem-demo-2-ctr' of Pod 'constraints-mem-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'constraints-mem-demo-2-ctr' of 'pod' 'constraints-mem-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'constraints-mem-demo-2-ctr' of Pod 'constraints-mem-demo-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'constraints-mem-demo-2-ctr' of Pod 'constraints-mem-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'constraints-mem-demo-2-ctr' of Pod 'constraints-mem-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'constraints-mem-demo-2-ctr' of Pod 'constraints-mem-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'constraints-mem-demo-2-ctr' of Pod 'constraints-mem-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'constraints-mem-demo-2-ctr' of Pod 'constraints-mem-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'constraints-mem-demo-2-ctr' of Pod 'constraints-mem-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempod2.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "constraints-mem-demo-2-ctr" of pod "constraints-mem-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod constraints-mem-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mempod2.yaml:4
────────────────────────────────────────
   4 [   name: constraints-mem-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container constraints-mem-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempod2.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod constraints-mem-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempod2.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: constraints-mem-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "1.5Gi"
  12 │       requests:
  13 └         memory: "800Mi"
────────────────────────────────────────



mempod3.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'constraints-mem-demo-3-ctr' of Pod 'constraints-mem-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'constraints-mem-demo-3-ctr' of Pod 'constraints-mem-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'constraints-mem-demo-3-ctr' of 'pod' 'constraints-mem-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'constraints-mem-demo-3-ctr' of Pod 'constraints-mem-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'constraints-mem-demo-3-ctr' of Pod 'constraints-mem-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'constraints-mem-demo-3-ctr' of Pod 'constraints-mem-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'constraints-mem-demo-3-ctr' of Pod 'constraints-mem-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'constraints-mem-demo-3-ctr' of Pod 'constraints-mem-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'constraints-mem-demo-3-ctr' of Pod 'constraints-mem-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'constraints-mem-demo-3-ctr' of Pod 'constraints-mem-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempod3.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "constraints-mem-demo-3-ctr" of pod "constraints-mem-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod constraints-mem-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mempod3.yaml:4
────────────────────────────────────────
   4 [   name: constraints-mem-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container constraints-mem-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempod3.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod constraints-mem-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempod3.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: constraints-mem-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 │         memory: "800Mi"
  12 │       requests:
  13 └         memory: "100Mi"
────────────────────────────────────────



mempod4.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'constraints-mem-demo-4-ctr' of 'pod' 'constraints-mem-demo-4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'constraints-mem-demo-4-ctr' of Pod 'constraints-mem-demo-4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempod4.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "constraints-mem-demo-4-ctr" of pod "constraints-mem-demo-4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod constraints-mem-demo-4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 mempod4.yaml:4
────────────────────────────────────────
   4 [   name: constraints-mem-demo-4
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container constraints-mem-demo-4 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod constraints-mem-demo-4 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempod4.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: constraints-mem-demo-4-ctr
   8 └     image: nginx
────────────────────────────────────────



mempool.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempool.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │   - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 100Mi
────────────────────────────────────────



mempool_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mempool-db' of Deployment 'mempool-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mempool-db' of Deployment 'mempool-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mempool-db' of 'deployment' 'mempool-db' in 'bitcoin' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mempool-db' of Deployment 'mempool-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mempool-db' of Deployment 'mempool-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mempool-db' of Deployment 'mempool-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mempool-db' of Deployment 'mempool-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mempool-db' of Deployment 'mempool-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mempool-db' of Deployment 'mempool-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mempool-db' of Deployment 'mempool-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mempool-db' of Deployment 'mempool-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempool_1.yaml:7-43
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: mempool-db
  11 │   strategy:
  12 │     type: Recreate
  13 │   template:
  14 │     metadata:
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mempool-db" of deployment "mempool-db" in "bitcoin" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mempool-db in bitcoin namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempool_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MYSQL_DATABASE
  27 └           value: mempool
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mempool-db in bitcoin namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempool_1.yaml:18-43
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: mariadb:10.5.21
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-db
  22 │         ports:
  23 │         - containerPort: 3306
  24 │           protocol: TCP
  25 │         env:
  26 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



mempool_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempool_2.yaml:9-14
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: mempool-db
  11 │   ports:
  12 │   - name: mysql
  13 │     port: 3306
  14 └     targetPort: 3306
────────────────────────────────────────



mempool_3.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempool_3.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │   - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 100Mi
────────────────────────────────────────



mempool_4.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mempool-backend' of Deployment 'mempool-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mempool-backend' of Deployment 'mempool-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mempool-backend' of 'deployment' 'mempool-backend' in 'bitcoin' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mempool-backend' of Deployment 'mempool-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mempool-backend' of Deployment 'mempool-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mempool-backend' of Deployment 'mempool-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mempool-backend' of Deployment 'mempool-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mempool-backend' of Deployment 'mempool-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mempool-backend' of Deployment 'mempool-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mempool-backend' of Deployment 'mempool-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mempool-backend' of Deployment 'mempool-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempool_4.yaml:7-57
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: mempool-backend
  11 │   strategy:
  12 │     type: Recreate
  13 │   template:
  14 │     metadata:
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mempool-backend" of deployment "mempool-backend" in "bitcoin" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mempool-backend in bitcoin namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mempool-backend in bitcoin namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempool_4.yaml:18-57
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 └         - name: MEMPOOL_BACKEND
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mempool-backend in deployment mempool-backend (namespace: bitcoin) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mempool_4.yaml:19-51
────────────────────────────────────────
  19 ┌       - image: mempool/backend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-backend
  22 │         ports:
  23 │         - containerPort: 8999
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: MEMPOOL_BACKEND
  27 └           value: none
  ..   
────────────────────────────────────────



mempool_5.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempool_5.yaml:9-14
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: mempool-backend
  11 │   ports:
  12 │   - name: api
  13 │     port: 8999
  14 └     targetPort: 8999
────────────────────────────────────────



mempool_6.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mempool-frontend' of Deployment 'mempool-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mempool-frontend' of Deployment 'mempool-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mempool-frontend' of 'deployment' 'mempool-frontend' in 'bitcoin' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mempool-frontend' of Deployment 'mempool-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mempool-frontend' of Deployment 'mempool-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mempool-frontend' of Deployment 'mempool-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mempool-frontend' of Deployment 'mempool-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mempool-frontend' of Deployment 'mempool-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mempool-frontend' of Deployment 'mempool-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mempool-frontend' of Deployment 'mempool-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mempool-frontend' of Deployment 'mempool-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempool_6.yaml:7-32
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: mempool-frontend
  11 │   strategy:
  12 │     type: Recreate
  13 │   template:
  14 │     metadata:
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mempool-frontend" of deployment "mempool-frontend" in "bitcoin" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mempool-frontend in bitcoin namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mempool-frontend in bitcoin namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mempool_6.yaml:18-32
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 └         - name: FRONTEND_HTTP_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mempool-frontend in deployment mempool-frontend (namespace: bitcoin) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mempool_6.yaml:19-30
────────────────────────────────────────
  19 ┌       - image: mempool/frontend:v2.5.1
  20 │         imagePullPolicy: IfNotPresent
  21 │         name: mempool-frontend
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: FRONTEND_HTTP_PORT
  27 └           value: '8080'
  ..   
────────────────────────────────────────



mempool_7.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mempool_7.yaml:9-16
────────────────────────────────────────
   9 ┌   type: NodePort
  10 │   selector:
  11 │     app: mempool-frontend
  12 │   ports:
  13 │   - name: http
  14 │     port: 8080
  15 │     targetPort: 8080
  16 └     nodePort: 30880
────────────────────────────────────────



menu-config-mongodb.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 menu-config-mongodb.yaml:9-14
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   ports:
  11 │   - port: 27017
  12 │     targetPort: 27017
  13 │   selector:
  14 └     app: menu-config-mongodb
────────────────────────────────────────



menu-config-mongodb_3.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'menu-config-mongodb' of 'deployment' 'menu-config-mongodb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'menu-config-mongodb' of Deployment 'menu-config-mongodb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 menu-config-mongodb_3.yaml:7-37
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       service: menu-config-mongodb
  11 │       app: menu-config-mongodb
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         service: menu-config-mongodb
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "menu-config-mongodb" of deployment "menu-config-mongodb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment menu-config-mongodb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 menu-config-mongodb_3.yaml:4-5
────────────────────────────────────────
   4 ┌   name: menu-config-mongodb
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container menu-config-mongodb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 menu-config-mongodb_3.yaml:22-34
────────────────────────────────────────
  22 ┌       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 │         - name: MONGO_INITDB_ROOT_USERNAME
  29 │           value: root
  30 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment menu-config-mongodb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 menu-config-mongodb_3.yaml:20-37
────────────────────────────────────────
  20 ┌       serviceAccountName: menu-config-mongodb
  21 │       containers:
  22 │       - name: menu-config-mongodb
  23 │         image: mongo
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 27017
  27 │         env:
  28 └         - name: MONGO_INITDB_ROOT_USERNAME
  ..   
────────────────────────────────────────



menu-config_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 menu-config_2.yaml:8-13
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   ports:
  10 │   - port: 1028
  11 │     targetPort: 1028
  12 │   selector:
  13 └     app: menuconfig
────────────────────────────────────────



menu-config_3.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'menuconfig' of Deployment 'menuconfig' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'menuconfig' of Deployment 'menuconfig' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'menuconfig' of 'deployment' 'menuconfig' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'menuconfig' of Deployment 'menuconfig' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'menuconfig' of Deployment 'menuconfig' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'menuconfig' of Deployment 'menuconfig' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'menuconfig' of Deployment 'menuconfig' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'menuconfig' of Deployment 'menuconfig' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'menuconfig' of Deployment 'menuconfig' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'menuconfig' of Deployment 'menuconfig' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'menuconfig' of Deployment 'menuconfig' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'menuconfig' of Deployment 'menuconfig' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 menu-config_3.yaml:9-34
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: menuconfig
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: menuconfig
  17 └         service: menuconfig
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "menuconfig" of deployment "menuconfig" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment menuconfig in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 menu-config_3.yaml:4-7
────────────────────────────────────────
   4 ┌   name: menuconfig
   5 │   namespace: default
   6 │   labels:
   7 └     app: menuconfig
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container menuconfig in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment menuconfig in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 menu-config_3.yaml:21-34
────────────────────────────────────────
  21 ┌       serviceAccountName: menuconfig
  22 │       containers:
  23 │       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 └         - name: MONGO_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container menuconfig in deployment menuconfig (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 menu-config_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menuconfig
  24 │         image: opielapatryk/menu_config_eks3
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1028
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: menu-config-mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────



menu-deployment.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'menu' of Deployment 'menu' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'menu' of Deployment 'menu' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'menu' of 'deployment' 'menu' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'menu' of Deployment 'menu' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'menu' of Deployment 'menu' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'menu' of Deployment 'menu' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'menu' of Deployment 'menu' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'menu' of Deployment 'menu' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 menu-deployment.yaml:6-19
────────────────────────────────────────
   6 ┌  replicas: 1
   7 │  selector:
   8 │   matchLabels:
   9 │    app: menu
  10 │  template:
  11 │   metadata:
  12 │    labels:
  13 │     app: menu
  14 └   spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "menu" of deployment "menu" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment menu in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 menu-deployment.yaml:4
────────────────────────────────────────
   4 [  name: menu
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container menu in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment menu in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 menu-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌    containers:
  16 │     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container menu in deployment menu (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 menu-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────



menu-deployment1.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'menu' of Deployment 'menu' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'menu' of Deployment 'menu' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'menu' of 'deployment' 'menu' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'menu' of Deployment 'menu' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'menu' of Deployment 'menu' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'menu' of Deployment 'menu' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'menu' of Deployment 'menu' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'menu' of Deployment 'menu' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 menu-deployment1.yaml:6-19
────────────────────────────────────────
   6 ┌  replicas: 1
   7 │  selector:
   8 │   matchLabels:
   9 │    app: menu
  10 │  template:
  11 │   metadata:
  12 │    labels:
  13 │     app: menu
  14 └   spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "menu" of deployment "menu" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment menu in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 menu-deployment1.yaml:4
────────────────────────────────────────
   4 [  name: menu
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container menu in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment menu in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 menu-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌    containers:
  16 │     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container menu in deployment menu (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 menu-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌     - name: menu
  17 │       image: josegabjimenez/forkfiesta-menu
  18 │       ports:
  19 └        - containerPort: 4000
────────────────────────────────────────



menu-service.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 menu-service.yaml:6-12
────────────────────────────────────────
   6 ┌  selector:
   7 │   app: menu
   8 │  ports:
   9 │   - protocol: TCP
  10 │     port: 4000
  11 │     targetPort: 4000
  12 └  type: NodePort
────────────────────────────────────────



menu-service1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 menu-service1.yaml:6-12
────────────────────────────────────────
   6 ┌  selector:
   7 │   app: menu
   8 │  ports:
   9 │   - protocol: TCP
  10 │     port: 4000
  11 │     targetPort: 4000
  12 └  type: NodePort
────────────────────────────────────────



menu1_2.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 menu1_2.yaml:8-13
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   ports:
  10 │   - port: 1027
  11 │     targetPort: 1027
  12 │   selector:
  13 └     app: menu
────────────────────────────────────────



menu1_3.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'menu' of Deployment 'menu' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'menu' of Deployment 'menu' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'menu' of 'deployment' 'menu' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'menu' of Deployment 'menu' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'menu' of Deployment 'menu' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'menu' of Deployment 'menu' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'menu' of Deployment 'menu' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'menu' of Deployment 'menu' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'menu' of Deployment 'menu' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 menu1_3.yaml:9-34
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: menu
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: menu
  17 └         service: menu
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "menu" of deployment "menu" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment menu in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 menu1_3.yaml:4-7
────────────────────────────────────────
   4 ┌   name: menu
   5 │   namespace: default
   6 │   labels:
   7 └     app: menu
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container menu in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment menu in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 menu1_3.yaml:21-34
────────────────────────────────────────
  21 ┌       serviceAccountName: menu
  22 │       containers:
  23 │       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 └         - name: MONGO_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container menu in deployment menu (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 menu1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: menu
  24 │         image: opielapatryk/menu_display_eks2
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1027
  28 │         env:
  29 │         - name: MONGO_HOST
  30 │           value: mongodb
  31 └         - name: RABBITMQ_HOST
  ..   
────────────────────────────────────────



merged-deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged-deployment.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: second-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 8080
  12 └   type: LoadBalancer
────────────────────────────────────────



merged-deployment1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged-deployment1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: first-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 2288
  12 └   type: LoadBalancer
────────────────────────────────────────



merged-deployment1_1.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'first-app' of Deployment 'first-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'first-app' of Deployment 'first-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'first-app' of 'deployment' 'first-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'first-app' of Deployment 'first-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'first-app' of Deployment 'first-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'first-app' of Deployment 'first-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'first-app' of Deployment 'first-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'first-app-deployment' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 merged-deployment1_1.yaml:6-40
────────────────────────────────────────
   6 ┌   replicas: 4
   7 │   selector:
   8 │     matchLabels:
   9 │       app: first-app
  10 │       tier: backend
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: first-app
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged-deployment1_1.yaml:6-40
────────────────────────────────────────
   6 ┌   replicas: 4
   7 │   selector:
   8 │     matchLabels:
   9 │       app: first-app
  10 │       tier: backend
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: first-app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "first-app" of deployment "first-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment first-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 merged-deployment1_1.yaml:4
────────────────────────────────────────
   4 [   name: first-app-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container first-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment first-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 merged-deployment1_1.yaml:17-40
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container first-app in deployment first-app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 merged-deployment1_1.yaml:18-35
────────────────────────────────────────
  18 ┌       - name: first-app
  19 │         image: phambchungdev/k8s-app:1.1
  20 │         volumeMounts:
  21 │         - name: data-log
  22 │           mountPath: /app/data
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /
  26 └             port: 2288
  ..   
────────────────────────────────────────



merged-deployment_1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'second-node' of Deployment 'second-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'second-node' of Deployment 'second-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'second-node' of 'deployment' 'second-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'second-node' of Deployment 'second-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'second-node' of Deployment 'second-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'second-node' of Deployment 'second-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'second-node' of Deployment 'second-app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'second-node' of Deployment 'second-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'second-node' of Deployment 'second-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'second-node' of Deployment 'second-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'second-node' of Deployment 'second-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged-deployment_1.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: second-app
  10 │       tier: backend
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: second-app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "second-node" of deployment "second-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment second-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 merged-deployment_1.yaml:4
────────────────────────────────────────
   4 [   name: second-app-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container second-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment second-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 merged-deployment_1.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container second-node in deployment second-app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 merged-deployment_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: second-node
  19 └         image: asyrul21/kub-first-app:2
────────────────────────────────────────



merged-services-dep.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged-services-dep.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: my-dep-pod
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 8080
  12 └   type: LoadBalancer
────────────────────────────────────────



merged-services-dep_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-dep-container' of Deployment 'my-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-dep-container' of Deployment 'my-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-dep-container' of 'deployment' 'my-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-dep-container' of Deployment 'my-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-dep-container' of Deployment 'my-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-dep-container' of Deployment 'my-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-dep-container' of Deployment 'my-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-dep-container' of Deployment 'my-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-dep-container' of Deployment 'my-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-dep-container' of Deployment 'my-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-dep-container' of Deployment 'my-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged-services-dep_1.yaml:6-17
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: my-dep-pod
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: my-dep-pod
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-dep-container" of deployment "my-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 merged-services-dep_1.yaml:4
────────────────────────────────────────
   4 [   name: my-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 merged-services-dep_1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-dep-container in deployment my-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 merged-services-dep_1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: my-dep-container
  17 └         image: mohitrathor/kube-pod-demo:1
────────────────────────────────────────



merged.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged.yaml:7-23
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       id: frontend
  10 │   policyTypes:
  11 │   - Egress
  12 │   egress:
  13 │   - to:
  14 │     - namespaceSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────



merged_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged_1.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       id: frontend
  10 │   policyTypes:
  11 │   - Egress
  12 │   egress:
  13 │   - to:
  14 │     - namespaceSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────



merged_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged_2.yaml:7-16
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       id: frontend
  10 │   policyTypes:
  11 │   - Egress
  12 │   egress:
  13 │   - to:
  14 │     - podSelector:
  15 │         matchLabels:
  16 └           id: backend
────────────────────────────────────────



merged_pgql_deployment - bck_1.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-secret' in 'postgresql' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



merged_pgql_deployment - bck_2.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged_pgql_deployment - bck_2.yaml:10-17
────────────────────────────────────────
  10 ┌   storageClassName: manual
  11 │   capacity:
  12 │     storage: 2Gi
  13 │   accessModes:
  14 │   - ReadWriteMany
  15 │   persistentVolumeReclaimPolicy: Retain
  16 │   hostPath:
  17 └     path: /data/postgresql
────────────────────────────────────────



merged_pgql_deployment - bck_3.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged_pgql_deployment - bck_3.yaml:9-14
────────────────────────────────────────
   9 ┌   storageClassName: manual
  10 │   accessModes:
  11 │   - ReadWriteMany
  12 │   resources:
  13 │     requests:
  14 └       storage: 1Gi
────────────────────────────────────────



merged_pgql_deployment - bck_4.yaml (kubernetes)
================================================
Tests: 131 (SUCCESSES: 99, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 21, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-postgres' of 'deployment' 'postgres' in 'postgresql' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'postgresql' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:7-64
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: postgres
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: postgres
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-postgres" of deployment "postgres" in "postgresql" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "postgresql" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in postgresql namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:36-55
────────────────────────────────────────
  36 ┌       - name: postgres
  37 │         image: postgres:14
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           postStart:
  41 │             exec:
  42 │               command:
  43 │               - /bin/sh
  44 └               - -c
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in postgresql namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 │           set -e
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in postgresql namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 merged_pgql_deployment - bck_4.yaml:16-64
────────────────────────────────────────
  16 ┌       initContainers:
  17 │       - name: init-postgres
  18 │         image: postgres:14
  19 │         command:
  20 │         - bash
  21 │         - -c
  22 │         - '#!/bin/bash
  23 │ 
  24 └           set -e
  ..   
────────────────────────────────────────



merged_pgql_deployment - bck_5.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged_pgql_deployment - bck_5.yaml:9-14
────────────────────────────────────────
   9 ┌   type: LoadBalancer
  10 │   ports:
  11 │   - port: 5432
  12 │     targetPort: 5432
  13 │   selector:
  14 └     app: postgres
────────────────────────────────────────



merged_pgql_deployment_1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-secret' in 'postgresql-dev' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



merged_pgql_deployment_2.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged_pgql_deployment_2.yaml:9-18
────────────────────────────────────────
   9 ┌   storageClassName: nfs-client-extdsk
  10 │   capacity:
  11 │     storage: 2Gi
  12 │   accessModes:
  13 │   - ReadWriteMany
  14 │   persistentVolumeReclaimPolicy: Retain
  15 │   nfs:
  16 │     path: /mnt/exthdd/cluster_data/postgresql
  17 │     server: 192.168.0.62
  18 └     readOnly: false
────────────────────────────────────────



merged_pgql_deployment_3.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged_pgql_deployment_3.yaml:9-14
────────────────────────────────────────
   9 ┌   storageClassName: nfs-client-extdsk
  10 │   accessModes:
  11 │   - ReadWriteMany
  12 │   resources:
  13 │     requests:
  14 └       storage: 1Gi
────────────────────────────────────────



merged_pgql_deployment_4.yaml (kubernetes)
==========================================
Tests: 129 (SUCCESSES: 99, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 21, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-postgres' of Deployment 'postgres-dev' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres-dev' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-postgres' of Deployment 'postgres-dev' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres-dev' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-postgres' of 'deployment' 'postgres-dev' in 'postgresql-dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres-dev' in 'postgresql-dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-postgres' of Deployment 'postgres-dev' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres-dev' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-postgres' of Deployment 'postgres-dev' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres-dev' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-postgres' of Deployment 'postgres-dev' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres-dev' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-postgres' of Deployment 'postgres-dev' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres-dev' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-postgres' of Deployment 'postgres-dev' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres-dev' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-postgres' of Deployment 'postgres-dev' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres-dev' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-postgres' of Deployment 'postgres-dev' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres-dev' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-postgres' of Deployment 'postgres-dev' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres-dev' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:7-107
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: postgres
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: postgres
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-postgres" of deployment "postgres-dev" in "postgresql-dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres-dev" in "postgresql-dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:61-101
────────────────────────────────────────
  61 ┌       - name: postgres
  62 │         image: postgres:14
  63 │         imagePullPolicy: IfNotPresent
  64 │         securityContext:
  65 │           runAsUser: 107
  66 │           runAsGroup: 112
  67 │           allowPrivilegeEscalation: true
  68 │         lifecycle:
  69 └           postStart:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:17-59
────────────────────────────────────────
  17 ┌       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 │         - bash
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres-dev in postgresql-dev namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 merged_pgql_deployment_4.yaml:16-107
────────────────────────────────────────
  16 ┌       initContainers:
  17 │       - name: init-postgres
  18 │         image: postgres:14
  19 │         securityContext:
  20 │           runAsUser: 107
  21 │           runAsGroup: 112
  22 │           allowPrivilegeEscalation: true
  23 │         command:
  24 └         - bash
  ..   
────────────────────────────────────────



merged_pgql_deployment_5.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 merged_pgql_deployment_5.yaml:9-14
────────────────────────────────────────
   9 ┌   type: LoadBalancer
  10 │   ports:
  11 │   - port: 5432
  12 │     targetPort: 5432
  13 │   selector:
  14 └     app: postgres
────────────────────────────────────────



mesh12_1.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'dapp-mesh-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 mesh12_1.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - apps
   8 │   resources:
   9 │   - statefulsets
  10 │   verbs:
  11 │   - get
  12 │   - list
  13 │   - watch
  14 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'dapp-mesh-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 mesh12_1.yaml:18-33
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - pods
  24 │   - serviceaccounts
  25 │   - services
  26 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'dapp-mesh-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 mesh12_1.yaml:18-33
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - pods
  24 │   - serviceaccounts
  25 │   - services
  26 └   verbs:
  ..   
────────────────────────────────────────



mesh12_3.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dapp-mesh-operator' of Deployment 'dapp-mesh-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dapp-mesh-operator' of Deployment 'dapp-mesh-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dapp-mesh-operator' of 'deployment' 'dapp-mesh-operator' in 'dappmesh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dapp-mesh-operator' of Deployment 'dapp-mesh-operator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'dapp-mesh-operator' of Deployment 'dapp-mesh-operator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dapp-mesh-operator' of Deployment 'dapp-mesh-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dapp-mesh-operator' of Deployment 'dapp-mesh-operator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dapp-mesh-operator' of Deployment 'dapp-mesh-operator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dapp-mesh-operator' of Deployment 'dapp-mesh-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dapp-mesh-operator' of Deployment 'dapp-mesh-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 mesh12_3.yaml:9-27
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: dapp-mesh-operator
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: dapp-mesh-operator
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dapp-mesh-operator" of deployment "dapp-mesh-operator" in "dappmesh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapp-mesh-operator in dappmesh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dapp-mesh-operator in dappmesh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 mesh12_3.yaml:17-27
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dapp-mesh-operator in deployment dapp-mesh-operator (namespace: dappmesh) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 mesh12_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - image: ghcr.io/dappmesh/dapp-mesh-operator:latest
  19 │         imagePullPolicy: Always
  20 │         name: dapp-mesh-operator
  21 │         ports:
  22 │         - containerPort: 4418
  23 │         resources:
  24 │           limits:
  25 │             cpu: 300m
  26 └             memory: 200Mi
────────────────────────────────────────



message-broker-depl.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'message-broker' of Deployment 'message-broker-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'message-broker' of Deployment 'message-broker-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'message-broker' of 'deployment' 'message-broker-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'message-broker' of Deployment 'message-broker-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'message-broker' of Deployment 'message-broker-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'message-broker' of Deployment 'message-broker-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'message-broker' of Deployment 'message-broker-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'message-broker' of Deployment 'message-broker-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'message-broker' of Deployment 'message-broker-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'message-broker' of Deployment 'message-broker-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'message-broker' of Deployment 'message-broker-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'message-broker' of Deployment 'message-broker-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 message-broker-depl.yaml:6-17
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: message-broker
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: message-broker
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "message-broker" of deployment "message-broker-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment message-broker-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 message-broker-depl.yaml:4
────────────────────────────────────────
   4 [   name: message-broker-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container message-broker-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment message-broker-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 message-broker-depl.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container message-broker in deployment message-broker-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 message-broker-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: message-broker
  17 └         image: cyoni/message-broker
────────────────────────────────────────



message-broker-depl_1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 message-broker-depl_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: message-broker
   8 │   ports:
   9 │   - name: message-broker
  10 │     protocol: TCP
  11 │     port: 5000
  12 └     targetPort: 5000
────────────────────────────────────────



message-broker.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 message-broker.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 1Gi
────────────────────────────────────────



message-broker_1.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq' of Deployment 'message-broker' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq' of Deployment 'message-broker' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq' of 'deployment' 'message-broker' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq' of Deployment 'message-broker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq' of Deployment 'message-broker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq' of Deployment 'message-broker' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq' of Deployment 'message-broker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq' of Deployment 'message-broker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq' of Deployment 'message-broker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq' of Deployment 'message-broker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq' of Deployment 'message-broker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 message-broker_1.yaml:6-31
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: message-broker
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: message-broker
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq" of deployment "message-broker" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment message-broker in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 message-broker_1.yaml:4
────────────────────────────────────────
   4 [   name: message-broker
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container message-broker in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 message-broker_1.yaml:15-27
────────────────────────────────────────
  15 ┌       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 └               name: secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment message-broker in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 message-broker_1.yaml:14-31
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: rabbitmq
  16 │         image: rabbitmq:3.12.11-management-alpine
  17 │         env:
  18 │         - name: RABBITMQ_DEFAULT_USER
  19 │           value: dev
  20 │         - name: RABBITMQ_DEFAULT_PASS
  21 │           valueFrom:
  22 └             secretKeyRef:
  ..   
────────────────────────────────────────



message-broker_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 message-broker_2.yaml:6-10
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   ports:
   8 │   - port: 5672
   9 │   selector:
  10 └     app: message-broker
────────────────────────────────────────



messages-service.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'messages-service' of Deployment 'messages-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'messages-service' of Deployment 'messages-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'messages-service' of 'deployment' 'messages-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'messages-service' of Deployment 'messages-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'messages-service' of Deployment 'messages-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'messages-service' of Deployment 'messages-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'messages-service' of Deployment 'messages-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'messages-service' of Deployment 'messages-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'messages-service' of Deployment 'messages-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'messages-service' of Deployment 'messages-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 messages-service.yaml:6-32
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: messages-service
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: messages-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "messages-service" of deployment "messages-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment messages-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 messages-service.yaml:4
────────────────────────────────────────
   4 [   name: messages-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container messages-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 messages-service.yaml:20-32
────────────────────────────────────────
  20 ┌       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 │         - containerPort: 8083
  24 │         imagePullPolicy: Never
  25 │         volumeMounts:
  26 │         - mountPath: /var/log
  27 │           name: log-pv-storage
  28 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment messages-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 messages-service.yaml:15-32
────────────────────────────────────────
  15 ┌       volumes:
  16 │       - name: log-pv-storage
  17 │         persistentVolumeClaim:
  18 │           claimName: log-pv-claim
  19 │       containers:
  20 │       - name: messages-service
  21 │         image: messages-service:latest
  22 │         ports:
  23 └         - containerPort: 8083
  ..   
────────────────────────────────────────



messages-service_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 messages-service_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: messages-service
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 8083
  11 └     targetPort: 8083
────────────────────────────────────────



messages-service_2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 messages-service_2.yaml:6-18
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: messages-service
  10 │   minReplicas: 1
  11 │   maxReplicas: 2
  12 │   metrics:
  13 │   - type: Resource
  14 └     resource:
  ..   
────────────────────────────────────────



messaging-service.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 messaging-service.yaml:6-12
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   ports:
   8 │   - port: 8082
   9 │     protocol: TCP
  10 │     name: http
  11 │   selector:
  12 └     app: messaging-service
────────────────────────────────────────



messaging-service_1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'messaging-service' of Deployment 'messaging-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'messaging-service' of Deployment 'messaging-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'messaging-service' of 'deployment' 'messaging-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'messaging-service' of Deployment 'messaging-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'messaging-service' of Deployment 'messaging-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'messaging-service' of Deployment 'messaging-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'messaging-service' of Deployment 'messaging-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'messaging-service' of Deployment 'messaging-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'messaging-service' of Deployment 'messaging-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'messaging-service' of Deployment 'messaging-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'messaging-service' of Deployment 'messaging-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'messaging-service' of Deployment 'messaging-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 messaging-service_1.yaml:6-43
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: messaging-service
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: messaging-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "messaging-service" of deployment "messaging-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment messaging-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 messaging-service_1.yaml:4
────────────────────────────────────────
   4 [   name: messaging-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container messaging-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment messaging-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 messaging-service_1.yaml:15-43
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container messaging-service in deployment messaging-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 messaging-service_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - image: dasha12678/messaging-service:latest
  17 │         name: messaging-service
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 8082
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────



messaging_app.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 messaging_app.yaml:6-12
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   ports:
   8 │   - port: 5173
   9 │     protocol: TCP
  10 │     name: http
  11 │   selector:
  12 └     app: messaging-app
────────────────────────────────────────



messaging_app_1.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'messaging-app' of Deployment 'messaging-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'messaging-app' of Deployment 'messaging-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'messaging-app' of 'deployment' 'messaging-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'messaging-app' of Deployment 'messaging-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'messaging-app' of Deployment 'messaging-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'messaging-app' of Deployment 'messaging-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'messaging-app' of Deployment 'messaging-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'messaging-app' of Deployment 'messaging-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'messaging-app' of Deployment 'messaging-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'messaging-app' of Deployment 'messaging-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'messaging-app' of Deployment 'messaging-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'messaging-app' of Deployment 'messaging-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 messaging_app_1.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: messaging-app
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: messaging-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "messaging-app" of deployment "messaging-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment messaging-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 messaging_app_1.yaml:4
────────────────────────────────────────
   4 [   name: messaging-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container messaging-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 messaging_app_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment messaging-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 messaging_app_1.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: messaging-app
  17 │         name: messaging-app
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 5173
  21 └       restartPolicy: Always
────────────────────────────────────────



messaging_app_2.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 messaging_app_2.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: messaging-app.com
   8 │     http:
   9 │       paths:
  10 │       - path: /
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: messaging-app
  ..   
────────────────────────────────────────



meta115.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'supabase-meta' of Deployment 'supabase-meta' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'supabase-meta' of Deployment 'supabase-meta' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'supabase-meta' of 'deployment' 'supabase-meta' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'supabase-meta' of Deployment 'supabase-meta' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'supabase-meta' of Deployment 'supabase-meta' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'supabase-meta' of Deployment 'supabase-meta' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'supabase-meta' of Deployment 'supabase-meta' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'supabase-meta' of Deployment 'supabase-meta' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'supabase-meta' of Deployment 'supabase-meta' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'supabase-meta' of Deployment 'supabase-meta' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'supabase-meta' of Deployment 'supabase-meta' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 meta115.yaml:6-35
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: supabase-meta
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: supabase-meta
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "supabase-meta" of deployment "supabase-meta" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment supabase-meta in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 meta115.yaml:4
────────────────────────────────────────
   4 [   name: supabase-meta
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container supabase-meta in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment supabase-meta in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 meta115.yaml:15-35
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 └         - name: PG_META_DB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container supabase-meta in deployment supabase-meta (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 meta115.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: supabase-meta
  17 │         image: supabase/postgres-meta:v0.83.2
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: PG_META_PORT
  22 │           value: '8080'
  23 │         - name: PG_META_DB_HOST
  24 └           value: supabase-postgres-service
  ..   
────────────────────────────────────────



meta115_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 meta115_1.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: supabase-meta
   8 │   ports:
   9 │   - protocol: TCP
  10 └     port: 8080
────────────────────────────────────────



metabase-deployment.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metabase' of Deployment 'metabase-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metabase' of 'deployment' 'metabase-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metabase' of Deployment 'metabase-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'metabase' of Deployment 'metabase-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metabase' of Deployment 'metabase-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metabase-deployment.yaml:6-34
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: metabase
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: metabase
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metabase" of deployment "metabase-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment metabase-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metabase-deployment.yaml:4
────────────────────────────────────────
   4 [   name: metabase-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container metabase-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metabase-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metabase-deployment.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 └           - name: MB_DB_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metabase in deployment metabase-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metabase-deployment.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: metabase
  17 │         image: metabase/metabase
  18 │         env:
  19 │           - name: MB_DB_TYPE
  20 │             value: "mysql"
  21 │           - name: MB_DB_DBNAME
  22 │             value: "hogwarts"
  23 │           - name: MB_DB_PORT
  24 └             value: "3306"
  ..   
────────────────────────────────────────



metabase-ingress.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metabase-ingress.yaml:6-15
────────────────────────────────────────
   6 ┌   rules:
   7 │   - http:
   8 │       paths:
   9 │       - path: /
  10 │         pathType: Prefix
  11 │         backend:
  12 │           service:
  13 │             name: metabase-service
  14 │             port:
  15 └               number: 80
────────────────────────────────────────



metabase-ingress1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metabase-ingress1.yaml:7-18
────────────────────────────────────────
   7 ┌   ingressClassName: nginx
   8 │   rules:
   9 │     - host: dataplatform.metabase.io
  10 │       http:
  11 │         paths:
  12 │           - path: /
  13 │             pathType: Prefix
  14 │             backend:
  15 └               service:
  ..   
────────────────────────────────────────



metabase-service.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metabase-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: metabase
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 80
  11 │       targetPort: 3000
  12 └   type: ClusterIP
────────────────────────────────────────



metabase.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metabase' of Deployment 'metabase-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metabase' of 'deployment' 'metabase-deployment' in 'metabase' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metabase' of Deployment 'metabase-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'metabase' of Deployment 'metabase-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metabase' of Deployment 'metabase-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metabase' of Deployment 'metabase-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metabase.yaml:9-22
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: metabase
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: metabase
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metabase" of deployment "metabase-deployment" in "metabase" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container metabase-deployment in metabase namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metabase-deployment in metabase namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metabase.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metabase in deployment metabase-deployment (namespace: metabase) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metabase.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: metabase
  20 │         image: metabase/metabase:latest
  21 │         ports:
  22 └         - containerPort: 3000
────────────────────────────────────────



metabase_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metabase_1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: metabase
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3000
  12 └     targetPort: 3000
────────────────────────────────────────



metadata-agent-rbac.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac1.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac10.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac10.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac11.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac11.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac13.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac13.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac14.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac14.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac15.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac15.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac16.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac16.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac17.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac17.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac18.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac18.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac2.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac3.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac3.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac4.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac4.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac5.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac5.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac6.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac6.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac7.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac7.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac8.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac8.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-agent-rbac9.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'stackdriver:metadata-agent' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 metadata-agent-rbac9.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - '*'
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 │   - watch
  15 │   - get
  16 └   - list
────────────────────────────────────────



metadata-deployment.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metadata' of Deployment 'metadata' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metadata' of Deployment 'metadata' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metadata' of 'deployment' 'metadata' in 'flixtube' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metadata' of Deployment 'metadata' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metadata' of Deployment 'metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metadata' of Deployment 'metadata' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metadata' of Deployment 'metadata' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata-deployment.yaml:7-44
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: metadata
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: metadata
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metadata" of deployment "metadata" in "flixtube" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container metadata in flixtube namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metadata in flixtube namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata-deployment.yaml:16-44
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 └         - name: PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metadata in deployment metadata (namespace: flixtube) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metadata-deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: metadata
  18 │         image: crazydanila/metadata:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: metadata-port
  22 │           containerPort: 4004
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4004'
  ..   
────────────────────────────────────────



metadata-deployment_1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata-deployment_1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: metadata
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 80
  12 └     targetPort: 4004
────────────────────────────────────────



metadata-editor-service.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata-editor-service.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: metadata-editor
   8 │   ports:
   9 │     - protocol: TCP
  10 └       port: 9000
────────────────────────────────────────



metadata-editor.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metadata-editor' of Deployment 'metadata-editor' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metadata-editor' of Deployment 'metadata-editor' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metadata-editor' of 'deployment' 'metadata-editor' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metadata-editor' of Deployment 'metadata-editor' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metadata-editor' of Deployment 'metadata-editor' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metadata-editor' of Deployment 'metadata-editor' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metadata-editor' of Deployment 'metadata-editor' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metadata-editor' of Deployment 'metadata-editor' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata-editor.yaml:8-59
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: metadata-editor
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: metadata-editor
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metadata-editor" of deployment "metadata-editor" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment metadata-editor in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metadata-editor.yaml:4-6
────────────────────────────────────────
   4 ┌   name: metadata-editor
   5 │   labels:
   6 └     app: metadata-editor
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container metadata-editor in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata-editor.yaml:18-52
────────────────────────────────────────
  18 ┌       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metadata-editor in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata-editor.yaml:17-59
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: metadata-editor
  19 │         image: eu.gcr.io/grid-301122/metadata-editor:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 └           mountPath: /etc/grid
  ..   
────────────────────────────────────────



metadata_claim.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata_claim.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 16Gi
────────────────────────────────────────



metadata_claim1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata_claim1.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 16Gi
────────────────────────────────────────



metadata_deployment.yaml (kubernetes)
=====================================
Tests: 146 (SUCCESSES: 97, FAILURES: 49)
Failures: 49 (UNKNOWN: 0, LOW: 32, MEDIUM: 10, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'vizier-metadata' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'vizier-metadata' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'vizier-metadata' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'etcd-wait' of 'deployment' 'vizier-metadata' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats-wait' of 'deployment' 'vizier-metadata' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'vizier-metadata' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'vizier-metadata' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'vizier-metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata_deployment.yaml:7-146
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       name: vizier-metadata
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: vizier-metadata
  15 └         plane: control
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "vizier-metadata" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "etcd-wait" of deployment "vizier-metadata" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats-wait" of deployment "vizier-metadata" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vizier-metadata in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metadata_deployment.yaml:5
────────────────────────────────────────
   5 [   name: vizier-metadata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-metadata in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata_deployment.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-metadata in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata_deployment.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-metadata in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata_deployment.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vizier-metadata in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata_deployment.yaml:20-146
────────────────────────────────────────
  20 ┌       serviceAccountName: metadata-service-account
  21 │       affinity:
  22 │         nodeAffinity:
  23 │           requiredDuringSchedulingIgnoredDuringExecution:
  24 │             nodeSelectorTerms:
  25 │             - matchExpressions:
  26 │               - key: kubernetes.io/os
  27 │                 operator: Exists
  28 └               - key: kubernetes.io/os
  ..   
────────────────────────────────────────



metadata_deployment1.yaml (kubernetes)
======================================
Tests: 146 (SUCCESSES: 97, FAILURES: 49)
Failures: 49 (UNKNOWN: 0, LOW: 32, MEDIUM: 10, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'vizier-metadata' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'vizier-metadata' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'vizier-metadata' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'etcd-wait' of 'deployment' 'vizier-metadata' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats-wait' of 'deployment' 'vizier-metadata' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'vizier-metadata' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'vizier-metadata' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'vizier-metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'vizier-metadata' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'etcd-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats-wait' of Deployment 'vizier-metadata' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata_deployment1.yaml:7-146
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       name: vizier-metadata
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: vizier-metadata
  15 └         plane: control
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "vizier-metadata" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "etcd-wait" of deployment "vizier-metadata" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats-wait" of deployment "vizier-metadata" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vizier-metadata in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metadata_deployment1.yaml:5
────────────────────────────────────────
   5 [   name: vizier-metadata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-metadata in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata_deployment1.yaml:85-125
────────────────────────────────────────
  85 ┌       - name: app
  86 │         image: vizier-metadata_server_image:latest
  87 │         env:
  88 │         - name: PL_JWT_SIGNING_KEY
  89 │           valueFrom:
  90 │             secretKeyRef:
  91 │               key: jwt-signing-key
  92 │               name: pl-cluster-secrets
  93 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-metadata in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata_deployment1.yaml:40-59
────────────────────────────────────────
  40 ┌       - name: nats-wait
  41 │         # yamllint disable-line rule:line-length
  42 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  43 │         # yamllint disable rule:indentation
  44 │         command: ['sh', '-c', 'set -xe;
  45 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  46 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  47 │             echo "waiting for ${URL}";
  48 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vizier-metadata in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata_deployment1.yaml:60-83
────────────────────────────────────────
  60 ┌       - name: etcd-wait
  61 │         # yamllint disable-line rule:line-length
  62 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  63 │         # yamllint disable rule:indentation rule:line-length
  64 │         command: ['sh', '-c', 'set -xe;
  65 │           ETCD_PATH="${PL_MD_ETCD_SERVER}";
  66 │           URL="${ETCD_PATH}${HEALTH_PATH}";
  67 │           until [ $(curl --cacert /certs/ca.crt --key /certs/client.key --cert /certs/client.crt -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  68 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vizier-metadata in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metadata_deployment1.yaml:20-146
────────────────────────────────────────
  20 ┌       serviceAccountName: metadata-service-account
  21 │       affinity:
  22 │         nodeAffinity:
  23 │           requiredDuringSchedulingIgnoredDuringExecution:
  24 │             nodeSelectorTerms:
  25 │             - matchExpressions:
  26 │               - key: kubernetes.io/os
  27 │                 operator: Exists
  28 └               - key: kubernetes.io/os
  ..   
────────────────────────────────────────



metadata_service.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata_service.yaml:7-14
────────────────────────────────────────
   7 ┌   type: ClusterIP
   8 │   ports:
   9 │   - name: tcp-http2
  10 │     port: 50400
  11 │     protocol: TCP
  12 │     targetPort: 50400
  13 │   selector:
  14 └     name: vizier-metadata
────────────────────────────────────────



metadata_service1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata_service1.yaml:7-14
────────────────────────────────────────
   7 ┌   type: ClusterIP
   8 │   ports:
   9 │   - name: tcp-http2
  10 │     port: 50400
  11 │     protocol: TCP
  12 │     targetPort: 50400
  13 │   selector:
  14 └     name: vizier-metadata
────────────────────────────────────────



metadata_statefulset.yaml (kubernetes)
======================================
Tests: 120 (SUCCESSES: 107, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'app' of StatefulSet 'vizier-metadata' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata_statefulset.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-wait' of StatefulSet 'vizier-metadata' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata_statefulset.yaml:43-69
────────────────────────────────────────
  43 ┌       - name: nats-wait
  44 │         # yamllint disable-line rule:line-length
  45 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  46 │         # yamllint disable rule:indentation
  47 │         command: ['sh', '-c', 'set -xe;
  48 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  49 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  50 │             echo "waiting for ${URL}";
  51 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of StatefulSet 'vizier-metadata' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metadata_statefulset.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of StatefulSet 'vizier-metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata_statefulset.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-wait' of StatefulSet 'vizier-metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata_statefulset.yaml:43-69
────────────────────────────────────────
  43 ┌       - name: nats-wait
  44 │         # yamllint disable-line rule:line-length
  45 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  46 │         # yamllint disable rule:indentation
  47 │         command: ['sh', '-c', 'set -xe;
  48 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  49 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  50 │             echo "waiting for ${URL}";
  51 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of StatefulSet 'vizier-metadata' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metadata_statefulset.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-wait' of StatefulSet 'vizier-metadata' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metadata_statefulset.yaml:43-69
────────────────────────────────────────
  43 ┌       - name: nats-wait
  44 │         # yamllint disable-line rule:line-length
  45 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  46 │         # yamllint disable rule:indentation
  47 │         command: ['sh', '-c', 'set -xe;
  48 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  49 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  50 │             echo "waiting for ${URL}";
  51 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of StatefulSet 'vizier-metadata' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metadata_statefulset.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-wait' of StatefulSet 'vizier-metadata' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metadata_statefulset.yaml:43-69
────────────────────────────────────────
  43 ┌       - name: nats-wait
  44 │         # yamllint disable-line rule:line-length
  45 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  46 │         # yamllint disable rule:indentation
  47 │         command: ['sh', '-c', 'set -xe;
  48 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  49 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  50 │             echo "waiting for ${URL}";
  51 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of StatefulSet 'vizier-metadata' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metadata_statefulset.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-wait' of StatefulSet 'vizier-metadata' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metadata_statefulset.yaml:43-69
────────────────────────────────────────
  43 ┌       - name: nats-wait
  44 │         # yamllint disable-line rule:line-length
  45 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  46 │         # yamllint disable rule:indentation
  47 │         command: ['sh', '-c', 'set -xe;
  48 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  49 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  50 │             echo "waiting for ${URL}";
  51 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata_statefulset.yaml:7-149
────────────────────────────────────────
   7 ┌   serviceName: vizier-metadata
   8 │   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       name: vizier-metadata
  12 │   updateStrategy:
  13 │     type: RollingUpdate
  14 │   template:
  15 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset vizier-metadata in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metadata_statefulset.yaml:5
────────────────────────────────────────
   5 [   name: vizier-metadata
────────────────────────────────────────



metadata_statefulset1.yaml (kubernetes)
=======================================
Tests: 120 (SUCCESSES: 107, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 1, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'app' of StatefulSet 'vizier-metadata' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata_statefulset1.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-wait' of StatefulSet 'vizier-metadata' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metadata_statefulset1.yaml:43-69
────────────────────────────────────────
  43 ┌       - name: nats-wait
  44 │         # yamllint disable-line rule:line-length
  45 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  46 │         # yamllint disable rule:indentation
  47 │         command: ['sh', '-c', 'set -xe;
  48 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  49 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  50 │             echo "waiting for ${URL}";
  51 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of StatefulSet 'vizier-metadata' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metadata_statefulset1.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of StatefulSet 'vizier-metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata_statefulset1.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-wait' of StatefulSet 'vizier-metadata' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metadata_statefulset1.yaml:43-69
────────────────────────────────────────
  43 ┌       - name: nats-wait
  44 │         # yamllint disable-line rule:line-length
  45 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  46 │         # yamllint disable rule:indentation
  47 │         command: ['sh', '-c', 'set -xe;
  48 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  49 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  50 │             echo "waiting for ${URL}";
  51 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of StatefulSet 'vizier-metadata' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metadata_statefulset1.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-wait' of StatefulSet 'vizier-metadata' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metadata_statefulset1.yaml:43-69
────────────────────────────────────────
  43 ┌       - name: nats-wait
  44 │         # yamllint disable-line rule:line-length
  45 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  46 │         # yamllint disable rule:indentation
  47 │         command: ['sh', '-c', 'set -xe;
  48 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  49 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  50 │             echo "waiting for ${URL}";
  51 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of StatefulSet 'vizier-metadata' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metadata_statefulset1.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-wait' of StatefulSet 'vizier-metadata' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metadata_statefulset1.yaml:43-69
────────────────────────────────────────
  43 ┌       - name: nats-wait
  44 │         # yamllint disable-line rule:line-length
  45 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  46 │         # yamllint disable rule:indentation
  47 │         command: ['sh', '-c', 'set -xe;
  48 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  49 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  50 │             echo "waiting for ${URL}";
  51 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of StatefulSet 'vizier-metadata' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metadata_statefulset1.yaml:71-118
────────────────────────────────────────
  71 ┌       - name: app
  72 │         image: vizier-metadata_server_image:latest
  73 │         env:
  74 │         - name: PL_JWT_SIGNING_KEY
  75 │           valueFrom:
  76 │             secretKeyRef:
  77 │               key: jwt-signing-key
  78 │               name: pl-cluster-secrets
  79 └         - name: PL_POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-wait' of StatefulSet 'vizier-metadata' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metadata_statefulset1.yaml:43-69
────────────────────────────────────────
  43 ┌       - name: nats-wait
  44 │         # yamllint disable-line rule:line-length
  45 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  46 │         # yamllint disable rule:indentation
  47 │         command: ['sh', '-c', 'set -xe;
  48 │           URL="${PROTOCOL}://${SERVICE_NAME}:${SERVICE_PORT}${HEALTH_PATH}";
  49 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" -k ${URL}) -eq 200 ]; do
  50 │             echo "waiting for ${URL}";
  51 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metadata_statefulset1.yaml:7-149
────────────────────────────────────────
   7 ┌   serviceName: vizier-metadata
   8 │   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       name: vizier-metadata
  12 │   updateStrategy:
  13 │     type: RollingUpdate
  14 │   template:
  15 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset vizier-metadata in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metadata_statefulset1.yaml:5
────────────────────────────────────────
   5 [   name: vizier-metadata
────────────────────────────────────────



metallb-native-v0.14.8_10.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native-v0.14.8_10.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native-v0.14.8_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb-native-v0.14.8_11.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native-v0.14.8_11.yaml:16-23
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - secrets
  20 │   verbs:
  21 │   - get
  22 │   - list
  23 └   - watch
────────────────────────────────────────



metallb-native-v0.14.8_12.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb-native-v0.14.8_12.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb-native-v0.14.8_20.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native-v0.14.8_20.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb-native-v0.14.8_21.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native-v0.14.8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native-v0.14.8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native-v0.14.8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native-v0.14.8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native-v0.14.8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native-v0.14.8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native-v0.14.8_21.yaml:10-82
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native-v0.14.8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native-v0.14.8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb-native-v0.14.8_22.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:10-111
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:10-111
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:79-82
────────────────────────────────────────
  79 ┌             add:
  80 │             - NET_RAW
  81 │             drop:
  82 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:23-111
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native-v0.14.8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────



metallb-native.0.14.3_10.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native.0.14.3_10.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────



metallb-native.0.14.3_11.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb-native.0.14.3_11.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb-native.0.14.3_19.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native.0.14.3_19.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb-native.0.14.3_20.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native.0.14.3_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native.0.14.3_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native.0.14.3_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native.0.14.3_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native.0.14.3_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native.0.14.3_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native.0.14.3_20.yaml:10-82
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native.0.14.3_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native.0.14.3_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb-native.0.14.3_21.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:75-78
────────────────────────────────────────
  75 ┌             add:
  76 │             - NET_RAW
  77 │             drop:
  78 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:23-107
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native.0.14.3_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metallb-native.0.14.3_9.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native.0.14.3_9.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native.0.14.3_9.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb-native1_10.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native1_10.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native1_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb-native1_11.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native1_11.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────



metallb-native1_12.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb-native1_12.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb-native1_20.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native1_20.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb-native1_21.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native1_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native1_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native1_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native1_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native1_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native1_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native1_21.yaml:10-81
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native1_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native1_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────



metallb-native1_22.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb-native1_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native1_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-native1_22.yaml:75-78
────────────────────────────────────────
  75 ┌             add:
  76 │             - NET_RAW
  77 │             drop:
  78 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-native1_22.yaml:23-107
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native1_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metallb-native2_10.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native2_10.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────



metallb-native2_11.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb-native2_11.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb-native2_19.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native2_19.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb-native2_20.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native2_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native2_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native2_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native2_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native2_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native2_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native2_20.yaml:10-82
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native2_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native2_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb-native2_21.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb-native2_21.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native2_21.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-native2_21.yaml:75-78
────────────────────────────────────────
  75 ┌             add:
  76 │             - NET_RAW
  77 │             drop:
  78 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-native2_21.yaml:23-107
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native2_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metallb-native2_9.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native2_9.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native2_9.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb-native3_10.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native3_10.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────



metallb-native3_11.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb-native3_11.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb-native3_19.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native3_19.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb-native3_20.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native3_20.yaml:25-77
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native3_20.yaml:25-77
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native3_20.yaml:25-77
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native3_20.yaml:25-77
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native3_20.yaml:25-77
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native3_20.yaml:25-77
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native3_20.yaml:10-90
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native3_20.yaml:25-77
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb-native3_21.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb-native3_21.yaml:10-116
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native3_21.yaml:24-95
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-native3_21.yaml:24-95
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native3_21.yaml:24-95
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native3_21.yaml:24-95
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native3_21.yaml:24-95
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-native3_21.yaml:24-95
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native3_21.yaml:24-95
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb-native3_21.yaml:24-95
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native3_21.yaml:24-95
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native3_21.yaml:10-116
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native3_21.yaml:24-95
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-native3_21.yaml:84-87
────────────────────────────────────────
  84 ┌             add:
  85 │             - NET_RAW
  86 │             drop:
  87 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-native3_21.yaml:23-116
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────



metallb-native3_9.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native3_9.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native3_9.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb-native4_10.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native4_10.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native4_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb-native4_11.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native4_11.yaml:16-23
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - secrets
  20 │   verbs:
  21 │   - get
  22 │   - list
  23 └   - watch
────────────────────────────────────────



metallb-native4_12.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb-native4_12.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb-native4_20.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native4_20.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb-native4_21.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native4_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native4_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native4_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native4_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native4_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native4_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native4_21.yaml:10-82
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native4_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native4_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb-native4_22.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb-native4_22.yaml:10-111
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native4_22.yaml:10-111
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-native4_22.yaml:79-82
────────────────────────────────────────
  79 ┌             add:
  80 │             - NET_RAW
  81 │             drop:
  82 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-native4_22.yaml:23-111
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native4_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────



metallb-native6_10.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native6_10.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native6_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb-native6_11.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native6_11.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────



metallb-native6_12.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb-native6_12.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb-native6_20.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native6_20.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb-native6_21.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native6_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native6_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native6_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native6_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native6_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native6_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native6_21.yaml:10-82
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native6_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native6_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb-native6_22.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb-native6_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native6_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-native6_22.yaml:75-78
────────────────────────────────────────
  75 ┌             add:
  76 │             - NET_RAW
  77 │             drop:
  78 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-native6_22.yaml:23-107
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native6_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metallb-native8_10.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native8_10.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native8_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb-native8_11.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native8_11.yaml:16-23
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - secrets
  20 │   verbs:
  21 │   - get
  22 │   - list
  23 └   - watch
────────────────────────────────────────



metallb-native8_12.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb-native8_12.yaml:44-57
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   verbs:
  51 │   - create
  52 └   - delete
  ..   
────────────────────────────────────────



metallb-native8_20.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native8_20.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb-native8_21.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native8_21.yaml:10-82
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native8_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb-native8_22.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb-native8_22.yaml:10-111
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native8_22.yaml:10-111
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-native8_22.yaml:79-82
────────────────────────────────────────
  79 ┌             add:
  80 │             - NET_RAW
  81 │             drop:
  82 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-native8_22.yaml:23-111
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native8_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────



metallb-native_10.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native_10.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb-native_11.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb-native_11.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────



metallb-native_12.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb-native_12.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb-native_20.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native_20.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb-native_21.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native_21.yaml:10-81
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────



metallb-native_22.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb-native_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-native_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-native_22.yaml:75-78
────────────────────────────────────────
  75 ┌             add:
  76 │             - NET_RAW
  77 │             drop:
  78 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-native_22.yaml:23-107
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-native_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metallb-nginx.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-nginx.yaml:7-13
────────────────────────────────────────
   7 ┌   type: LoadBalancer
   8 │   selector:
   9 │     app: webui
  10 │   ports:
  11 │   - protocol: TCP
  12 │     port: 80
  13 └     targetPort: 80
────────────────────────────────────────



metallb-nginx_1.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Deployment 'webui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Deployment 'webui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'deployment' 'webui' in 'metallb-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Deployment 'webui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Deployment 'webui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Deployment 'webui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Deployment 'webui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Deployment 'webui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Deployment 'webui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Deployment 'webui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Deployment 'webui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-nginx_1.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   selector:
   9 │     matchLabels:
  10 │       app: webui
  11 │   template:
  12 │     metadata:
  13 │       name: nginx-pod
  14 │       labels:
  15 └         app: webui
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of deployment "webui" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment webui in metallb-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webui in metallb-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-nginx_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webui in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-nginx_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx-container
  19 │         image: nginx:1.14
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



metallb-patch.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb-patch.yaml:11-113
────────────────────────────────────────
  11 ┌   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: speaker
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 │         prometheus.io/port: "7472"
  19 └         prometheus.io/scrape: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb-patch.yaml:11-113
────────────────────────────────────────
  11 ┌   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: speaker
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 │         prometheus.io/port: "7472"
  19 └         prometheus.io/scrape: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb-patch.yaml:80-83
────────────────────────────────────────
  80 ┌             add:
  81 │             - NET_RAW
  82 │             drop:
  83 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb-patch.yaml:24-113
────────────────────────────────────────
  24 ┌       containers:
  25 │       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────
 metallb-patch.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb-patch.yaml:25-91
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 │               fieldPath: spec.nodeName
  33 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────



metallb11_15.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb11_15.yaml:10-92
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb11_15.yaml:10-92
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb11_15.yaml:79-82
────────────────────────────────────────
  79 ┌             add:
  80 │             - NET_RAW
  81 │             drop:
  82 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb11_15.yaml:23-92
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb11_15.yaml:24-83
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_NODE_NAME
  30 │           valueFrom:
  31 │             fieldRef:
  32 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────



metallb11_16.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb11_16.yaml:25-62
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         - --log-level=info
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb11_16.yaml:25-62
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         - --log-level=info
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb11_16.yaml:25-62
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         - --log-level=info
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb11_16.yaml:25-62
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         - --log-level=info
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb11_16.yaml:25-62
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         - --log-level=info
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb11_16.yaml:25-62
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         - --log-level=info
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb11_16.yaml:10-70
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb11_16.yaml:25-62
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         - --log-level=info
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb11_16.yaml:25-62
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         - --log-level=info
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb11_9.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb11_9.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb11_9.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   resourceNames:
  20 │   - memberlist
  21 │   verbs:
  22 └   - list
────────────────────────────────────────



metallb13_10.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb13_10.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb13_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb13_11.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb13_11.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────



metallb13_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb13_12.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb13_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb13_20.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb13_21.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb13_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb13_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb13_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb13_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb13_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb13_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb13_21.yaml:10-81
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb13_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb13_21.yaml:25-68
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.13.12
  ..   
────────────────────────────────────────



metallb13_22.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb13_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb13_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb13_22.yaml:75-78
────────────────────────────────────────
  75 ┌             add:
  76 │             - NET_RAW
  77 │             drop:
  78 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb13_22.yaml:23-107
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb13_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metallb24_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb24_10.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────



metallb24_11.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb24_11.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb24_19.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb24_19.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb24_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb24_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb24_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb24_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb24_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb24_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb24_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb24_20.yaml:10-82
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb24_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb24_20.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb24_21.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb24_21.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb24_21.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb24_21.yaml:75-78
────────────────────────────────────────
  75 ┌             add:
  76 │             - NET_RAW
  77 │             drop:
  78 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb24_21.yaml:23-107
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb24_21.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metallb24_9.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb24_9.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb24_9.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb28_14.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb28_14.yaml:10-73
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb28_14.yaml:10-73
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb28_14.yaml:60-63
────────────────────────────────────────
  60 ┌             add:
  61 │             - NET_RAW
  62 │             drop:
  63 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb28_14.yaml:23-73
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb28_14.yaml:24-64
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metallb28_15.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb28_15.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.10.3
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb28_15.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.10.3
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb28_15.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.10.3
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb28_15.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.10.3
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb28_15.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.10.3
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb28_15.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.10.3
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb28_15.yaml:10-51
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb28_15.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.10.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb28_15.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         env:
  29 │         - name: METALLB_ML_SECRET_NAME
  30 │           value: memberlist
  31 │         - name: METALLB_DEPLOYMENT
  32 │           value: controller
  33 └         image: quay.io/metallb/controller:v0.10.3
  ..   
────────────────────────────────────────



metallb28_8.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb28_8.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb28_8.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   resourceNames:
  20 │   - memberlist
  21 │   verbs:
  22 └   - list
────────────────────────────────────────



metallb36_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0005 (HIGH): Container 'speaker' of DaemonSet 'speaker' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
────────────────────────────────────────
 metallb36_12.yaml:24-70
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb36_12.yaml:10-78
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb36_12.yaml:24-70
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb36_12.yaml:24-70
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb36_12.yaml:24-70
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb36_12.yaml:24-70
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb36_12.yaml:24-70
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb36_12.yaml:24-70
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb36_12.yaml:24-70
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb36_12.yaml:10-78
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb36_12.yaml:24-70
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb36_12.yaml:64-69
────────────────────────────────────────
  64 ┌             add:
  65 │             - NET_ADMIN
  66 │             - NET_RAW
  67 │             - SYS_ADMIN
  68 │             drop:
  69 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb36_12.yaml:23-78
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb36_12.yaml:24-70
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --config=config
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metallb36_13.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb36_13.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.9.6
  29 │         imagePullPolicy: Always
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb36_13.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.9.6
  29 │         imagePullPolicy: Always
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb36_13.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.9.6
  29 │         imagePullPolicy: Always
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb36_13.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.9.6
  29 │         imagePullPolicy: Always
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb36_13.yaml:10-50
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb36_13.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.9.6
  29 │         imagePullPolicy: Always
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb36_13.yaml:25-43
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --config=config
  28 │         image: metallb/controller:v0.9.6
  29 │         imagePullPolicy: Always
  30 │         name: controller
  31 │         ports:
  32 │         - containerPort: 7472
  33 └           name: monitoring
  ..   
────────────────────────────────────────



metallb36_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'metallb-system:controller' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 metallb36_4.yaml:8-16
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - services
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 │   - watch
  16 └   - update
────────────────────────────────────────



metallb38_10.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb38_10.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb38_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb38_11.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb38_11.yaml:16-23
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - secrets
  20 │   verbs:
  21 │   - get
  22 │   - list
  23 └   - watch
────────────────────────────────────────



metallb38_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb38_12.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb38_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb38_20.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb38_21.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb38_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb38_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb38_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb38_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb38_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb38_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb38_21.yaml:10-82
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb38_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb38_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb38_22.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb38_22.yaml:10-111
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb38_22.yaml:10-111
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb38_22.yaml:79-82
────────────────────────────────────────
  79 ┌             add:
  80 │             - NET_RAW
  81 │             drop:
  82 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb38_22.yaml:23-111
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb38_22.yaml:24-90
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_POD_NAME
  ..   
────────────────────────────────────────



metallb44_10.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb44_10.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb44_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb44_11.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb44_11.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────



metallb44_12.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb44_12.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb44_20.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb44_20.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb44_21.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb44_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb44_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb44_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb44_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb44_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb44_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb44_21.yaml:10-82
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb44_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb44_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb44_22.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb44_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb44_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb44_22.yaml:75-78
────────────────────────────────────────
  75 ┌             add:
  76 │             - NET_RAW
  77 │             drop:
  78 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb44_22.yaml:23-107
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb44_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metallb9_10.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb9_10.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'controller' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb9_10.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resourceNames:
  24 │   - memberlist
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - list
────────────────────────────────────────



metallb9_11.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pod-lister' shouldn't have access to manage secrets in namespace 'metallb-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 metallb9_11.yaml:15-22
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 │   - list
  22 └   - watch
────────────────────────────────────────



metallb9_12.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'metallb-system:controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 metallb9_12.yaml:44-58
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - admissionregistration.k8s.io
  46 │   resourceNames:
  47 │   - metallb-webhook-configuration
  48 │   resources:
  49 │   - validatingwebhookconfigurations
  50 │   - mutatingwebhookconfigurations
  51 │   verbs:
  52 └   - create
  ..   
────────────────────────────────────────



metallb9_20.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb9_20.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 9443
  10 │   selector:
  11 └     component: controller
────────────────────────────────────────



metallb9_21.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb9_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb9_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb9_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb9_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb9_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb9_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb9_21.yaml:10-82
────────────────────────────────────────
  10 ┌   revisionHistoryLimit: 3
  11 │   selector:
  12 │     matchLabels:
  13 │       app: metallb
  14 │       component: controller
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 └         prometheus.io/port: '7472'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "controller" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb9_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment controller (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb9_21.yaml:25-69
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --port=7472
  27 │         - --log-level=info
  28 │         - --tls-min-version=VersionTLS12
  29 │         env:
  30 │         - name: METALLB_ML_SECRET_NAME
  31 │           value: memberlist
  32 │         - name: METALLB_DEPLOYMENT
  33 └           value: controller
  ..   
────────────────────────────────────────



metallb9_22.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): DaemonSet 'speaker' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metallb9_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'speaker' of DaemonSet 'speaker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'speaker' of DaemonSet 'speaker' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metallb9_22.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: metallb
  13 │       component: speaker
  14 │   template:
  15 │     metadata:
  16 │       annotations:
  17 │         prometheus.io/port: '7472'
  18 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "speaker" of daemonset "speaker" in "metallb-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metallb9_22.yaml:75-78
────────────────────────────────────────
  75 ┌             add:
  76 │             - NET_RAW
  77 │             drop:
  78 └             - ALL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset speaker in metallb-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metallb9_22.yaml:23-107
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container speaker of daemonset speaker in metallb-system namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container speaker in daemonset speaker (namespace: metallb-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metallb9_22.yaml:24-86
────────────────────────────────────────
  24 ┌       - args:
  25 │         - --port=7472
  26 │         - --log-level=info
  27 │         env:
  28 │         - name: METALLB_NODE_NAME
  29 │           valueFrom:
  30 │             fieldRef:
  31 │               fieldPath: spec.nodeName
  32 └         - name: METALLB_HOST
  ..   
────────────────────────────────────────



metaprotocol-sample.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'dubbo-resolve-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"dubbo-resolve.properties"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



metaprotocol-sample_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dubbo-sample-provider' of 'deployment' 'dubbo-sample-provider-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metaprotocol-sample_1.yaml:8-35
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: dubbo-sample-provider
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       annotations:
  15 │         sidecar.istio.io/bootstrapOverride: aeraki-bootstrap-config
  16 └         sidecar.istio.io/proxyImage: ghcr.io/aeraki-mesh/meta-protocol-proxy:1.4.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dubbo-sample-provider" of deployment "dubbo-sample-provider-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment dubbo-sample-provider-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metaprotocol-sample_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: dubbo-sample-provider-v1
   5 │   labels:
   6 └     app: dubbo-sample-provider
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dubbo-sample-provider-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dubbo-sample-provider-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metaprotocol-sample_1.yaml:22-35
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 └           subPath: dubbo-resolve.properties
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dubbo-sample-provider in deployment dubbo-sample-provider-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metaprotocol-sample_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────



metaprotocol-sample_2.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dubbo-sample-provider' of 'deployment' 'dubbo-sample-provider-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dubbo-sample-provider' of Deployment 'dubbo-sample-provider-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metaprotocol-sample_2.yaml:8-35
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: dubbo-sample-provider
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       annotations:
  15 │         sidecar.istio.io/bootstrapOverride: aeraki-bootstrap-config
  16 └         sidecar.istio.io/proxyImage: ghcr.io/aeraki-mesh/meta-protocol-proxy:1.4.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dubbo-sample-provider" of deployment "dubbo-sample-provider-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment dubbo-sample-provider-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metaprotocol-sample_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: dubbo-sample-provider-v2
   5 │   labels:
   6 └     app: dubbo-sample-provider
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dubbo-sample-provider-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dubbo-sample-provider-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metaprotocol-sample_2.yaml:22-35
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 └           subPath: dubbo-resolve.properties
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dubbo-sample-provider in deployment dubbo-sample-provider-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metaprotocol-sample_2.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────



metaprotocol-sample_3.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dubbo-sample-second-provider' of 'deployment' 'dubbo-sample-second-provider' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dubbo-sample-second-provider' of Deployment 'dubbo-sample-second-provider' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metaprotocol-sample_3.yaml:8-35
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: dubbo-sample-second-provider
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       annotations:
  15 │         sidecar.istio.io/bootstrapOverride: aeraki-bootstrap-config
  16 └         sidecar.istio.io/proxyImage: ghcr.io/aeraki-mesh/meta-protocol-proxy:1.4.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dubbo-sample-second-provider" of deployment "dubbo-sample-second-provider" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment dubbo-sample-second-provider in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metaprotocol-sample_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: dubbo-sample-second-provider
   5 │   labels:
   6 └     app: dubbo-sample-second-provider
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dubbo-sample-second-provider in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dubbo-sample-second-provider in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metaprotocol-sample_3.yaml:22-35
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 └           subPath: dubbo-resolve.properties
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dubbo-sample-second-provider in deployment dubbo-sample-second-provider (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metaprotocol-sample_3.yaml:23-31
────────────────────────────────────────
  23 ┌       - name: dubbo-sample-second-provider
  24 │         image: ghcr.io/aeraki-mesh/dubbo-sample-second-provider
  25 │         ports:
  26 │         - containerPort: 20880
  27 │         volumeMounts:
  28 │         - name: dubbo-resolve-config
  29 │           mountPath: /dubbo-resolve.properties
  30 │           subPath: dubbo-resolve.properties
  31 └           readOnly: true
────────────────────────────────────────



metaprotocol-sample_4.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dubbo-sample-consumer' of 'deployment' 'dubbo-sample-consumer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dubbo-sample-consumer' of Deployment 'dubbo-sample-consumer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metaprotocol-sample_4.yaml:8-33
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: dubbo-sample-consumer
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       annotations:
  15 │         sidecar.istio.io/bootstrapOverride: aeraki-bootstrap-config
  16 └         sidecar.istio.io/proxyImage: ghcr.io/aeraki-mesh/meta-protocol-proxy:1.4.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dubbo-sample-consumer" of deployment "dubbo-sample-consumer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment dubbo-sample-consumer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 metaprotocol-sample_4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: dubbo-sample-consumer
   5 │   labels:
   6 └     app: dubbo-sample-consumer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dubbo-sample-consumer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dubbo-sample-consumer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metaprotocol-sample_4.yaml:20-33
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 └           subPath: dubbo-resolve.properties
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dubbo-sample-consumer in deployment dubbo-sample-consumer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metaprotocol-sample_4.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: dubbo-sample-consumer
  22 │         image: ghcr.io/aeraki-mesh/dubbo-sample-consumer
  23 │         ports:
  24 │         - containerPort: 9009
  25 │         volumeMounts:
  26 │         - name: dubbo-resolve-config
  27 │           mountPath: /dubbo-resolve.properties
  28 │           subPath: dubbo-resolve.properties
  29 └           readOnly: true
────────────────────────────────────────



metis.yaml (kubernetes)
=======================
Tests: 116 (SUCCESSES: 95, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 11, MEDIUM: 7, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metis-container' of Deployment 'metis-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metis-container' of Deployment 'metis-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metis-container' of 'deployment' 'metis-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metis-container' of Deployment 'metis-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metis-container' of Deployment 'metis-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'metis-container' of Deployment 'metis-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metis-container' of Deployment 'metis-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metis-container' of Deployment 'metis-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metis-container' of Deployment 'metis-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metis-container' of Deployment 'metis-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metis-container' of Deployment 'metis-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metis-container' of Deployment 'metis-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metis-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metis.yaml:7-34
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: metis
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: metis
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metis.yaml:7-34
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: metis
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: metis
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metis-container" of deployment "metis-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment metis-deployment in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container metis-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metis-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metis.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 │         - containerPort: 80
  22 │       tolerations:
  23 │       - key: node-role.kubernetes.io/control-plane
  24 └         operator: Exists
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metis-container in deployment metis-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metis.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: metis-container
  18 │         image: jongbeomlee/metis-api:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



metis_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metis-api-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metis_1.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: metis
   9 │   clusterIP: None
  10 │   ports:
  11 │   - protocol: TCP
  12 │     port: 80
  13 └     targetPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metis_1.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: metis
   9 │   clusterIP: None
  10 │   ports:
  11 │   - protocol: TCP
  12 │     port: 80
  13 └     targetPort: 80
────────────────────────────────────────



metric-server12_6.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server12_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server12_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server12_7.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server12_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server12_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server12_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server12_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server12_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server12_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server12_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server12_7.yaml:9-78
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: metrics-server
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server12_7.yaml:9-78
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: metrics-server
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server12_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server12_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server12_7.yaml:21-78
────────────────────────────────────────
  21 ┌       affinity:
  22 │         podAntiAffinity:
  23 │           requiredDuringSchedulingIgnoredDuringExecution:
  24 │           - labelSelector:
  25 │               matchLabels:
  26 │                 k8s-app: metrics-server
  27 │             namespaces:
  28 │             - kube-system
  29 └             topologyKey: kubernetes.io/hostname
  ..   
────────────────────────────────────────



metric-server12_9.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server12_9.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server13_6.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server13_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server13_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server13_7.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server13_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server13_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server13_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 └         - /metrics-server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric-server13_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────



metric-server13_8.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server13_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server15_6.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server15_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server15_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server15_7.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server15_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server15_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server15_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metric-server15_8.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server15_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server16_6.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server16_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server16_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server16_7.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metric-server16_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server16_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server16_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server16_7.yaml:20-70
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric-server16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metric-server16_8.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server16_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server17_6.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server17_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server17_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server17_7.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server17_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server17_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server17_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server17_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server17_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server17_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server17_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server17_7.yaml:9-78
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: metrics-server
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server17_7.yaml:9-78
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: metrics-server
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server17_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server17_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server17_7.yaml:21-78
────────────────────────────────────────
  21 ┌       affinity:
  22 │         podAntiAffinity:
  23 │           requiredDuringSchedulingIgnoredDuringExecution:
  24 │           - labelSelector:
  25 │               matchLabels:
  26 │                 k8s-app: metrics-server
  27 │             namespaces:
  28 │             - kube-system
  29 └             topologyKey: kubernetes.io/hostname
  ..   
────────────────────────────────────────



metric-server17_9.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server17_9.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server18_6.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server18_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server18_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server18_7.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server18_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server18_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server18_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metric-server18_8.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server18_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server19_6.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server19_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server19_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server19_7.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metric-server19_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server19_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server19_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server19_7.yaml:20-70
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric-server19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metric-server19_8.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server19_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server1_6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server1_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server1_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server1_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server1_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server1_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server1_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 └         - /metrics-server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric-server1_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────



metric-server1_8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server1_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server2_6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server2_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server2_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server2_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server2_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server2_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server2_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric-server2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metric-server2_8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server2_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server3_6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server3_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server3_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server3_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server3_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server3_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server3_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 └         - /metrics-server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric-server3_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         command:
  28 │         - /metrics-server
  29 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────



metric-server3_8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server3_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server4_6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server4_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server4_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server4_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server4_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server4_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server4_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metric-server4_8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server4_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server5_6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server5_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server5_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server5_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server5_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server5_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server5_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metric-server5_8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server5_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server6_6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server6_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server6_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server6_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server6_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server6_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server6_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server6_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server6_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server6_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server6_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server6_7.yaml:9-78
────────────────────────────────────────
   9 ┌   replicas: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: metrics-server
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server6_7.yaml:9-78
────────────────────────────────────────
   9 ┌   replicas: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       k8s-app: metrics-server
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   template:
  17 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server6_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server6_7.yaml:31-71
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --cert-dir=/tmp
  33 │         - --secure-port=4443
  34 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  35 │         - --kubelet-use-node-status-port
  36 │         - --metric-resolution=15s
  37 │         - --kubelet-insecure-tls=true
  38 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.0
  39 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server6_7.yaml:21-78
────────────────────────────────────────
  21 ┌       affinity:
  22 │         podAntiAffinity:
  23 │           requiredDuringSchedulingIgnoredDuringExecution:
  24 │           - labelSelector:
  25 │               matchLabels:
  26 │                 k8s-app: metrics-server
  27 │             namespaces:
  28 │             - kube-system
  29 └             topologyKey: kubernetes.io/hostname
  ..   
────────────────────────────────────────



metric-server6_9.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server6_9.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server7_6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server7_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server7_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server7_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server7_7.yaml:21-68
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server7_7.yaml:21-68
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server7_7.yaml:9-75
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server7_7.yaml:9-75
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server7_7.yaml:20-75
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric-server7_7.yaml:21-68
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



metric-server7_8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server7_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server8_6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server8_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server8_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server8_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server8_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server8_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server8_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server8_7.yaml:20-61
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metric-server8_8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server8_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server9_6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server9_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server9_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server9_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server9_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server9_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server9_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



metric-server9_8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server9_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-server_6.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-server_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metric-server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metric-server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metric-server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-server_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metric-server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metric-server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-server_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric-server_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



metric-server_8.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-server_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-service_6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-service_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-service_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-service_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-service_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-service_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-service_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-service_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-service_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-service_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-service_7.yaml:20-72
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric-service_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



metric-service_8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-service_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric-test_6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-test_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-test_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric-test_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric-test_7.yaml:21-64
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --metric-resolution=15s
  26 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric-test_7.yaml:21-64
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --metric-resolution=15s
  26 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric-test_7.yaml:21-64
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --metric-resolution=15s
  26 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric-test_7.yaml:21-64
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --metric-resolution=15s
  26 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric-test_7.yaml:9-71
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-test_7.yaml:9-71
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric-test_7.yaml:20-71
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --metric-resolution=15s
  26 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric-test_7.yaml:21-64
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --metric-resolution=15s
  26 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         livenessProbe:
  29 └           failureThreshold: 3
  ..   
────────────────────────────────────────



metric-test_8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric-test_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metric1_6.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric1_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric1_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



metric1_7.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metric1_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 metric1_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metric1_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metric1_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metric1_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric1_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metric1_7.yaml:20-72
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metric1_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



metric1_8.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metric1_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



metricbeat-ds1_3.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"  username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



metricbeat-ds1_5.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'daemonset' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0006 (HIGH): DaemonSet 'metricbeat' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'
════════════════════════════════════════
Mounting docker.sock from the host can give the container full root access to the host.

See https://avd.aquasec.com/misconfig/ksv006
────────────────────────────────────────
 metricbeat-ds1_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'metricbeat' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metricbeat-ds1_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'metricbeat' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 metricbeat-ds1_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat-ds1_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-ds1_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of daemonset "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-ds1_5.yaml:47
────────────────────────────────────────
  47 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-ds1_5.yaml:17-89
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       terminationGracePeriodSeconds: 30
  19 │       hostNetwork: true
  20 │       dnsPolicy: ClusterFirstWithHostNet
  21 │       containers:
  22 │       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset metricbeat in kube-system namespace shouldn't have volumes set to {"/proc"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 metricbeat-ds1_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in daemonset metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-ds1_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────



metricbeat-ds1_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'deployment' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat-ds1_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-ds1_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of deployment "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-ds1_7.yaml:43
────────────────────────────────────────
  43 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-ds1_7.yaml:17-66
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       containers:
  19 │       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in deployment metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-ds1_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────



metricbeat-ds2_3.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"  username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



metricbeat-ds2_5.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'daemonset' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0006 (HIGH): DaemonSet 'metricbeat' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'
════════════════════════════════════════
Mounting docker.sock from the host can give the container full root access to the host.

See https://avd.aquasec.com/misconfig/ksv006
────────────────────────────────────────
 metricbeat-ds2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'metricbeat' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metricbeat-ds2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'metricbeat' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 metricbeat-ds2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat-ds2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-ds2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of daemonset "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-ds2_5.yaml:47
────────────────────────────────────────
  47 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-ds2_5.yaml:17-89
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       terminationGracePeriodSeconds: 30
  19 │       hostNetwork: true
  20 │       dnsPolicy: ClusterFirstWithHostNet
  21 │       containers:
  22 │       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset metricbeat in kube-system namespace shouldn't have volumes set to {"/proc"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 metricbeat-ds2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in daemonset metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-ds2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────



metricbeat-ds2_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'deployment' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat-ds2_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-ds2_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of deployment "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-ds2_7.yaml:43
────────────────────────────────────────
  43 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-ds2_7.yaml:17-66
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       containers:
  19 │       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in deployment metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-ds2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────



metricbeat-ds3_3.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"  username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



metricbeat-ds3_5.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'daemonset' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0006 (HIGH): DaemonSet 'metricbeat' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'
════════════════════════════════════════
Mounting docker.sock from the host can give the container full root access to the host.

See https://avd.aquasec.com/misconfig/ksv006
────────────────────────────────────────
 metricbeat-ds3_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'metricbeat' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metricbeat-ds3_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'metricbeat' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 metricbeat-ds3_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat-ds3_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-ds3_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of daemonset "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-ds3_5.yaml:47
────────────────────────────────────────
  47 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-ds3_5.yaml:17-89
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       terminationGracePeriodSeconds: 30
  19 │       hostNetwork: true
  20 │       dnsPolicy: ClusterFirstWithHostNet
  21 │       containers:
  22 │       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset metricbeat in kube-system namespace shouldn't have volumes set to {"/proc"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 metricbeat-ds3_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in daemonset metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-ds3_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────



metricbeat-ds3_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'deployment' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat-ds3_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-ds3_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of deployment "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-ds3_7.yaml:43
────────────────────────────────────────
  43 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-ds3_7.yaml:17-66
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       containers:
  19 │       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in deployment metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-ds3_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────



metricbeat-ds4_3.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"  username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



metricbeat-ds4_5.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'daemonset' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0006 (HIGH): DaemonSet 'metricbeat' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'
════════════════════════════════════════
Mounting docker.sock from the host can give the container full root access to the host.

See https://avd.aquasec.com/misconfig/ksv006
────────────────────────────────────────
 metricbeat-ds4_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'metricbeat' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metricbeat-ds4_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'metricbeat' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 metricbeat-ds4_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat-ds4_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-ds4_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of daemonset "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-ds4_5.yaml:47
────────────────────────────────────────
  47 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-ds4_5.yaml:17-89
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       terminationGracePeriodSeconds: 30
  19 │       hostNetwork: true
  20 │       dnsPolicy: ClusterFirstWithHostNet
  21 │       containers:
  22 │       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset metricbeat in kube-system namespace shouldn't have volumes set to {"/proc"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 metricbeat-ds4_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in daemonset metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-ds4_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────



metricbeat-ds4_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'deployment' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat-ds4_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-ds4_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of deployment "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-ds4_7.yaml:43
────────────────────────────────────────
  43 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-ds4_7.yaml:17-66
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       containers:
  19 │       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in deployment metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-ds4_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────



metricbeat-ds_3.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"  username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



metricbeat-ds_5.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'daemonset' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0006 (HIGH): DaemonSet 'metricbeat' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'
════════════════════════════════════════
Mounting docker.sock from the host can give the container full root access to the host.

See https://avd.aquasec.com/misconfig/ksv006
────────────────────────────────────────
 metricbeat-ds_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'metricbeat' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metricbeat-ds_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'metricbeat' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 metricbeat-ds_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat-ds_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-ds_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of daemonset "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-ds_5.yaml:47
────────────────────────────────────────
  47 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-ds_5.yaml:17-89
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       terminationGracePeriodSeconds: 30
  19 │       hostNetwork: true
  20 │       dnsPolicy: ClusterFirstWithHostNet
  21 │       containers:
  22 │       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset metricbeat in kube-system namespace shouldn't have volumes set to {"/proc"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 metricbeat-ds_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in daemonset metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-ds_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────



metricbeat-ds_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'deployment' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat-ds_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-ds_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of deployment "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-ds_7.yaml:43
────────────────────────────────────────
  43 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-ds_7.yaml:17-66
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       containers:
  19 │       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in deployment metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-ds_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────



metricbeat-logstash-deployment_2.yaml (kubernetes)
==================================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'daemonset' 'metricbeat' in 'elastic' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0006 (HIGH): DaemonSet 'metricbeat' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'
════════════════════════════════════════
Mounting docker.sock from the host can give the container full root access to the host.

See https://avd.aquasec.com/misconfig/ksv006
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:9-81
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'metricbeat' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:9-81
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'metricbeat' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:9-81
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:9-81
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of daemonset "metricbeat" in "elastic" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:37
────────────────────────────────────────
  37 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset metricbeat in elastic namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:17-81
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       terminationGracePeriodSeconds: 30
  19 │       hostNetwork: true
  20 │       dnsPolicy: ClusterFirstWithHostNet
  21 │       containers:
  22 │       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset metricbeat in elastic namespace shouldn't have volumes set to {"/proc"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:9-81
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in daemonset metricbeat (namespace: elastic) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-logstash-deployment_2.yaml:22-59
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: LOGSTASH_URL
  ..   
────────────────────────────────────────



metricbeat-logstash-deployment_5.yaml (kubernetes)
==================================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'deployment' 'metricbeat' in 'elastic' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metricbeat' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:9-58
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:9-58
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of deployment "metricbeat" in "elastic" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:35
────────────────────────────────────────
  35 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metricbeat in elastic namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:17-58
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       hostNetwork: true
  19 │       dnsPolicy: ClusterFirstWithHostNet
  20 │       containers:
  21 │       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 └         - /etc/metricbeat.yml
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in deployment metricbeat (namespace: elastic) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat-logstash-deployment_5.yaml:21-49
────────────────────────────────────────
  21 ┌       - name: metricbeat
  22 │         image: docker.elastic.co/beats/metricbeat:6.8.14
  23 │         args:
  24 │         - -c
  25 │         - /etc/metricbeat.yml
  26 │         - -e
  27 │         env:
  28 │         - name: LOGSTASH_URL
  29 └           value: logstash-service:5044
  ..   
────────────────────────────────────────



metricbeat1_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'metricbeat-daemonset-config' in 'production' namespace stores sensitive contents in key(s) or value(s) '{"  username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'metricbeat-daemonset-config' in 'production' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



metricbeat1_9.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'daemonset' 'metricbeat' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'metricbeat' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metricbeat1_9.yaml:9-94
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'metricbeat' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 metricbeat1_9.yaml:9-94
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat1_9.yaml:9-94
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of daemonset "metricbeat" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat1_9.yaml:52
────────────────────────────────────────
  52 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset metricbeat in production namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat1_9.yaml:17-94
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       terminationGracePeriodSeconds: 30
  19 │       hostNetwork: true
  20 │       dnsPolicy: ClusterFirstWithHostNet
  21 │       containers:
  22 │       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset metricbeat in production namespace shouldn't have volumes set to {"/proc"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 metricbeat1_9.yaml:9-94
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in daemonset metricbeat (namespace: production) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat1_9.yaml:22-75
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:8.15.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_PORT
  ..   
────────────────────────────────────────



metricbeat2_3.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"  username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'metricbeat-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



metricbeat2_5.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'daemonset' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0006 (HIGH): DaemonSet 'metricbeat' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'
════════════════════════════════════════
Mounting docker.sock from the host can give the container full root access to the host.

See https://avd.aquasec.com/misconfig/ksv006
────────────────────────────────────────
 metricbeat2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'metricbeat' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 metricbeat2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of DaemonSet 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'metricbeat' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 metricbeat2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of daemonset "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat2_5.yaml:47
────────────────────────────────────────
  47 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat2_5.yaml:17-89
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       terminationGracePeriodSeconds: 30
  19 │       hostNetwork: true
  20 │       dnsPolicy: ClusterFirstWithHostNet
  21 │       containers:
  22 │       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset metricbeat in kube-system namespace shouldn't have volumes set to {"/proc"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 metricbeat2_5.yaml:9-89
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in daemonset metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat2_5.yaml:22-69
────────────────────────────────────────
  22 ┌       - name: metricbeat
  23 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  24 │         args:
  25 │         - -c
  26 │         - /etc/metricbeat.yml
  27 │         - -e
  28 │         - -system.hostfs=/hostfs
  29 │         env:
  30 └         - name: ELASTICSEARCH_HOST
  ..   
────────────────────────────────────────



metricbeat2_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metricbeat' of 'deployment' 'metricbeat' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metricbeat' of Deployment 'metricbeat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metricbeat' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 metricbeat2_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 metricbeat2_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metricbeat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: metricbeat
  16 │     spec:
  17 └       serviceAccountName: metricbeat
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metricbeat" of deployment "metricbeat" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 metricbeat2_7.yaml:43
────────────────────────────────────────
  43 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metricbeat in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 metricbeat2_7.yaml:17-66
────────────────────────────────────────
  17 ┌       serviceAccountName: metricbeat
  18 │       containers:
  19 │       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metricbeat in deployment metricbeat (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 metricbeat2_7.yaml:19-57
────────────────────────────────────────
  19 ┌       - name: metricbeat
  20 │         image: docker.elastic.co/beats/metricbeat:6.3.0
  21 │         args:
  22 │         - -c
  23 │         - /etc/metricbeat.yml
  24 │         - -e
  25 │         env:
  26 │         - name: ELASTICSEARCH_HOST
  27 └           value: elasticsearch-logging
  ..   
────────────────────────────────────────


