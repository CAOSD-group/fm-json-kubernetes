
Report Summary

┌─────────────────────────┬────────────┬───────────────────┐
│         Target          │    Type    │ Misconfigurations │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_25.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_26.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_27.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_28.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_29.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_30.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_31.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_32.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_33.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_34.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_35.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_36.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_37.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_38.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_39.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_40.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_41.yaml │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_42.yaml │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_43.yaml │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_44.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_45.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_7.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_8.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_9.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_10.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_11.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_12.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_13.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_14.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_15.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_16.yaml │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_17.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_18.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_19.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_20.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_21.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_22.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_23.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_24.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_25.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_26.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_27.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_28.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_29.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_30.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_31.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_32.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_33.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_34.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_35.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_36.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_37.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_38.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_39.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_40.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_41.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_42.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_43.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_44.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_45.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_7.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_8.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager105_9.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_10.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_11.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_12.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_13.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_14.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_15.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_16.yaml │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_17.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_18.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_19.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_20.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_21.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_22.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_23.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_24.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_25.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_26.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_27.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_28.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_29.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_30.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_31.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_32.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_33.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_34.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_35.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_36.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_37.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_38.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_39.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_40.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_41.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_42.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_43.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_44.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_45.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_7.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_8.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager106_9.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager109.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_10.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_11.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_12.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_13.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_14.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_15.yaml │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_16.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_17.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_18.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_19.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_20.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_21.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_22.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_23.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_24.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_25.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_26.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_27.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_28.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_29.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_30.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_31.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_32.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_33.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_34.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_35.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_36.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_37.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_38.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_39.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_40.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_41.yaml │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_42.yaml │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_43.yaml │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_44.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_45.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_7.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_8.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager113_9.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_10.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_11.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_12.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_13.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_14.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_15.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_16.yaml │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_17.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_18.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_19.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_20.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_21.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_22.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_23.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_24.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_25.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_26.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_27.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_28.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_29.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_30.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_31.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_32.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_33.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_34.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_35.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_36.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_37.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_38.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_39.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_40.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_41.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_42.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_43.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_44.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_45.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_7.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_8.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager119_9.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_10.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_11.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_12.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_15.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_16.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_17.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_29.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_30.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_31.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_32.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_35.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_37.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_38.yaml  │ kubernetes │        17         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_39.yaml  │ kubernetes │        17         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_40.yaml  │ kubernetes │        17         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_41.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_42.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_6.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_7.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_8.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager11_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager12.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_1.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_10.yaml │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_11.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_12.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_13.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_14.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_15.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_16.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_17.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_18.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_19.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_2.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_20.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_21.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_22.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_23.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_24.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_25.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_26.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_27.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_28.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_29.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_3.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_30.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_31.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_32.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_33.yaml │ kubernetes │        14         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_4.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_5.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_6.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_7.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_8.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager121_9.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_10.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_11.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_12.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_13.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_14.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_15.yaml │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_16.yaml │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_17.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_18.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_19.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_20.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_21.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_22.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_23.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_24.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_25.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_26.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_27.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_28.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_29.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_30.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_31.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_32.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_33.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_34.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_35.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_36.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_37.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_38.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_39.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_40.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_41.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_42.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_43.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_44.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_45.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_7.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_8.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager122_9.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_1.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_10.yaml │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_11.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_12.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_13.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_14.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_15.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_16.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_17.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_18.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_19.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_2.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_20.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_21.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_22.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_23.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_24.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_25.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_26.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_27.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_28.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_29.yaml │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_3.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_30.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_31.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_32.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_33.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_34.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_35.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_36.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_37.yaml │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_38.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_39.yaml │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_4.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_5.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_6.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_7.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_8.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager126_9.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager127.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager16.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_1.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_10.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_11.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_12.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_13.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_14.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_15.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_16.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_17.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_2.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_29.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_3.yaml   │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_30.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_31.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_32.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_35.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_37.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_38.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_4.yaml   │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_5.yaml   │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_6.yaml   │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_7.yaml   │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_8.yaml   │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager18_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager20.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_10.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_11.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_12.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_15.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_16.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_17.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_29.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_30.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_31.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_32.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_35.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_37.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_38.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_39.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_40.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_41.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_42.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_43.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_44.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_45.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_7.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_8.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager22_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_10.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_11.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_12.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_15.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_16.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_17.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_29.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_30.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_31.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_32.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_35.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_37.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_38.yaml  │ kubernetes │        17         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_39.yaml  │ kubernetes │        17         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_40.yaml  │ kubernetes │        17         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_41.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_42.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_6.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_7.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_8.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager24_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager25.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager3.yaml      │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager31.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager36.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager37.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager39.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_10.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_11.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_12.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_15.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_16.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_17.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_29.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_30.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_31.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_32.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_35.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_37.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_38.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_39.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_40.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_41.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_42.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_43.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_44.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_45.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_7.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_8.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager40_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_10.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_11.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_12.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_15.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_16.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_17.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_29.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_30.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_31.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_32.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_35.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_37.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_38.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_39.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_40.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_41.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_42.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_43.yaml  │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_44.yaml  │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_45.yaml  │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_46.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_47.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_7.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_8.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager42_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_10.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_11.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_12.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_15.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_16.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_17.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_29.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_30.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_31.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_32.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_35.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_37.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_38.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_39.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_40.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_41.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_42.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_43.yaml  │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_44.yaml  │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_45.yaml  │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_46.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_47.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_7.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_8.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager45_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_10.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_11.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_12.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_15.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_16.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_17.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_29.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_30.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_31.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_32.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_35.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_37.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_38.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_39.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_40.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_41.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_42.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_43.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_44.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_45.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_7.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_8.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager47_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5.yaml      │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_10.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_11.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_12.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_15.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_16.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_17.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_29.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_30.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_31.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_32.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_35.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_37.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_38.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_39.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_40.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_41.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_42.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_43.yaml  │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_44.yaml  │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_45.yaml  │ kubernetes │         8         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_46.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_47.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_7.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_8.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager57_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_1.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_10.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_11.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_12.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_13.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_14.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_15.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_16.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_17.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_18.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_19.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_2.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_20.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_21.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_22.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_23.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_24.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_25.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_26.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_27.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_28.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_29.yaml   │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_3.yaml    │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_30.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_31.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_32.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_33.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_34.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_35.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_36.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_37.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_38.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_4.yaml    │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_5.yaml    │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_6.yaml    │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_7.yaml    │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_8.yaml    │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager5_9.yaml    │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_10.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_11.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_12.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_15.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_16.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_17.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_29.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_30.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_31.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_32.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_35.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_37.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_38.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_39.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_40.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_41.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_42.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_43.yaml  │ kubernetes │         7         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_50.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_51.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_7.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_8.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager69_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager7.yaml      │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_10.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_11.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_12.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_15.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_16.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_17.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_20.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_21.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_22.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_23.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_24.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_25.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_26.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_27.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_28.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_29.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_30.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_31.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_32.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_33.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_34.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_35.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_36.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_37.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_38.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_39.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_40.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_41.yaml  │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_42.yaml  │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_43.yaml  │ kubernetes │        13         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_44.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_45.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_7.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_8.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager76_9.yaml   │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78.yaml     │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_10.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_11.yaml  │ kubernetes │         2         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_12.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_13.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_14.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_15.yaml  │ kubernetes │         1         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_16.yaml  │ kubernetes │         5         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_17.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_18.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_19.yaml  │ kubernetes │         0         │
├─────────────────────────┼────────────┼───────────────────┤
│ cert-manager78_20.yaml  │ kubernetes │         0         │
└─────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


cert-manager104_35.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager104_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager104_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager104_41.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager104_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager104_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager104_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager104_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager104_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager104_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager104_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager104_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager104_42.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager104_42.yaml:38-60
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.11.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.11.0
  46 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager104_42.yaml:38-60
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.11.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.11.0
  46 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager104_42.yaml:38-60
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.11.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.11.0
  46 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager104_42.yaml:38-60
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.11.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.11.0
  46 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager104_42.yaml:38-60
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.11.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.11.0
  46 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager104_42.yaml:38-60
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.11.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.11.0
  46 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager104_42.yaml:38-60
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.11.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.11.0
  46 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager104_42.yaml:38-60
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.11.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.11.0
  46 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager104_43.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager104_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager104_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager104_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager104_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager104_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager104_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager104_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager104_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.11.0
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager105_11.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager105_11.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager105_11.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 │   - watch
  46 └   - update
────────────────────────────────────────



cert-manager105_12.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager105_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager105_13.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager105_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager105_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager105_14.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager105_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager105_15.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager105_16.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager105_16.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager105_16.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager105_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager105_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager105_16.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager105_35.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager105_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager105_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager105_41.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-cainjector' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-cainjector" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager105_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager105_42.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager105_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────



cert-manager105_43.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-webhook' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-webhook" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager105_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────



cert-manager106_11.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager106_11.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager106_11.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 │   - watch
  46 └   - update
────────────────────────────────────────



cert-manager106_12.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager106_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager106_13.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager106_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager106_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager106_14.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager106_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager106_15.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager106_16.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager106_16.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager106_16.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager106_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager106_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager106_16.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager106_35.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager106_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager106_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager106_41.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-cainjector' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-cainjector" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager106_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager106_42.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager106_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────



cert-manager106_43.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-webhook' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-webhook" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager106_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────



cert-manager113_10.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager113_10.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager113_10.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager113_11.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager113_11.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager113_12.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager113_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager113_13.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager113_13.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager113_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager113_14.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager113_15.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager113_15.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager113_15.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager113_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager113_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager113_15.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager113_35.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager113_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager113_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager113_41.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager113_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-cainjector:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager113_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-cainjector:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager113_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-cainjector:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager113_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-cainjector:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager113_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-cainjector:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager113_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-cainjector:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager113_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-cainjector:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager113_42.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager113_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-controller:v1.14.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager113_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-controller:v1.14.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager113_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-controller:v1.14.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager113_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-controller:v1.14.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager113_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-controller:v1.14.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager113_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-controller:v1.14.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager113_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-controller:v1.14.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager113_43.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager113_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-webhook:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager113_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-webhook:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager113_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-webhook:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager113_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-webhook:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager113_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-webhook:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager113_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-webhook:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager113_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: harbor.iblog.pro/quayio/jetstack/cert-manager-webhook:v1.14.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager119_11.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager119_11.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager119_11.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 │   - watch
  46 └   - update
────────────────────────────────────────



cert-manager119_12.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager119_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager119_13.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager119_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager119_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager119_14.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager119_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager119_15.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager119_16.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager119_16.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager119_16.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager119_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager119_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager119_16.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager119_35.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager119_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager119_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager119_41.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-cainjector' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-cainjector" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager119_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager119_42.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager119_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────



cert-manager119_43.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-webhook' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-webhook" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager119_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────



cert-manager11_10.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager11_10.yaml:19-26
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - secrets
  23 │   verbs:
  24 │   - get
  25 │   - list
  26 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager11_10.yaml:36-45
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - admissionregistration.k8s.io
  38 │   resources:
  39 │   - validatingwebhookconfigurations
  40 │   - mutatingwebhookconfigurations
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 │   - watch
  45 └   - update
────────────────────────────────────────



cert-manager11_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager11_11.yaml:26-36
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   resources:
  29 │   - secrets
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - create
  ..   
────────────────────────────────────────



cert-manager11_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager11_12.yaml:26-36
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   resources:
  29 │   - secrets
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - create
  ..   
────────────────────────────────────────



cert-manager11_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager11_13.yaml:48-58
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   verbs:
  53 │   - get
  54 │   - list
  55 │   - watch
  56 └   - create
  ..   
────────────────────────────────────────



cert-manager11_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager11_14.yaml:49-56
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - ''
  51 │   resources:
  52 │   - secrets
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



cert-manager11_15.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager11_15.yaml:35-42
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - secrets
  39 │   verbs:
  40 │   - get
  41 │   - list
  42 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager11_15.yaml:84-91
────────────────────────────────────────
  84 ┌ - apiGroups:
  85 │   - ''
  86 │   resources:
  87 │   - secrets
  88 │   verbs:
  89 │   - get
  90 │   - list
  91 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager11_15.yaml:50-60
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - pods
  54 │   - services
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager11_15.yaml:50-60
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - pods
  54 │   - services
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager11_15.yaml:61-71
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - networking.k8s.io
  63 │   resources:
  64 │   - ingresses
  65 │   verbs:
  66 │   - get
  67 │   - list
  68 │   - watch
  69 └   - create
  ..   
────────────────────────────────────────



cert-manager11_30.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cert-manager-cainjector:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager11_30.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-cainjector-leader-election
  16 │   - cert-manager-cainjector-leader-election-core
  17 │   resources:
  18 │   - configmaps
  19 │   verbs:
  20 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cert-manager-cainjector:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager11_30.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager11_31.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cert-manager:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager11_31.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-controller
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - update
  21 └   - patch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cert-manager:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager11_31.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - ''
  24 │   resources:
  25 │   - configmaps
  26 │   verbs:
  27 └   - create
────────────────────────────────────────



cert-manager11_32.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager11_32.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-webhook-ca
  16 │   resources:
  17 │   - secrets
  18 │   verbs:
  19 │   - get
  20 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager11_32.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager11_38.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-cainjector' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-cainjector" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager-cainjector in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager-cainjector in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager11_38.yaml:26-39
────────────────────────────────────────
  26 ┌       containers:
  27 │       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager11_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────



cert-manager11_39.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager11_39.yaml:30-47
────────────────────────────────────────
  30 ┌       containers:
  31 │       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager11_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────



cert-manager11_40.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-webhook' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-webhook" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager-webhook in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager-webhook in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager11_40.yaml:26-65
────────────────────────────────────────
  26 ┌       containers:
  27 │       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager11_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager121_10.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager121_10.yaml:36-43
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - ''
  38 │   resources:
  39 │   - secrets
  40 │   verbs:
  41 │   - get
  42 │   - list
  43 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager121_10.yaml:96-103
────────────────────────────────────────
  96 ┌ - apiGroups:
  97 │   - ''
  98 │   resources:
  99 │   - secrets
 100 │   verbs:
 101 │   - get
 102 │   - list
 103 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager121_10.yaml:51-61
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - pods
  55 │   - services
  56 │   verbs:
  57 │   - get
  58 │   - list
  59 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager121_10.yaml:51-61
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - pods
  55 │   - services
  56 │   verbs:
  57 │   - get
  58 │   - list
  59 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager121_10.yaml:62-72
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - networking.k8s.io
  64 │   resources:
  65 │   - ingresses
  66 │   verbs:
  67 │   - get
  68 │   - list
  69 │   - watch
  70 └   - create
  ..   
────────────────────────────────────────



cert-manager121_27.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cert-manager-cainjector:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager121_27.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   resourceNames:
  18 │   - cert-manager-cainjector-leader-election
  19 │   - cert-manager-cainjector-leader-election-core
  20 │   verbs:
  21 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cert-manager-cainjector:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager121_27.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - configmaps
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager121_28.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cert-manager:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager121_28.yaml:13-22
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   resourceNames:
  18 │   - cert-manager-controller
  19 │   verbs:
  20 │   - get
  21 │   - update
  22 └   - patch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cert-manager:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager121_28.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager121_29.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager121_29.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager121_29.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager121_33.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager121_33.yaml:40-60
────────────────────────────────────────
  40 ┌       - name: cert-manager
  41 │         image: docker.io/varshaprasadnarsing/cert-manager-controller:v1.7.0-beta.0.197-22667a37b5b871-dirty
  42 │         imagePullPolicy: Always
  43 │         volumeMounts:
  44 │         - name: kubeconfig
  45 │           mountPath: /kubeconfig
  46 │         args:
  47 │         - --v=8
  48 └         - --cluster-resource-namespace=$(POD_NAMESPACE)
  ..   
────────────────────────────────────────



cert-manager121_5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager121_5.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager121_5.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 │   - watch
  46 └   - update
────────────────────────────────────────



cert-manager121_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager121_6.yaml:27-37
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - ''
  29 │   resources:
  30 │   - secrets
  31 │   verbs:
  32 │   - get
  33 │   - list
  34 │   - watch
  35 └   - create
  ..   
────────────────────────────────────────



cert-manager121_7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager121_7.yaml:27-37
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - ''
  29 │   resources:
  30 │   - secrets
  31 │   verbs:
  32 │   - get
  33 │   - list
  34 │   - watch
  35 └   - create
  ..   
────────────────────────────────────────



cert-manager121_8.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager121_8.yaml:49-60
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - ''
  51 │   resources:
  52 │   - secrets
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 │   - watch
  57 └   - create
  ..   
────────────────────────────────────────



cert-manager121_9.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager121_9.yaml:50-57
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 └   - watch
────────────────────────────────────────



cert-manager122_11.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager122_11.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager122_11.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 │   - watch
  46 └   - update
────────────────────────────────────────



cert-manager122_12.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager122_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager122_13.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager122_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager122_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager122_14.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager122_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager122_15.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager122_16.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager122_16.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager122_16.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager122_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager122_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager122_16.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager122_35.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager122_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager122_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager122_41.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-cainjector' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-cainjector" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager122_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kubearmor
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager122_42.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager122_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kubearmor
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────



cert-manager122_43.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-webhook' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-webhook" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager122_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────



cert-manager126_10.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager126_10.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager126_10.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager126_10.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager126_10.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager126_10.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager126_29.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager126_29.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager126_29.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager126_35.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-cainjector' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-cainjector" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager126_35.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager126_36.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager126_36.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.9.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────



cert-manager126_37.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-webhook' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-webhook" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager126_37.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.9.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────



cert-manager126_5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager126_5.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager126_5.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 │   - watch
  46 └   - update
────────────────────────────────────────



cert-manager126_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager126_6.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager126_7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager126_7.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager126_8.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager126_8.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager126_9.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager126_9.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager18_29.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager18_29.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - secrets
  16 │   resourceNames:
  17 │   - cert-manager-webhook-ca
  18 │   verbs:
  19 │   - get
  20 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager18_29.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager18_3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager18_3.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager18_3.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager18_4.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager18_4.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager18_5.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager18_5.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager18_6.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager18_6.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager18_7.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager18_7.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager18_8.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager18_8.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager18_8.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager18_8.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager18_8.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager18_8.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager22_10.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager22_10.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager22_10.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager22_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager22_11.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager22_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager22_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager22_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager22_13.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager22_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager22_14.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager22_15.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager22_15.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager22_15.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager22_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager22_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager22_15.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager22_35.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager22_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager22_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager22_41.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager22_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager22_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager22_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager22_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager22_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager22_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager22_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager22_42.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager22_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager22_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager22_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager22_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager22_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager22_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager22_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager22_43.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager22_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager22_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager22_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager22_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager22_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager22_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager22_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager24_10.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager24_10.yaml:19-26
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - secrets
  23 │   verbs:
  24 │   - get
  25 │   - list
  26 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager24_10.yaml:36-45
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - admissionregistration.k8s.io
  38 │   resources:
  39 │   - validatingwebhookconfigurations
  40 │   - mutatingwebhookconfigurations
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 │   - watch
  45 └   - update
────────────────────────────────────────



cert-manager24_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager24_11.yaml:26-36
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   resources:
  29 │   - secrets
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - create
  ..   
────────────────────────────────────────



cert-manager24_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager24_12.yaml:26-36
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   resources:
  29 │   - secrets
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - create
  ..   
────────────────────────────────────────



cert-manager24_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager24_13.yaml:48-58
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   verbs:
  53 │   - get
  54 │   - list
  55 │   - watch
  56 └   - create
  ..   
────────────────────────────────────────



cert-manager24_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager24_14.yaml:49-56
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - ''
  51 │   resources:
  52 │   - secrets
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



cert-manager24_15.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager24_15.yaml:35-42
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - secrets
  39 │   verbs:
  40 │   - get
  41 │   - list
  42 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager24_15.yaml:84-91
────────────────────────────────────────
  84 ┌ - apiGroups:
  85 │   - ''
  86 │   resources:
  87 │   - secrets
  88 │   verbs:
  89 │   - get
  90 │   - list
  91 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager24_15.yaml:50-60
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - pods
  54 │   - services
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager24_15.yaml:50-60
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - pods
  54 │   - services
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager24_15.yaml:61-71
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - networking.k8s.io
  63 │   resources:
  64 │   - ingresses
  65 │   verbs:
  66 │   - get
  67 │   - list
  68 │   - watch
  69 └   - create
  ..   
────────────────────────────────────────



cert-manager24_30.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cert-manager-cainjector:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager24_30.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-cainjector-leader-election
  16 │   - cert-manager-cainjector-leader-election-core
  17 │   resources:
  18 │   - configmaps
  19 │   verbs:
  20 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cert-manager-cainjector:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager24_30.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager24_31.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cert-manager:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager24_31.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-controller
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - update
  21 └   - patch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cert-manager:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager24_31.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - ''
  24 │   resources:
  25 │   - configmaps
  26 │   verbs:
  27 └   - create
────────────────────────────────────────



cert-manager24_32.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager24_32.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-webhook-ca
  16 │   resources:
  17 │   - secrets
  18 │   verbs:
  19 │   - get
  20 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager24_32.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager24_38.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-cainjector' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-cainjector" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager-cainjector in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager-cainjector in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager24_38.yaml:26-39
────────────────────────────────────────
  26 ┌       containers:
  27 │       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager24_38.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.3.1
  ..   
────────────────────────────────────────



cert-manager24_39.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager24_39.yaml:30-47
────────────────────────────────────────
  30 ┌       containers:
  31 │       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager24_39.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────



cert-manager24_40.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-webhook' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-webhook" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager-webhook in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager-webhook in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager24_40.yaml:26-65
────────────────────────────────────────
  26 ┌       containers:
  27 │       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager24_40.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager40_10.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager40_10.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager40_10.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager40_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager40_11.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager40_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager40_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager40_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager40_13.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager40_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager40_14.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager40_15.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager40_15.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager40_15.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager40_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager40_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager40_15.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager40_35.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager40_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager40_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager40_41.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager40_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager40_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager40_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager40_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager40_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager40_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager40_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager40_42.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager40_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager40_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager40_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager40_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager40_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager40_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager40_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager40_43.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager40_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager40_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager40_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager40_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager40_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager40_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager40_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager42_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager42_12.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager42_12.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager42_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager42_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager42_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager42_14.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager42_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager42_15.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager42_16.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager42_16.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager42_17.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager42_17.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager42_17.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager42_17.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager42_17.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager42_17.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager42_37.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager42_37.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager42_37.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager42_43.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager42_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager42_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager42_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager42_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager42_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager42_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager42_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager42_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager42_44.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager42_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager42_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager42_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager42_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager42_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager42_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager42_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager42_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager42_45.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager42_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager42_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager42_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager42_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager42_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager42_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager42_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager42_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager45_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager45_12.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager45_12.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager45_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager45_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager45_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager45_14.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager45_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager45_15.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager45_16.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager45_16.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager45_17.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager45_17.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager45_17.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager45_17.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager45_17.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager45_17.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager45_37.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager45_37.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager45_37.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager45_43.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager45_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager45_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager45_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager45_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager45_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager45_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager45_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager45_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager45_44.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager45_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager45_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager45_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager45_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager45_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager45_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager45_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager45_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager45_45.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager45_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager45_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager45_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager45_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager45_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager45_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager45_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager45_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager47_10.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager47_10.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager47_10.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager47_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager47_11.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager47_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager47_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager47_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager47_13.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager47_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager47_14.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager47_15.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager47_15.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager47_15.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager47_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager47_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager47_15.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager47_35.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager47_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager47_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager47_41.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager47_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager47_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager47_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager47_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager47_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager47_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager47_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager47_42.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager47_42.yaml:40-76
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.14.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager47_42.yaml:40-76
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.14.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager47_42.yaml:40-76
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.14.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager47_42.yaml:40-76
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.14.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager47_42.yaml:40-76
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.14.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager47_42.yaml:40-76
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.14.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager47_42.yaml:40-76
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.14.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager47_43.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager47_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager47_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager47_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager47_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager47_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager47_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager47_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.1
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager57_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager57_12.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager57_12.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager57_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager57_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager57_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager57_14.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager57_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager57_15.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager57_16.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager57_16.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager57_17.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager57_17.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager57_17.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager57_17.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager57_17.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager57_17.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager57_37.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager57_37.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager57_37.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager57_43.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager57_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager57_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager57_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager57_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager57_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager57_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager57_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager57_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager57_44.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager57_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager57_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager57_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager57_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager57_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager57_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager57_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager57_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.3
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager57_45.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager57_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager57_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager57_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager57_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager57_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager57_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager57_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager57_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.3
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager5_29.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager5_29.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - secrets
  16 │   resourceNames:
  17 │   - cert-manager-webhook-ca
  18 │   verbs:
  19 │   - get
  20 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager5_29.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager5_3.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager5_3.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager5_3.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager5_4.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager5_4.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager5_5.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager5_5.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager5_6.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager5_6.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager5_7.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager5_7.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager5_8.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager5_8.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager5_8.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager5_8.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager5_8.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager5_8.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager69_10.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager69_10.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager69_10.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager69_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager69_11.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager69_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager69_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager69_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager69_13.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager69_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager69_14.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager69_15.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager69_15.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager69_15.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager69_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager69_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager69_15.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager69_35.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager69_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager69_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager69_41.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager69_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager69_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager69_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager69_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager69_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager69_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager69_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager69_42.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager69_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.16.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager69_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.16.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager69_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.16.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager69_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.16.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager69_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.16.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager69_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.16.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager69_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.16.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager69_43.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager69_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager69_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager69_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager69_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager69_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager69_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager69_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager76_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager76_11.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager76_11.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 │   - watch
  46 └   - update
────────────────────────────────────────



cert-manager76_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager76_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager76_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager76_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager76_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager76_14.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager76_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager76_15.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager76_16.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager76_16.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager76_16.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager76_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager76_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager76_16.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager76_35.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager76_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager76_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager76_41.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-cainjector' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-cainjector" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager76_41.yaml:32-44
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --leader-election-namespace=kube-system
  38 │         env:
  39 │         - name: POD_NAMESPACE
  40 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager76_42.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager76_42.yaml:36-53
────────────────────────────────────────
  36 ┌       - name: cert-manager
  37 │         image: quay.io/jetstack/cert-manager-controller:v1.8.0
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  42 │         - --leader-election-namespace=kube-system
  43 │         ports:
  44 └         - containerPort: 9402
  ..   
────────────────────────────────────────



cert-manager76_43.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-webhook' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-webhook" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager76_43.yaml:32-71
────────────────────────────────────────
  32 ┌       - name: cert-manager
  33 │         image: quay.io/jetstack/cert-manager-webhook:v1.8.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         args:
  36 │         - --v=2
  37 │         - --secure-port=10250
  38 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  39 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  40 └         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  ..   
────────────────────────────────────────



cert-manager78_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager78_11.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager78_11.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 │   - watch
  46 └   - update
────────────────────────────────────────



cert-manager78_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager78_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager78_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager78_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager78_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager78_14.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager78_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager78_15.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager78_16.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager78_16.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager78_16.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager78_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager78_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager78_16.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────


